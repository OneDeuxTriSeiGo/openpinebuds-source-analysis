local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/interconnection/umm_malloc/umm_malloc.h
remote: https://raw.githubusercontent.com/rhempel/umm_malloc/e7df6ab2f6d27c7a3d8f900d9fb1a50a5ab26a84/src/umm_malloc.h
diff -sw local remote
---

1,33c1,2
< #ifndef UMM_MALLOC_H
< #define UMM_MALLOC_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< extern unsigned char umm_heap_array[];
< 
< #ifndef size_t
< typedef unsigned int                size_t;
< #endif
< 
< /* Start addresses and the size of the heap */
< #define UMM_MALLOC_CFG_HEAP_ADDR (umm_heap_array)
< #ifdef __DUAL_MIC_RECORDING__
< #define UMM_MALLOC_CFG_HEAP_SIZE (10 * 1024)
< #else
< #define UMM_MALLOC_CFG_HEAP_SIZE 0x1000 // 4K
< #endif
< /* A couple of macros to make packing structures less compiler dependent */
< 
< #define UMM_H_ATTPACKPRE
< #define UMM_H_ATTPACKSUF __attribute__((__packed__))
< 
< #define UMM_BEST_FIT
< #undef  UMM_FIRST_FIT
< 
< /*
<  * A couple of macros to make it easier to protect the memory allocator
<  * in a multitasking system. You should set these macros up to use whatever
<  * your system uses for this purpose. You can disable interrupts entirely, or
<  * just disable task switching - it's up to you
---
> /* ----------------------------------------------------------------------------
>  * umm_malloc.h - a memory allocator for embedded systems (microcontrollers)
35,36c4,5
<  * NOTE WELL that these macros MUST be allowed to nest, because umm_free() is
<  * called from within umm_malloc()
---
>  * See copyright notice in LICENSE.TXT
>  * ----------------------------------------------------------------------------
39,40c8,9
< #define UMM_CRITICAL_ENTRY()    LOCK_UMM_CLOCK()
< #define UMM_CRITICAL_EXIT()     UNLOCK_UMM_CLOCK()
---
> #ifndef UMM_MALLOC_H
> #define UMM_MALLOC_H
52,55d20
< 
< #ifdef __cplusplus
< }
< #endif
