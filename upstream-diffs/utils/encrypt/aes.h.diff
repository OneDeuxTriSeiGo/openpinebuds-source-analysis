local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/utils/encrypt/aes.h
remote: https://raw.githubusercontent.com/kokke/tiny-AES-c/0a8bafcd8d4cdb5c107a1c2a0ea94518c99ab49b/aes.h
diff -sw local remote
---

9c9
< // CBC enables AES128 encryption in CBC-mode of operation and handles 0-padding.
---
> // CBC enables AES encryption in CBC-mode of operation.
11,13d10
< #if defined(__cplusplus)
< extern "C" {
< #endif
23a21,24
> #ifndef CTR
>   #define CTR 1
> #endif
> 
24a26,28
> #define AES128 1
> //#define AES192 1
> //#define AES256 1
26c30
< #if defined(ECB) && ECB
---
> #if defined(ECB) && (ECB == 1)
28,29c32,33
< void AES128_ECB_encrypt(uint8_t* input, const uint8_t* key, uint8_t *output);
< void AES128_ECB_decrypt(uint8_t* input, const uint8_t* key, uint8_t *output);
---
> void AES_ECB_encrypt(const uint8_t* input, const uint8_t* key, uint8_t *output, const uint32_t length);
> void AES_ECB_decrypt(const uint8_t* input, const uint8_t* key, uint8_t *output, const uint32_t length);
31c35
< #endif // #if defined(ECB) && ECB
---
> #endif // #if defined(ECB) && (ECB == !)
34c38
< #if defined(CBC) && CBC
---
> #if defined(CBC) && (CBC == 1)
36,37c40,41
< void AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
< void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
---
> void AES_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
> void AES_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
39c43
< #endif // #if defined(CBC) && CBC
---
> #endif // #if defined(CBC) && (CBC == 1)
41d44
< void AES128_CTR_encrypt_buffer(uint8_t* input, uint32_t length, const uint8_t* key, uint8_t* iv, uint8_t* output);
43,45c46,52
< #if defined(__cplusplus)
< }
< #endif
---
> #if defined(CTR) && (CTR == 1)
> 
> /* Symmetrical operation: same function for encrypting as for decrypting */
> void AES_CTR_xcrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
> 
> #endif // #if defined(CTR) && (CTR == 1)
> 
