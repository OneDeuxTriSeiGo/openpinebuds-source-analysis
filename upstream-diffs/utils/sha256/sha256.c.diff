local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/utils/sha256/sha256.c
remote: https://raw.githubusercontent.com/aosp-mirror/platform_system_core/db0850c3b637faaa7cbe1bab2e6c91ad2af35426/libmincrypt/sha256.c
diff -sw local remote
---

30c30
< #include "sha256.h"
---
> #include "mincrypt/sha256.h"
36,40d35
< #include "cmsis.h"
< #include "hal_timer.h"
< #include "hal_sec_eng.h"
< #include "plat_addr_map.h"
< 
65,67d59
< #if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) || (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)
<     uint32_t* p32 = ctx->buf32;
< #else
69d60
< #endif
73,77d63
< #if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
<         W[t] = __REV(*p32++);
< #elif (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)
<         W[t] = *p32++;
< #else
83d68
< #endif
151,152c136,137
< void SHA256_update(SHA256_CTX* ctx, const void* data, uint32_t len) {
<     uint32_t i = (uint32_t) (ctx->count & 63);
---
> void SHA256_update(SHA256_CTX* ctx, const void* data, int len) {
>     int i = (int) (ctx->count & 63);
157,177d141
< #if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) || (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)
<     if (len >= 4 && (i & 0x3) == 0 && ((uint32_t)p & 0x3) == 0) {
<         const uint32_t *p32 = (const uint32_t *)p;
<         int k = i / 4;
<         while (len >= 4) {
<             len -= 4;
< #if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
<             ctx->buf32[k++] = *p32++;
< #else
<             ctx->buf32[k++] = __REV(*p32++);
< #endif
<             if (k == 64 / 4) {
<                 SHA256_Transform(ctx);
<                 k = 0;
<             }
<         }
<         i = k * 4;
<         p = (const uint8_t *)p32;
<     }
< #endif
< 
186a151
> 
190c155
<     uint32_t i;
---
>     int i;
213,214c178
< const uint8_t* SHA256_hash2(const void* data1, uint32_t len1, const void* data2, uint32_t len2, uint8_t* digest)
< {
---
> const uint8_t* SHA256_hash(const void* data, int len, uint8_t* digest) {
217,222c181
<     if (data1 && len1) {
<         SHA256_update(&ctx, data1, len1);
<     }
<     if (data2 && len2) {
<         SHA256_update(&ctx, data2, len2);
<     }
---
>     SHA256_update(&ctx, data, len);
225,279d183
< }
< 
< const uint8_t* SHA256_hash(const void* data, uint32_t len, uint8_t* digest)
< {
<     return SHA256_hash2(data, len, NULL, 0, digest);
< }
< 
< #if defined(SEC_ENG_BASE) && defined(SEC_ENG_HAS_HASH)
< static int hw_eng_en;
< #endif
< 
< void hash_hardware_engine_enable(int enable)
< {
< #if defined(SEC_ENG_BASE) && defined(SEC_ENG_HAS_HASH)
<     hw_eng_en = enable;
< #endif
< }
< 
< const uint8_t* hash_sha256(const void* data, uint32_t len, uint8_t* digest)
< {
< #if defined(SEC_ENG_BASE) && defined(SEC_ENG_HAS_HASH)
<     if (hw_eng_en) {
<         enum HAL_SE_RET_T ret;
<         struct HAL_SE_HASH_CFG_T cfg;
<         uint32_t time;
< 
<         ret = hal_se_open();
<         if (ret != HAL_SE_OK) {
<             goto _exit;
<         }
< 
<         memset(&cfg, 0, sizeof(cfg));
<         cfg.done_hdlr = NULL;
<         cfg.in = data;
<         cfg.in_len = len;
< 
<         ret = hal_se_hash(HAL_SE_HASH_SHA256, &cfg);
<         if (ret != HAL_SE_OK) {
<             goto _exit;
<         }
< 
<         time = hal_sys_timer_get();
<         while (hal_se_hash_busy() && (hal_sys_timer_get() - time < MS_TO_TICKS(10000))) {}
< 
<         ret = hal_se_hash_get_digest(&digest[0], SHA256_DIGEST_SIZE, &len);
< 
< _exit:
<         hal_se_close();
<         if (ret == HAL_SE_OK) {
<             return digest;
<         }
<     }
< #endif
< 
<     return SHA256_hash(data, len, digest);
