local: https://raw.githubusercontent.com/pine64/OpenPineBuds/29b195e12da6a5c791d1418af8448be80bccf18d/utils/encrypt/aes.h
remote: https://raw.githubusercontent.com/wmbusmeters/wmbusmeters/05b987006fefcecc98c9339c7caa881a369a95b8/src/aes.h
diff -sw local remote
---

0a1,3
> // Source from https://github.com/kokke/tiny-AES128-C
> // Public Domain / CC0 / Unlicense
> // Copyright (C) 2017-2019 kokke (CC0-1.0)
9c12
< // CBC enables AES128 encryption in CBC-mode of operation and handles 0-padding.
---
> // CBC enables AES encryption in CBC-mode of operation.
11,13d13
< #if defined(__cplusplus)
< extern "C" {
< #endif
23a24,26
> #define AES128 1
> //#define AES192 1
> //#define AES256 1
24a28
> #if defined(ECB) && (ECB == 1)
26,29c30,31
< #if defined(ECB) && ECB
< 
< void AES128_ECB_encrypt(uint8_t* input, const uint8_t* key, uint8_t *output);
< void AES128_ECB_decrypt(uint8_t* input, const uint8_t* key, uint8_t *output);
---
> void AES_ECB_encrypt(const uint8_t* input, const uint8_t* key, uint8_t *output, const uint32_t length);
> void AES_ECB_decrypt(const uint8_t* input, const uint8_t* key, uint8_t *output, const uint32_t length);
31c33
< #endif // #if defined(ECB) && ECB
---
> #endif // #if defined(ECB) && (ECB == !)
34c36
< #if defined(CBC) && CBC
---
> #if defined(CBC) && (CBC == 1)
36,37c38,39
< void AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
< void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
---
> void AES_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
> void AES_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv);
39c41
< #endif // #if defined(CBC) && CBC
---
> #endif // #if defined(CBC) && (CBC == 1)
41,45d42
< void AES128_CTR_encrypt_buffer(uint8_t* input, uint32_t length, const uint8_t* key, uint8_t* iv, uint8_t* output);
< 
< #if defined(__cplusplus)
< }
< #endif
