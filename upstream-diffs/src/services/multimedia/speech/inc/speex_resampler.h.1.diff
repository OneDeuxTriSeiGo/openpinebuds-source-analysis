local: https://raw.githubusercontent.com/pine64/OpenPineBuds/29b195e12da6a5c791d1418af8448be80bccf18d/services/multimedia/speech/inc/speex_resampler.h
remote: https://raw.githubusercontent.com/xiph/speexdsp/83b63852e0e4755a8c04a1f9c87dd73b5aa6293f/include/speex/speex_resampler.h
diff -sw local remote
---

3d2
<       
42a42
> #ifdef OUTSIDE_SPEEX
43a44
> /********* WARNING: MENTAL SANITY ENDS HERE *************/
45,48c46,47
< /* We don't support visibility on Win32 */
< #define EXPORT
< 
< //#define RESAMPLE_CAL
---
> /* If the resampler is defined outside of Speex, we change the symbol names so that
>    there won't be any clash if linking with Speex later on. */
49a49,52
> /* #define RANDOM_PREFIX your software name here */
> #ifndef RANDOM_PREFIX
> #error "Please define RANDOM_PREFIX (above) to something specific to your project to prevent symbol name clashes"
> #endif
51,54c54,55
< typedef short spx_int16_t;
< typedef int spx_int32_t;
< typedef unsigned short spx_uint16_t;
< typedef unsigned int spx_uint32_t;
---
> #define CAT_PREFIX2(a,b) a ## b
> #define CAT_PREFIX(a,b) CAT_PREFIX2(a, b)
55a57,85
> #define speex_resampler_init CAT_PREFIX(RANDOM_PREFIX,_resampler_init)
> #define speex_resampler_init_frac CAT_PREFIX(RANDOM_PREFIX,_resampler_init_frac)
> #define speex_resampler_destroy CAT_PREFIX(RANDOM_PREFIX,_resampler_destroy)
> #define speex_resampler_process_float CAT_PREFIX(RANDOM_PREFIX,_resampler_process_float)
> #define speex_resampler_process_int CAT_PREFIX(RANDOM_PREFIX,_resampler_process_int)
> #define speex_resampler_process_interleaved_float CAT_PREFIX(RANDOM_PREFIX,_resampler_process_interleaved_float)
> #define speex_resampler_process_interleaved_int CAT_PREFIX(RANDOM_PREFIX,_resampler_process_interleaved_int)
> #define speex_resampler_set_rate CAT_PREFIX(RANDOM_PREFIX,_resampler_set_rate)
> #define speex_resampler_get_rate CAT_PREFIX(RANDOM_PREFIX,_resampler_get_rate)
> #define speex_resampler_set_rate_frac CAT_PREFIX(RANDOM_PREFIX,_resampler_set_rate_frac)
> #define speex_resampler_get_ratio CAT_PREFIX(RANDOM_PREFIX,_resampler_get_ratio)
> #define speex_resampler_set_quality CAT_PREFIX(RANDOM_PREFIX,_resampler_set_quality)
> #define speex_resampler_get_quality CAT_PREFIX(RANDOM_PREFIX,_resampler_get_quality)
> #define speex_resampler_set_input_stride CAT_PREFIX(RANDOM_PREFIX,_resampler_set_input_stride)
> #define speex_resampler_get_input_stride CAT_PREFIX(RANDOM_PREFIX,_resampler_get_input_stride)
> #define speex_resampler_set_output_stride CAT_PREFIX(RANDOM_PREFIX,_resampler_set_output_stride)
> #define speex_resampler_get_output_stride CAT_PREFIX(RANDOM_PREFIX,_resampler_get_output_stride)
> #define speex_resampler_get_input_latency CAT_PREFIX(RANDOM_PREFIX,_resampler_get_input_latency)
> #define speex_resampler_get_output_latency CAT_PREFIX(RANDOM_PREFIX,_resampler_get_output_latency)
> #define speex_resampler_skip_zeros CAT_PREFIX(RANDOM_PREFIX,_resampler_skip_zeros)
> #define speex_resampler_reset_mem CAT_PREFIX(RANDOM_PREFIX,_resampler_reset_mem)
> #define speex_resampler_strerror CAT_PREFIX(RANDOM_PREFIX,_resampler_strerror)
> 
> #define spx_int16_t short
> #define spx_int32_t int
> #define spx_uint16_t unsigned short
> #define spx_uint32_t unsigned int
> 
> #define speex_assert(cond)
56a87
> #else /* OUTSIDE_SPEEX */
58,59c89
< typedef short spx_word16_t;
< typedef int spx_word32_t;
---
> #include "speexdsp_types.h"
60a91
> #endif /* OUTSIDE_SPEEX */
61a93,95
> #ifdef __cplusplus
> extern "C" {
> #endif
74a109
>    RESAMPLER_ERR_OVERFLOW        = 5,
79,97d113
< 
< enum {
< 	RESAMPLER_MODE_CAL = 0,
< 	RESAMPLER_MODE_8KTO64K = 1,
< 	RESAMPLER_MODE_64KTO8K = 2,
< 	
< 	RESAMPLER_MODE_ERROR
< };
< 
< 
< 
< 
< 
< 
< #define RESAMPLE_MAXCHANNEL 1//xuml add
< #define RESAMPLE_MAXSINCBUF 512//xuml add
< #define RESAMPLE_MAXMEMBUF 680//xuml add
< 
< 
101,149d116
< 
< typedef int(*resampler_basic_func)(SpeexResamplerState *, spx_uint32_t, const spx_word16_t *, spx_uint32_t *, spx_word16_t *, spx_uint32_t *);
< 
< struct SpeexResamplerState_ {
< 	spx_uint32_t in_rate;
< 	spx_uint32_t out_rate;
< 	spx_uint32_t num_rate;
< 	spx_uint32_t den_rate;
< 
< 	int    quality;
< 	spx_uint32_t nb_channels;
< 	spx_uint32_t filt_len;
< 	spx_uint32_t mem_alloc_size;
< 	spx_uint32_t buffer_size;
< 	int          int_advance;
< 	int          frac_advance;
< 	float  cutoff;
< 	spx_uint32_t oversample;
< 	int          initialised;
< 	int          started;
< 
< 	/* These are per-channel */
< 	spx_int32_t  last_sample[RESAMPLE_MAXCHANNEL];
< 	spx_uint32_t samp_frac_num[RESAMPLE_MAXCHANNEL];
< 	spx_uint32_t magic_samples[RESAMPLE_MAXCHANNEL];
< 
< 	spx_word16_t mem[RESAMPLE_MAXMEMBUF];
< 	//spx_word16_t *mem;
< 
< #ifdef RESAMPLE_CAL
< 	spx_word16_t sinc_table[RESAMPLE_MAXSINCBUF];
< #else
< 	const spx_word16_t *sinc_table;
< #endif
< 	spx_uint32_t sinc_table_length;
< 	resampler_basic_func resampler_ptr;
< 
< 	int    in_stride;
< 	int    out_stride;
< 
< 	int    mode;
< 
< 
< };
< 
< 
< 
< 
< 
159,160c126
< void speex_resampler_init(SpeexResamplerState *st,
< 						  spx_uint32_t nb_channels, 
---
> SpeexResamplerState *speex_resampler_init(spx_uint32_t nb_channels,
164d129
< 						  int mode,
180,181c145
< void speex_resampler_init_frac(SpeexResamplerState *st, 
< 							   spx_uint32_t nb_channels,
---
> SpeexResamplerState *speex_resampler_init_frac(spx_uint32_t nb_channels,
187d150
< 							   int mode,
189a153,156
> /** Destroy a resampler state.
>  * @param st Resampler state
>  */
> void speex_resampler_destroy(SpeexResamplerState *st);
190a158,173
> /** Resample a float array. The input and output buffers must *not* overlap.
>  * @param st Resampler state
>  * @param channel_index Index of the channel to process for the multi-channel
>  * base (0 otherwise)
>  * @param in Input buffer
>  * @param in_len Number of input samples in the input buffer. Returns the
>  * number of samples processed
>  * @param out Output buffer
>  * @param out_len Size of the output buffer. Returns the number of samples written
>  */
> int speex_resampler_process_float(SpeexResamplerState *st,
>                                    spx_uint32_t channel_index,
>                                    const float *in,
>                                    spx_uint32_t *in_len,
>                                    float *out,
>                                    spx_uint32_t *out_len);
208a192,205
> /** Resample an interleaved float array. The input and output buffers must *not* overlap.
>  * @param st Resampler state
>  * @param in Input buffer
>  * @param in_len Number of input samples in the input buffer. Returns the number
>  * of samples processed. This is all per-channel.
>  * @param out Output buffer
>  * @param out_len Size of the output buffer. Returns the number of samples written.
>  * This is all per-channel.
>  */
> int speex_resampler_process_interleaved_float(SpeexResamplerState *st,
>                                                const float *in,
>                                                spx_uint32_t *in_len,
>                                                float *out,
>                                                spx_uint32_t *out_len);
209a207,229
> /** Resample an interleaved int array. The input and output buffers must *not* overlap.
>  * @param st Resampler state
>  * @param in Input buffer
>  * @param in_len Number of input samples in the input buffer. Returns the number
>  * of samples processed. This is all per-channel.
>  * @param out Output buffer
>  * @param out_len Size of the output buffer. Returns the number of samples written.
>  * This is all per-channel.
>  */
> int speex_resampler_process_interleaved_int(SpeexResamplerState *st,
>                                              const spx_int16_t *in,
>                                              spx_uint32_t *in_len,
>                                              spx_int16_t *out,
>                                              spx_uint32_t *out_len);
> 
> /** Set (change) the input/output sampling rates (integer value).
>  * @param st Resampler state
>  * @param in_rate Input sampling rate (integer number of Hz).
>  * @param out_rate Output sampling rate (integer number of Hz).
>  */
> int speex_resampler_set_rate(SpeexResamplerState *st,
>                               spx_uint32_t in_rate,
>                               spx_uint32_t out_rate);
210a231,238
> /** Get the current input/output sampling rates (integer value).
>  * @param st Resampler state
>  * @param in_rate Input sampling rate (integer number of Hz) copied.
>  * @param out_rate Output sampling rate (integer number of Hz) copied.
>  */
> void speex_resampler_get_rate(SpeexResamplerState *st,
>                               spx_uint32_t *in_rate,
>                               spx_uint32_t *out_rate);
225a254,262
> /** Get the current resampling ratio. This will be reduced to the least
>  * common denominator.
>  * @param st Resampler state
>  * @param ratio_num Numerator of the sampling rate ratio copied
>  * @param ratio_den Denominator of the sampling rate ratio copied
>  */
> void speex_resampler_get_ratio(SpeexResamplerState *st,
>                                spx_uint32_t *ratio_num,
>                                spx_uint32_t *ratio_den);
234a272,331
> /** Get the conversion quality.
>  * @param st Resampler state
>  * @param quality Resampling quality between 0 and 10, where 0 has poor
>  * quality and 10 has very high quality.
>  */
> void speex_resampler_get_quality(SpeexResamplerState *st,
>                                  int *quality);
> 
> /** Set (change) the input stride.
>  * @param st Resampler state
>  * @param stride Input stride
>  */
> void speex_resampler_set_input_stride(SpeexResamplerState *st,
>                                       spx_uint32_t stride);
> 
> /** Get the input stride.
>  * @param st Resampler state
>  * @param stride Input stride copied
>  */
> void speex_resampler_get_input_stride(SpeexResamplerState *st,
>                                       spx_uint32_t *stride);
> 
> /** Set (change) the output stride.
>  * @param st Resampler state
>  * @param stride Output stride
>  */
> void speex_resampler_set_output_stride(SpeexResamplerState *st,
>                                       spx_uint32_t stride);
> 
> /** Get the output stride.
>  * @param st Resampler state copied
>  * @param stride Output stride
>  */
> void speex_resampler_get_output_stride(SpeexResamplerState *st,
>                                       spx_uint32_t *stride);
> 
> /** Get the latency introduced by the resampler measured in input samples.
>  * @param st Resampler state
>  */
> int speex_resampler_get_input_latency(SpeexResamplerState *st);
> 
> /** Get the latency introduced by the resampler measured in output samples.
>  * @param st Resampler state
>  */
> int speex_resampler_get_output_latency(SpeexResamplerState *st);
> 
> /** Make sure that the first samples to go out of the resamplers don't have
>  * leading zeros. This is only useful before starting to use a newly created
>  * resampler. It is recommended to use that when resampling an audio file, as
>  * it will generate a file with the same length. For real-time processing,
>  * it is probably easier not to use this call (so that the output duration
>  * is the same for the first frame).
>  * @param st Resampler state
>  */
> int speex_resampler_skip_zeros(SpeexResamplerState *st);
> 
> /** Reset a resampler so a new (unrelated) stream can be processed.
>  * @param st Resampler state
>  */
> int speex_resampler_reset_mem(SpeexResamplerState *st);
235a333,337
> /** Returns the English meaning for an error code
>  * @param err Error code
>  * @return English string
>  */
> const char *speex_resampler_strerror(int err);
236a339,340
> #ifdef __cplusplus
> }
238a343
> #endif
