local: https://raw.githubusercontent.com/pine64/OpenPineBuds/29b195e12da6a5c791d1418af8448be80bccf18d/rtos/rtx/TARGET_CORTEX_M/rt_Task.c
remote: https://raw.githubusercontent.com/ARM-software/mbed-beetle/45ddf10698e1be3ee922de70d4801b5bd776e0ca/libraries/rtos/rtx/TARGET_CORTEX_M/rt_Task.c
diff -sw local remote
---

44,45d43
< #include "hal_timer.h"
< 
56,60d53
< static U32 rtx_get_hwticks(void)
< {
<     return hal_sys_timer_get();
< }
< 
117,122d109
< #if __RTX_CPU_STATISTICS__
<   if (os_tsk.run != p_new) {
<       os_tsk.run->swap_out_time = HWTICKS_TO_MS(rtx_get_hwticks());
<       p_new->swap_in_time = HWTICKS_TO_MS(rtx_get_hwticks());
<   }
< #endif
294,296d280
< #if __RTX_CPU_STATISTICS__
<   os_idle_TCB.name = (U8 *)"os_idle";
< #endif
320,322c304
< #if __RTX_CPU_STATISTICS__
<   os_tsk.run->swap_in_time = HWTICKS_TO_MS(rtx_get_hwticks());
< #endif
---
> 
354,731d335
< 
< //------------------------------------------------------------------------------
< // Debug functions
< //------------------------------------------------------------------------------
< 
< #include "plat_addr_map.h"
< #include "hal_location.h"
< #include "hal_trace.h"
< 
< #define RTX_DUMP_VERBOSE
< 
< struct IRQ_STACK_FRAME_T {
<     uint32_t r0;
<     uint32_t r1;
<     uint32_t r2;
<     uint32_t r3;
<     uint32_t r12;
<     uint32_t lr;
<     uint32_t pc;
<     uint32_t xpsr;
< };
< 
< extern uint32_t __StackTop[];
< 
< static inline uint32_t get_IPSR(void)
< {
<   uint32_t result;
< 
<   asm volatile ("MRS %0, ipsr" : "=r" (result) );
<   return(result);
< }
< 
< static inline uint32_t get_PSP(void)
< {
<   uint32_t result;
< 
<   asm volatile ("MRS %0, psp" : "=r" (result) );
<   return(result);
< }
< 
< static inline struct IRQ_STACK_FRAME_T *_rtx_get_irq_stack_frame(P_TCB tcb)
< {
<     uint32_t sp;
< 
<     if (tcb == NULL) {
<         return NULL;
<     }
<     if (tcb == os_tsk.run && get_IPSR() == 0) {
<         return NULL;
<     }
<     if (tcb == os_tsk.run) {
<         sp = get_PSP();
<     } else {
<         sp = tcb->tsk_stack;
<     }
<     if ((sp & 3) || !hal_trace_address_writable(sp)) {
<         return NULL;
<     }
< 
<     if (tcb != os_tsk.run) {
<         // r4-r11
<         sp += 4 * 8;
<         if (tcb->stack_frame) {
<             // s16-s31
<             sp += 4 * 16;
<         }
<     }
< 
<     return (struct IRQ_STACK_FRAME_T *)sp;
< }
< 
< FLASH_TEXT_LOC
< void rt_tsk_show(P_TCB tcb)
< {
<     static const char * const state_list[] = {
<         "INACTIVE", "READY", "RUNNING", "WAIT_DLY", "WAIT_ITV", "WAIT_OR", "WAIT_AND", "WAIT_SEM", "WAIT_MBX", "WAIT_MUT", "BAD",
<     };
<     const char *task_st_str;
<     uint32_t idx;
<     struct IRQ_STACK_FRAME_T *frame;
< 
<     if (tcb) {
<         if (tcb->cb_type == TCB && ((tcb->task_id >= 1 && tcb->task_id <= os_maxtaskrun) || tcb->task_id == 255) &&
<                 tcb->ptask && tcb->stack) {
<             if (tcb->state < ARRAY_SIZE(state_list)) {
<                 idx = tcb->state;
<             } else {
<                 idx = ARRAY_SIZE(state_list) - 1;
<             }
<             task_st_str = state_list[idx];
<             REL_TRACE_NOCRLF_NOTS(1,"--- Task %3u", tcb->task_id);
< 
<             REL_TRACE_NOTS(4," tcb=0x%08X prio=%u state=%-8s ptask=0x%08X", (uint32_t)tcb, tcb->prio, task_st_str, (uint32_t)tcb->ptask);
< #if __RTX_CPU_STATISTICS__
<             if(tcb->name || tcb->task_id == 1) {
<                 REL_TRACE_NOTS(1,"    name=%s", tcb->name ? (const char *)tcb->name : "main");
<             }
< #endif
< #ifdef RTX_DUMP_VERBOSE
<             REL_TRACE_NOTS(3,"    p_lnk=0x%08X p_rlnk=0x%08X p_dlnk=0x%08X",
<                  (uint32_t)tcb->p_lnk, (uint32_t)tcb->p_rlnk, (uint32_t)tcb->p_dlnk);
<             REL_TRACE_NOTS(3,"    p_blnk=0x%08X delta_time=%u interval_time=%u",
<                  (uint32_t)tcb->p_blnk, tcb->delta_time, tcb->interval_time);
<             REL_TRACE_NOTS(3,"    events=0x%04X waits=0x%04X msg=0x%08X",
<                  tcb->events, tcb->waits, (uint32_t)tcb->msg);
<             REL_TRACE_NOTS(2,"    priv_stack(stack_size)=%4u tsk_stack(sp)=0x%08X",
<                  tcb->priv_stack, tcb->tsk_stack);
<             REL_TRACE_NOTS(3,"    stack(top)=0x%08X stack_frame=%u stk_msk:0x%04x",
<                 (uint32_t)tcb->stack, tcb->stack_frame, tcb->stack[0]);
< #ifdef __RTX_CPU_STATISTICS__
<             REL_TRACE_NOTS(2,"    swap_in_time=%u swap_out_time=%u",
<                 tcb->swap_in_time, tcb->swap_out_time);
<             REL_TRACE_NOCRLF_NOTS(0,"    after last switch ");
<             if (tcb->swap_in_time <= tcb->swap_out_time)
<                 REL_TRACE_NOTS(1,"task runtime %u ms", tcb->swap_out_time - tcb->swap_in_time);
<             else
<                 REL_TRACE_NOTS(1,"task still runing, now %d", HWTICKS_TO_MS(rtx_get_hwticks()));
< #endif
< #endif /*RTX_DUMP_VERBOSE*/
< 
<             frame = _rtx_get_irq_stack_frame(tcb);
<             if (frame) {
<                 uint32_t stack_end;
<                 uint32_t search_cnt, print_cnt;
< 
<                 REL_TRACE_NOTS(0," ");
<                 REL_TRACE_NOTS(4,"    R0 =0x%08X R1=0x%08X R2=0x%08X R3  =0x%08X", frame->r0, frame->r1, frame->r2, frame->r3);
<                 REL_TRACE_NOTS(4,"    R12=0x%08X LR=0x%08X PC=0x%08X XPSR=0x%08X", frame->r12, frame->lr, frame->pc, frame->xpsr);
< 
<                 stack_end = (uint32_t)tcb->stack + tcb->priv_stack;
<                 if (stack_end > tcb->tsk_stack) {
<                     search_cnt = (stack_end - tcb->tsk_stack) / 4;
<                     if (search_cnt > 512) {
<                         search_cnt = 512;
<                     }
<                     print_cnt = 10;
<                     hal_trace_print_backtrace(tcb->tsk_stack, search_cnt, print_cnt);
<                 }
<             }
<         } else {
<             REL_TRACE_NOTS(0,"--- Task BAD");
<         }
<     } else {
<         REL_TRACE_NOTS(0,"--- Task NONE");
<     }
< }
< 
< FLASH_TEXT_LOC
< void rtx_show_current_thread(void)
< {
<     REL_TRACE_NOTS(1,"Current Task    : %u", os_tsk.run ? os_tsk.run->task_id : 0);
<     REL_TRACE_NOTS(1,"New Running Task: %u", os_tsk.new_tsk ? os_tsk.new_tsk->task_id : 0);
<     REL_TRACE_IMM_NOTS(0," ");
< }
< 
< FLASH_TEXT_LOC
< void rtx_show_ready_threads(void)
< {
<     P_TCB tcb;
<     uint32_t i;
< 
<     REL_TRACE_NOTS(0,"Ready Tasks:");
<     if (os_rdy.p_lnk) {
<         tcb = os_rdy.p_lnk;
<         i = 0;
<         do {
<             REL_TRACE_NOCRLF_NOTS(1,"%u ", tcb->task_id);
<             tcb = tcb->p_lnk;
<             i++;
<         } while (tcb && i < os_maxtaskrun);
<         REL_TRACE_NOTS(0," ");
<         if (tcb) {
<             REL_TRACE_NOTS(2,"*** Error: List corrupted? count=%u next=0x%08X\n", i, (uint32_t)tcb);
<         }
<     } else {
<         REL_TRACE_NOTS(0,"<NONE>");
<     }
<     REL_TRACE_IMM_NOTS(0," ");
< }
< 
< FLASH_TEXT_LOC
< void rtx_show_delay_threads(void)
< {
<     P_TCB tcb;
<     uint32_t i;
< 
<     REL_TRACE_NOTS(0,"Delay Tasks:");
<     if (os_dly.p_dlnk) {
<         tcb = os_dly.p_dlnk;
<         i = 0;
<         do {
<             REL_TRACE_NOCRLF_NOTS(1,"%u ", tcb->task_id);
<             tcb = tcb->p_dlnk;
<             i++;
<         } while (tcb && i < os_maxtaskrun);
<         REL_TRACE_NOTS(0," ");
<         if (tcb) {
<             REL_TRACE_NOTS(2,"*** Error: List corrupted? count=%u next=0x%08X\n", i, (uint32_t)tcb);
<         }
<     } else {
<         REL_TRACE_NOTS(0,"<NONE>");
<     }
<     REL_TRACE_IMM_NOTS(0," ");
< }
< 
< FLASH_TEXT_LOC
< void rtx_show_all_threads(void)
< {
<     int i;
< #if (defined(DEBUG) || defined(REL_TRACE_ENABLE))
<     if (hal_trace_crash_dump_onprocess()){
<         for (i = 0; i < 10; i++){
<             REL_TRACE_IMM_NOTS(0,"                                                                        ");
<             REL_TRACE_IMM_NOTS(0,"                                                                        \n");
<             hal_sys_timer_delay(MS_TO_TICKS(200));
<         }
<     }
< #endif
< 
<     REL_TRACE_NOTS(0,"Task List:");
<     for (i = 0; i < os_maxtaskrun; i++) {
<         if (os_active_TCB[i]) {
<             rt_tsk_show(os_active_TCB[i]);
<             REL_TRACE_IMM_NOTS(0," ");
< #if (defined(DEBUG) || defined(REL_TRACE_ENABLE))
<             if (hal_trace_crash_dump_onprocess()){
<                 hal_sys_timer_delay(MS_TO_TICKS(500));
<             }
< #endif
<         }
<     }
<     rt_tsk_show(&os_idle_TCB);
<     REL_TRACE_IMM_NOTS(0," ");
< 
<     rtx_show_current_thread();
<     rtx_show_ready_threads();
<     rtx_show_delay_threads();
< }
< 
< #if __RTX_CPU_STATISTICS__
< 
< #if TASK_HUNG_CHECK_ENABLED
< FLASH_TEXT_LOC NOINLINE
< static void print_hung_task(const P_TCB tcb, U32 curr_time)
< {
<     REL_TRACE_IMM_NOTS(2,"Task \"%s\" blocked for %dms",
<             tcb->name==NULL ? (tcb->task_id == 1 ? "main" : "null") : (char *)tcb->name,
<             curr_time - tcb->swap_out_time);
<     ASSERT(0, "Find task hung");
< }
< 
< static void check_hung_task(const P_TCB tcb)
< {
<     uint32_t curr_hwticks, curr_time;
< 
<     if (!tcb->hung_check)
<         return;
< 
<     curr_hwticks = hal_sys_timer_get();
<     curr_time = HWTICKS_TO_MS(curr_hwticks);
<     if((curr_time - tcb->swap_out_time) > tcb->hung_check_timeout) {
<         print_hung_task(tcb, curr_time);
<     }
< }
< 
< void check_hung_tasks(void)
< {
<     int i;
< 
<     for (i = 0; i < os_maxtaskrun; i++) {
<         if (os_active_TCB[i]) {
<             P_TCB tcb = os_active_TCB[i];
<             check_hung_task(tcb);
<         }
<     }
< }
< #endif
< 
< static inline void print_task_sw_statitics(P_TCB tcb)
< {
<     /*
<     REL_TRACE_NOTS(3,"--- Task swap in:%d  out=%d runings %d",
<             tcb->swap_in_time,
<             tcb->swap_out_time,
<             tcb->rtime);
<      */
< }
< 
< FLASH_TEXT_LOC
< static void _rtx_show_thread_usage(P_TCB tcb, U32 sample_time)
< {
<     if (tcb) {
<         if (tcb->cb_type == TCB && ((tcb->task_id >= 1 && tcb->task_id <= os_maxtaskrun)) &&
<                 tcb->ptask && tcb->stack) {
<             REL_TRACE_NOTS(5,"--- Task id:%d task_name=%s cpu=%%%d",
<                     tcb->task_id,
<                     tcb->name==NULL ? (tcb->task_id == 1 ? "main" : "null") : (char *)tcb->name,
<                     sample_time != 0 ? ((tcb->rtime - task_rtime[tcb->task_id]) * 100 / sample_time) : 0);
<             print_task_sw_statitics(tcb);
<             task_rtime[tcb->task_id] = tcb->rtime;
<         } else if (tcb->task_id == 255 ) {
<             REL_TRACE_NOTS(5,"--- Task id:%d task_name=%s cpu=%%%d",
<                     tcb->task_id,
<                     "idle",
<                     sample_time != 0 ? (tcb->rtime - task_rtime[0]) * 100 / sample_time : 0);
<             print_task_sw_statitics(tcb);
<             task_rtime[0] = tcb->rtime;
<         } else {
<             REL_TRACE_NOTS(0,"--- Task BAD");
<         }
<     } else {
<         REL_TRACE_NOTS(0,"--- Task NONE");
<     }
< }
< 
< FLASH_TEXT_LOC
< void rtx_show_all_threads_usage(void)
< {
<     int i;
<     static BOOL first_time  = 1;
<     uint32_t sample_time;
<     static U32 start_sample_time  = 0;
< 
<     if (first_time) {
<         for (i = 0; i < os_maxtaskrun; i++) {
<             if (os_active_TCB[i]) {
<                 P_TCB tcb = os_active_TCB[i];
<                 task_rtime[tcb->task_id] = tcb->rtime;
<             }
<         }
<         task_rtime[0] =  os_idle_TCB.rtime;
<         start_sample_time  = rtx_get_hwticks();
<         first_time = 0;
<         return;
<     }
< 
<     sample_time = HWTICKS_TO_MS(rtx_get_hwticks() - start_sample_time);
<     REL_TRACE_IMM_NOTS(0," ");
<     REL_TRACE_NOTS(0,"Task List:");
<     for (i = 0; i < os_maxtaskrun; i++) {
<         if (os_active_TCB[i]) {
<             _rtx_show_thread_usage(os_active_TCB[i], sample_time);
<         }
<     }
<     _rtx_show_thread_usage(&os_idle_TCB, sample_time);
<     start_sample_time  = rtx_get_hwticks();
<     REL_TRACE_IMM_NOTS(0," ");
< }
< 
< #endif
< 
< /*
<  * health time period for idle thread scheduled
<  */
< #define TASK_IDLE_HEALTH_PERIOD  (60 * 1000)
< 
< FLASH_TEXT_LOC
< int rtx_task_idle_health_check(void)
< {
<     P_TCB tcb = &os_idle_TCB;
<     uint32_t now, period;
< 
<     now = HWTICKS_TO_MS(rtx_get_hwticks());
< 
<     if (now >= tcb->swap_in_time) {
<         period = now - tcb->swap_in_time;
<     } else {
<         uint64_t temp;
<         temp = now + HWTICKS_TO_MS((-1u));
<         period = temp - tcb->swap_in_time;
<     }
< 
<     if ( period > TASK_IDLE_HEALTH_PERIOD) {
<         REL_TRACE_NOTS(1,"--- Task idle hung %d seconds", period / 1000);
<         return -1;
<     }
<     return 0;
< }
