local: https://raw.githubusercontent.com/pine64/OpenPineBuds/29b195e12da6a5c791d1418af8448be80bccf18d/rtos/rtx/TARGET_CORTEX_M/rt_System.c
remote: https://raw.githubusercontent.com/ARM-software/mbed-beetle/45ddf10698e1be3ee922de70d4801b5bd776e0ca/libraries/rtos/rtx/TARGET_CORTEX_M/rt_System.c
diff -sw local remote
---

47,53d46
< #include "hal_sleep.h"
< #include "hal_timer.h"
< #include "hal_trace.h"
< 
< extern void sysTimerTick(void);
< extern uint32_t rt_timer_delay_count(void);
< 
67,68d59
< static          U32 systick_lock_tick;
< static          U32 systick_lock_ts;
83a75
> 
88d79
<   U32 start_tick;
90,91d80
<   __disable_irq();
<   start_tick = NVIC_ST_CURRENT;
93,110d81
<   systick_lock_tick = NVIC_ST_CURRENT;
<   systick_lock_ts = hal_sys_timer_get();
<   if (start_tick != 0 && (systick_lock_tick == 0 || start_tick < systick_lock_tick)) {
< #if defined(DEBUG_SLEEP) && (DEBUG_SLEEP >= 1)
<       TRACE(6,"[%u/0x%X][%2u/%u] rt_suspend corner case: %02u -> %02u",
<         TICKS_TO_MS(hal_sys_timer_get()), hal_sys_timer_get(), NVIC_ST_CURRENT, os_time,
<         start_tick, systick_lock_tick);
< #endif
<       pend_flags |= 1;
<   }
<   if (pend_flags) {
<     delta = 0;
<   }
<   __enable_irq();
< 
<   if (delta == 0) {
<     return 0;
<   }
115,122c86
< #ifdef __CMSIS_RTOS
<   {
<     uint32_t tcnt = rt_timer_delay_count();
<     if (tcnt && tcnt < delta) {
<       delta = tcnt;
<     }
<   }
< #else
---
> #ifndef __CMSIS_RTOS
130a95
> 
134c99
<   //P_TCB next;
---
>   P_TCB next;
136,158d100
<   U32   resume_ts;
<   U32   unlock_ts;
<   U32   systick_remain;
<   U32   sleep_ticks;
<   U8    tick_running = 0;
<   const U32 reload = (NVIC_ST_RELOAD + 1);
< 
<   __disable_irq();
<   resume_ts = hal_sys_timer_get();
<   __enable_irq();
< 
<   sleep_ticks = (resume_ts - systick_lock_ts) * (OS_CLOCK_NOMINAL / CONFIG_SYSTICK_HZ_NOMINAL);
<   if (systick_lock_tick == 0) {
<     sleep_time = sleep_ticks / reload;
<     systick_remain = reload - sleep_ticks % reload;
<   } else if (sleep_ticks >= systick_lock_tick) {
<     delta = sleep_ticks - systick_lock_tick;
<     sleep_time = delta / reload + 1;
<     systick_remain = reload - delta % reload;
<   } else {
<     sleep_time = 0;
<     systick_remain = systick_lock_tick - sleep_ticks;
<   }
160,166d101
<   if (sleep_time == 0) {
<     tick_running = 1;
<     goto _task_unlock;
<   }
< 
<   // Task switching is allowed in SVC/PENDSV/SYSTICK handlers only
< #if 0
169,171d103
< #endif
< 
< _inc_sleep_time:
175d106
<   if (sleep_time) {
189,193d119
<         while (delta) {
<           delta--;
<           os_time++;
<         }
<         rt_psh_req();
202,209c128
<     os_idle_TCB.rtime += sleep_time;
< #ifdef __CMSIS_RTOS
<     delta = sleep_time;
<     while (delta && rt_timer_delay_count()) {
<       sysTimerTick();
<       delta--;
<     }
< #else
---
> #ifndef __CMSIS_RTOS
226d144
<   } // sleep_time
228,229d145
<   // Task switching is allowed in SVC/PENDSV/SYSTICK handlers only
< #if 0
233,241d148
< #endif
< 
< #if defined(DEBUG_SLEEP) && (DEBUG_SLEEP >= 1)
<   if (sleep_time > 0) {
<     TRACE(7,"[%u/0x%X][%2u/%u] rt_resume: sleep_ticks=%u sleep_time=%u systick_remain=%u",
<       TICKS_TO_MS(hal_sys_timer_get()), hal_sys_timer_get(), NVIC_ST_CURRENT, os_time,
<       sleep_ticks, sleep_time, systick_remain);
<   }
< #endif
243,280d149
< _task_unlock:
< 
<   sleep_time = 0;
< 
<   __disable_irq();
<   // Handle corner case: systick counter wraps inside rt_resume()
<   unlock_ts = hal_sys_timer_get();
<   sleep_ticks = (unlock_ts - resume_ts) * 2;
<   // systick_remain value range: [1, reload]
<   if (sleep_ticks >= systick_remain) {
< #if defined(DEBUG_SLEEP) && (DEBUG_SLEEP >= 1)
<     TRACE(6,"[%u/0x%X][%2u/%u] rt_resume corner case: sleep_ticks=%u systick_remain=%u",
<       TICKS_TO_MS(hal_sys_timer_get()), hal_sys_timer_get(), NVIC_ST_CURRENT, os_time,
<       sleep_ticks, systick_remain);
<     // Update timestamp since traces also consume time
<     unlock_ts = hal_sys_timer_get();
<     sleep_ticks = (unlock_ts - resume_ts) * (OS_CLOCK_NOMINAL / CONFIG_SYSTICK_HZ_NOMINAL);
< #endif
<     delta = sleep_ticks - systick_remain;
<     sleep_time = delta / reload + 1;
<     systick_remain = reload - delta % reload;
<     resume_ts = unlock_ts;
<   } else {
<     if (tick_running == 0) {
<       systick_remain -= sleep_ticks;
<       // Adjust systick_remain value range to [0, reload - 1]
<       if (systick_remain == reload) {
<         systick_remain = 0;
<       }
<       if (systick_remain) {
<         NVIC_ST_RELOAD  = systick_remain;
<         NVIC_ST_CURRENT = 0;
<         while (NVIC_ST_CURRENT == 0);
<         NVIC_ST_RELOAD  = reload - 1;
<       } else {
<         NVIC_ST_CURRENT = 0;
<       }
<     }
283,288d151
<   __enable_irq();
< 
<   if (sleep_time) {
<     goto _inc_sleep_time;
<   }
< }
322,323d184
<   // Allow cpu sleep
<   hal_cpu_wake_unlock(HAL_CPU_WAKE_LOCK_USER_RTOS);
336,337d196
<     // Prohibit cpu sleep when an OS service request is enqueued during os lock (rt_suspend)
<     hal_cpu_wake_lock(HAL_CPU_WAKE_LOCK_USER_RTOS);
351,353d209
<   if (os_tsk.run == &os_idle_TCB) {
<     rt_put_rdy_last (os_tsk.run);
<   } else {
355d210
<   }
398a254,256
> 
> extern void sysTimerTick(void);
> 
402,405d259
< 
< #if __RTX_CPU_STATISTICS__
<   os_tsk.run->rtime += 1;
< #endif
