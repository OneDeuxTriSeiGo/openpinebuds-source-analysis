1,3c1,2
< /*******************************************************************************
<  *
<  * Copyright (C) 2013 - 2017 Sony Corporation
---
> /*
>  * Copyright (C) 2013 - 2016 Sony Corporation
5c4,15
<  ******************************************************************************/
---
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
>  *
>  *      http://www.apache.org/licenses/LICENSE-2.0
>  *
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
17d26
< #ifdef _ENCODE_ONLY
19,27d27
< #endif
< #ifdef _DECODE_ONLY
<  * LDAC decode processing.
< #endif
< #ifndef _ENCODE_ONLY
< #ifndef _DECODE_ONLY
<  * LDAC encode and decode processing.
< #endif
< #endif
29d28
< #ifndef _DECODE_ONLY
43,52d41
< #endif // _DECODE_ONLY
< #ifndef _ENCODE_ONLY
<  * The basic flow of the decode processing is as follows:
<  * - The program creates an handle of an LDAC api using ldacBT_get_handle().
<  * - The program initialize the handle for decode using ldacBT_init_handle_decode().
<  * - The program calls ldacBT_decode() to decode data.
<  * - The handle may be closed using ldacBT_close_handle() then used again, or released with
<  *   ldacBT_free_handle().
<  * - The rest of the set functions should be called only if it is needed by the client.
< #endif // _ENCODE_ONLY
59d47
< #ifdef _ENCODE_ONLY
64,79d51
< #endif // _ENCODE_ONLY
< #ifdef _DECODE_ONLY
<  *      - Release of internal variables in decode processing using ldacBT_close_handle().
<  *      - Allocation and initialization of internal variables in decode processing using
<  *        ldacBT_init_handle_decode().
<  *     Note that the first decoded out PCM signal will not be present just after error recovery.
< #endif // _DECODE_ONLY
< #ifndef _ENCODE_ONLY
< #ifndef _DECODE_ONLY
<  *      - Release of internal variables in encode/decode processing using ldacBT_close_handle().
<  *      - Allocation and initialization of internal variables in encode/decode processing using
<  *        ldacBT_init_handle_encode() for encode, ldacBT_init_handle_decode() for decode.
<  *     Note that the encoded output for a few frames will not be present just after error recovery.
<  *     Note that the first decoded out PCM signal will not be present just after error recovery.
< #endif
< #endif
81d52
< #ifndef _DECODE_ONLY
88,96d58
< #endif 
< #ifndef _ENCODE_ONLY
<  * Resuming of the decode processing from an interruption
<  *     In case of resuming of the decode processing from interruption (such as changing
<  *     configuration, seeking and playback), initialization of internal variables in decode
<  *     processing must be carried out as error processing described above.
<  *     Note that the first decoded out PCM signal will not be present just after initialization
<  *     as above.
< #endif 
158d119
< #ifndef _DECODE_ONLY
185d145
< #endif 
242d201
< #ifdef _ENCODE_ONLY
245,255d203
< #endif
< #ifdef _DECODE_ONLY
<  * The LDAC handle must be initialized by API function ldacBT_init_handle_decode() prior to
<  * calling this function.
< #endif
< #ifndef _ENCODE_ONLY
< #ifndef _DECODE_ONLY
<  * The LDAC handle must be initialized by API function ldacBT_init_handle_encode() or
<  * ldacBT_init_handle_decode() prior to calling this function.
< #endif
< #endif
266d213
< #ifdef _ENCODE_ONLY
269,279d215
< #endif
< #ifdef _DECODE_ONLY
<  * The LDAC handle must be initialized by API function ldacBT_init_handle_decode() prior to
<  * calling this function.
< #endif
< #ifndef _ENCODE_ONLY
< #ifndef _DECODE_ONLY
<  * The LDAC handle must be initialized by API function ldacBT_init_handle_encode() or
<  * ldacBT_init_handle_decode() prior to calling this function.
< #endif
< #endif
289d224
< #ifndef _DECODE_ONLY
414,476d348
< #endif /* _DECODE_ONLY */
< #ifndef _ENCODE_ONLY
< /* for decode */
< /* Initialization of a LDAC handle for decode processing.
<  * The LDAC handle must be allocated by API function ldac_get_handle() prior to calling this
<  * function.
<  * "cm" is configured to channel_mode in LDAC, which is determined by SRC and SNK devices in
<  * Bluetooth transmission.
<  * "sf" is configured to sampling frequency, which is determined by SRC and SNK devices in
<  * Bluetooth transmission.
<  * Reserved arguments must be set to "0".
<  *  Format
<  *      int  ldacBT_init_handle_decode( HANDLE_LDAC_BT hLdacBt, int cm, int sf, int nshift,
<  *                                      int var0, int var1 );
<  *  Arguments
<  *      hLdacBt    HANDLE_LDAC_BT    LDAC handle.
<  *      cm         int               Information of the channel_mode.
<  *      sf         int               Sampling frequency of input LDAC bit stream.
<  *      nshift     int               Reserved, must be "0".
<  *      var0       int               Reserved, must be "0".
<  *      var1       int               Reserved, must be "0".
<  *  Return value
<  *      int : 0 for success, -1 for failure.
<  */
< LDACBT_API int ldacBT_init_handle_decode( HANDLE_LDAC_BT hLdacBt, int cm, int sf,
<                                           int var0, int var1, int var2 );
< 
< /* LDAC decode processing.
<  * The LDAC handle must be initialized by API function ldacBT_init_handle_decode() prior to
<  * calling this function.
<  * < Regarding on input "ldac_transport_frame" >
<  *   The valid data size of "ldac_transport_frame" must be set in "stream_bytes".
<  *   Referenced data size of "ldac_transport_frame" for decode processing will be set in
<  *   "used_bytes" on return.
<  *   As a reading once of "ldac_transport_frame" is performed by internal processing with
<  *   looking ahead of two bytes, "LDAC_MAX_NBYTES+2" bytes must be allocated for
<  *   "ldac_transport_frame" (p_bs) in API function caller side.
<  * < Regarding on output PCM signal >
<  *   "fmt" is configured to output pcm audio format.
<  *   The size of output PCM signal will be set to "wrote_bytes". The value of
<  *   "frame sample" * "Number of channels" * "bit length of pcm sample"/8 will be set in normal.
<  *   The first decoded out PCM signal just after initialization will not be present.
<  *
<  *  Format
<  *      int  ldac_decode ( HANDLE_LDAC_BT hLdacBt, unsigned char * p_bs, unsigned char * p_pcm
<  *                         LDACBT_SMPL_FMT_T fmt, int bs_bytes,
<  *                         int *used_bytes, int *wrote_bytes );
<  *  Arguments
<  *      hLdacBt    HANDLE_LDAC_BT    LDAC handle.
<  *      p_bs       unsigned char *   Pointer to "ldac_transport_frame".
<  *      p_pcm      unsigned char *   Decoded out PCM signal sequence.
<  *      fmt        LDACBT_SMPL_FMT_T Audio format type of output pcm.
<  *      bs_bytes    int *            Data size of input "ldac_transport_frame". Unit: Byte.
<  *      used_bytes  int *            Data size of referenced "ldac_transport_frame". Unit: Byte.
<  *      wrote_bytes int *            Size of decoded out PCM signal. Unit: Byte.
<  *  Return value
<  *      int : 0 for success, -1 for failure.
<  */
< LDACBT_API int ldacBT_decode( HANDLE_LDAC_BT hLdacBt, unsigned char *p_bs, unsigned char *p_pcm,
<                               LDACBT_SMPL_FMT_T fmt, int bs_bytes,
<                               int *used_bytes, int *wrote_bytes );
< 
< #endif /* _ENCODE_ONLY */
517d388
< #define LDACBT_ERR_RESTRICTED_BY_NUM_FRAMES 255
