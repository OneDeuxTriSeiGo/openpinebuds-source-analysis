local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/audioflinger/audioflinger.h
remote: https://raw.githubusercontent.com/alibaba/AliOS-Things/a99f20706f9c666903a12a205edce13263b1fadb/hardware/chip/haas1000/drivers/services/audioflinger/audioflinger.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
29c28
< typedef void (*AF_CODEC_PLAYBACK_POST_HANDLER_T)(uint8_t *buf, uint32_t len, void *config);
---
> typedef void (*AF_CODEC_PLAYBACK_POST_HANDLER_T)(uint8_t *buf, uint32_t len, void *cfg);
55c54
<     bool sync_start;
---
>     bool i2s_master_clk_wait;
107d105
< void af_codec_set_playback_post_handler(AF_CODEC_PLAYBACK_POST_HANDLER_T hdlr);
116,122d113
< enum AF_I2S_SYNC_TYPE_T {
<     AF_I2S_SYNC_TYPE_NONE,
<     AF_I2S_SYNC_TYPE_BT,
<     AF_I2S_SYNC_TYPE_GPIO,
< };
< 
< 
126d116
< void af_i2s_sync_config(enum AUD_STREAM_T stream, enum AF_I2S_SYNC_TYPE_T type, bool enable);
138d127
< void af_vad_get_data_info(struct CODEC_VAD_BUF_INFO_T * vad_buf_info);
146,147c135,147
< #ifdef __RAND_FROM_MIC__
< uint8_t random_mic_is_on(uint8_t *deviceId);
---
> #ifdef AUDIO_OUTPUT_SW_GAIN
> #ifndef AUDIO_OUTPUT_SW_LIMITER
> typedef struct {
>     float coefs_b[3];
>     float coefs_a[3];
>     float history_x[2];
>     float history_y[2];
> }SW_GAIN_IIR_T;
> 
> void af_codec_get_current_sw_gain_filter(SW_GAIN_IIR_T *filter);
> void af_code_sw_gain_sample_24bit(int32_t * sample);
> void af_code_sw_gain_sample_16bit(int16_t * sample);
> #endif
148a149
> 
