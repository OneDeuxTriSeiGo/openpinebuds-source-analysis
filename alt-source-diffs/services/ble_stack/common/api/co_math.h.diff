local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/ble_stack/common/api/co_math.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/ble_stack_v2/modules/common/api/co_math.h
diff -sw local remote
---

0a1,14
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
>  *
>  *     http://www.apache.org/licenses/LICENSE-2.0
>  *
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
21a36
> #include "arch.h"          // for ASSERT_ERR
43a59,81
>  * @brief Return value bit into a bit field.
>  *
>  * @param[in] bf  Bit Field
>  * @param[in] pos Position of the bit
>  *
>  * @return value of a bit into a bit field
>  ****************************************************************************************
>  */
> #define CO_BIT_GET(bf, pos) (((((uint8_t*)bf)[((pos) >> 3)])>>((pos) & 0x7)) & 0x1)
> 
> /**
>  ****************************************************************************************
>  * @brief Update value bit into a bit field.
>  *
>  * @param[in] bf  Bit Field
>  * @param[in] pos Position of the bit
>  * @param[in] val New value of the bit (0 or 1)
>  ****************************************************************************************
>  */
> #define CO_BIT_SET(bf, pos, val) (((uint8_t*)bf)[((pos) >> 3)]) = ((((uint8_t*)bf)[((pos) >> 3)]) & ~CO_BIT(((pos) & 0x7))) \
>                                                                 | (((val) & 0x1) << ((pos) & 0x7))
> /**
>  ****************************************************************************************
79a118,156
> /**
>  ****************************************************************************************
>  * Perform a division and ceil up the result
>  *
>  * @param[in] val Value to divide
>  * @param[in] div Divide value
>  * @return ceil(val/div)
>  ****************************************************************************************
>  */
> #define CO_DIVIDE_CEIL(val, div) (((val) + ((div) - 1))/ (div))
> 
> /**
>  ****************************************************************************************
>  * Perform a division and round the result
>  *
>  * @param[in] val Value to divide
>  * @param[in] div Divide value
>  * @return round(val/div)
>  ****************************************************************************************
>  */
> #define CO_DIVIDE_ROUND(val, div) (((val) + ((div) >> 1))/ (div))
> 
> /**
>  ****************************************************************************************
>  * Perform a modulo operation
>  *
>  * @param[in] val    Dividend
>  * @param[in] div    Divisor
>  * @return  val/div)
>  ****************************************************************************************
>  */
> //#define CO_MOD(val, div) ((val) % (div))
> static __INLINE uint32_t co_mod(uint32_t val, uint32_t div)
> {
>    ASSERT_ERR(div);
>    return ((val) % (div));
> }
> #define CO_MOD(val, div) co_mod(val, div)
> 
92c169
< __STATIC __INLINE uint32_t co_clz(uint32_t val)
---
> __INLINE uint32_t co_clz(uint32_t val)
114a192,218
>  * @brief Count trailing zeros.
>  * @param[in] val Value to count the number of trailing zeros on.
>  * @return Number of trailing zeros when value is written as 32 bits.
>  ****************************************************************************************
>  */
> __INLINE uint32_t co_ctz(uint32_t val)
> {
>     #if defined(__arm__)
>     return __builtin_ctz(val);
>     #elif defined(__GNUC__)
>     if (val == 0)
>     {
>         return 32;
>     }
>     return __builtin_ctz(val);
>     #else
>     uint32_t i;
>     for (i = 0; i < 32; i++)
>     {
>         if (val & CO_BIT(i))
>             break;
>     }
>     return i;
>     #endif // defined(__arm__)
> }
> /**
>  ****************************************************************************************
119c223
< __STATIC __INLINE void co_random_init(uint32_t seed)
---
> __INLINE void co_random_init(uint32_t seed)
130c234
< __STATIC __INLINE uint8_t co_rand_byte(void)
---
> __INLINE uint8_t co_rand_byte(void)
141c245
< __STATIC __INLINE uint16_t co_rand_hword(void)
---
> __INLINE uint16_t co_rand_hword(void)
152c256
< __STATIC __INLINE uint32_t co_rand_word(void)
---
> __INLINE uint32_t co_rand_word(void)
163c267,278
< __STATIC __INLINE uint32_t co_min(uint32_t a, uint32_t b)
---
> __INLINE uint32_t co_min(uint32_t a, uint32_t b)
> {
>     return a < b ? a : b;
> }
> 
> /**
>  ****************************************************************************************
>  * @brief Function to return the smallest of 2 signed 32 bits words.
>  * @return The smallest value.
>  ****************************************************************************************
>  */
> __INLINE int32_t co_min_s(int32_t a, int32_t b)
174c289
< __STATIC __INLINE uint32_t co_max(uint32_t a, uint32_t b)
---
> __INLINE uint32_t co_max(uint32_t a, uint32_t b)
185c300
< __STATIC __INLINE int co_abs(int val)
---
> __INLINE int co_abs(int val)
187c302
<     return val < 0 ? val*(-1) : val;
---
>     return (val < 0) ? (0 - val) : val;
