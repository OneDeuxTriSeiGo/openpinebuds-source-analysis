local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/bt_app/btapp.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/bt_app/btapp.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
18a18
> #include "cmsis_os.h"
23c23
< #ifdef BTIF_HID_DEVICE
---
> #ifdef BT_HID_DEVICE
26c26
< #if defined(__BTMAP_ENABLE__)
---
> #if defined(BT_MAP_SUPPORT)
28a29,31
> #if defined(BT_PBAP_SUPPORT)
> #include "app_pbap.h"
> #endif
78c81
< #define A2D_SBC_IE_SAMP_FREQ_96     0x08    /* b4:96  kHz */
---
> #define A2D_SBC_IE_SAMP_FREQ_96     0x08    /* b4:48  kHz */
83c86,92
< #define A2D_SBC_IE_SAMP_FREQ_96     0x08    /* b4:96  kHz */
---
> #define A2D_SBC_IE_SAMP_FREQ_96     0x08    /* b4:48  kHz */
> #endif
> #endif
> 
> #ifdef A2DP_LC3_ON
> #ifndef A2D_SBC_IE_SAMP_FREQ_96
> #define A2D_SBC_IE_SAMP_FREQ_96     0x08    /* b4:48  kHz */
159d167
< #ifdef __BT_ONE_BRING_TWO__
166c174
< #endif
---
> #define HFP_KEY_DUAL_HF_CHANGETOPHONE_ANSWER_CURR 25
191a200
>     HFCALL_MACHINE_CURRENT_INCOMMING_ANOTHER_CALLING,               //17
199a209
>     HFCALL_NEXT_STA_CURR_ANSWER,                              //3
203,206d212
< #if defined (__HSP_ENABLE__)
< void hsp_callback(HsChannel *Chan, HsCallbackParms *Info);
< #endif
< 
210d215
< #define AVRCP_PDU_PARAM_MAX_LEN	40
211a217,263
> typedef enum bt_profile_reconnect_mode
> {
>     bt_profile_reconnect_null,
>     bt_profile_reconnect_openreconnecting,
>     bt_profile_reconnect_reconnecting,
>     bt_profile_reconnect_reconnect_pending,
> } bt_profile_reconnect_mode;
> 
> typedef enum bt_profile_connect_status
> {
>     bt_profile_connect_status_unknow,
>     bt_profile_connect_status_success,
>     bt_profile_connect_status_failure,
> } bt_profile_connect_status;
> 
> typedef enum
> {
>     APP_BT_IDLE_STATE = 0,
>     APP_BT_IN_CONNECTING_PROFILES_STATE // acl link is created and in the process of connecting profiles
> } APP_BT_CONNECTING_STATE_E;
> 
> struct app_bt_profile_manager
> {
>     bool profile_connected;
>     bool remote_support_hfp;
>     bool remote_support_a2dp;
>     bt_bdaddr_t rmt_addr;
>     bt_profile_connect_status hfp_connect;
>     bt_profile_connect_status a2dp_connect;
>     bt_profile_reconnect_mode reconnect_mode;
>     a2dp_stream_t *stream;
>     btif_hf_channel_t* chan;
>     uint16_t reconnect_cnt;
>     osTimerId reconnect_timer;
>     void (*connect_timer_cb)(void const *);
>     APP_BT_CONNECTING_STATE_E connectingState;
> };
> 
> #ifndef BT_DEVICE_NUM
> #if defined(IBRT_V2_MULTIPOINT)
> #define BT_DEVICE_NUM 2
> #elif defined(__BT_ONE_BRING_TWO__)
> #define BT_DEVICE_NUM 2
> #else
> #define BT_DEVICE_NUM 1
> #endif
> #endif
215,218c267,272
< #ifdef __BT_ONE_BRING_TWO__
<     BT_DEVICE_ID_2,
< #endif
<     BT_DEVICE_NUM
---
>     BT_DEVICE_ID_2 = 1,
>     BT_DEVICE_ID_3 = 2,
>     BT_DEVICE_TWS_ID = 0x0f,
>     BT_DEVICE_AUTO_CHOICE_ID = 0xee,
>     BT_DEVICE_INVALID_ID = 0xff,
>     BT_DEVICE_SEND_AVRCP_PLAY = 0x0e,
221,230c275,279
< #if defined(APP_LINEIN_A2DP_SOURCE)||defined(APP_I2S_A2DP_SOURCE)
< enum BT_DEVICE_SRC_SNK_T{
< 	BT_DEVICE_SNK=0,
< 	BT_DEVICE_SRC
< };
< #if defined(APP_LINEIN_A2DP_SOURCE)||defined(APP_I2S_A2DP_SOURCE)
< #define APP_BD_ADDR_SIZE    6
< typedef struct APP_BT_BD_ADDR {
<     U8    addr[APP_BD_ADDR_SIZE];
< } APP_BT_BD_ADDR;
---
> #ifdef BT_SOURCE
> #if defined(BT_MULTI_SOURCE)
> #define BT_SOURCE_DEVICE_NUM 2
> #else
> #define BT_SOURCE_DEVICE_NUM 1
234,238c283,285
< struct BT_DEVICE_T{
<     btif_a2dp_stream_t*  a2dp_stream[BT_DEVICE_NUM];
<     uint8_t avdtp_cp[BT_DEVICE_NUM];
<     btif_a2dp_stream_t* a2dp_lhdc_stream[BT_DEVICE_NUM];
<     uint8_t a2dp_lhdc_llc[BT_DEVICE_NUM];
---
> #ifndef BT_SOURCE_DEVICE_NUM
> #define BT_SOURCE_DEVICE_NUM 0
> #endif
240,241c287
<     btif_a2dp_stream_t* a2dp_ldac_stream[BT_DEVICE_NUM];
<     int channel_mode;
---
> #define BT_SOURCE_DEVICE_ID_BASE 0x10
243c289,290
<      btif_a2dp_stream_t* a2dp_aac_stream[BT_DEVICE_NUM];
---
> bool app_bt_source_is_enabled(void);
> bool app_bt_sink_is_enabled(void);
245c292
<      btif_a2dp_stream_t* a2dp_scalable_stream[BT_DEVICE_NUM];
---
> #define BT_AVDTP_CP_VALUE_SIZE 10
247,251c294,410
< #if defined(APP_LINEIN_A2DP_SOURCE)||defined(APP_I2S_A2DP_SOURCE)
< 	uint8_t src_or_snk;//src or snk fkag
< 	uint8_t input_onoff;
< 	APP_BT_BD_ADDR         inquried_snk_bdAddr;           /* Device Address */
< 	//BT_BD_ADDR         rmt_bdAddr;           /* Device Address */
---
> struct BT_DEVICE_T {
>     bt_bdaddr_t remote;
>     bool acl_is_connected;
>     uint16_t acl_conn_hdl;
>     uint8_t device_id;
>     bool profiles_connected_before;
>     btif_remote_device_t *btm_conn;
>     struct app_bt_profile_manager profile_mgr;
> 
>     btif_a2dp_stream_t *btif_a2dp_stream;
>     a2dp_stream_t *a2dp_connected_stream;
> 
>     uint8_t a2dp_lhdc_llc;
>     uint8_t channel_mode;
>     uint8_t sample_rate;
>     uint8_t sample_bit;
>     uint8_t vbr_support;
>     uint8_t a2dp_channel_num;
>     uint8_t a2dp_conn_flag;
>     uint8_t a2dp_streamming;
>     uint8_t a2dp_session;
>     uint8_t a2dp_play_pause_flag;
>     uint8_t a2dp_need_resume_flag;
>     uint8_t a2dp_disc_on_process;
>     btif_avdtp_codec_type_t codec_type;
>     unsigned int a2dp_paused_time;
>     unsigned int sco_disconnect_time;
>     bool this_is_delay_reconnect_a2dp;
>     bool this_is_paused_bg_a2dp;
>     bool this_is_closed_bg_a2dp;
>     bool this_is_curr_playing_a2dp_and_paused;
>     bool a2dp_is_auto_paused_by_phone;
>     bool auto_make_remote_play;
>     bool this_sco_wait_to_play;
>     uint8_t remember_interrupted_a2dp_for_a_while;
>     bool ibrt_slave_force_disc_a2dp;
>     bool mock_a2dp_after_force_disc;
>     bool ibrt_disc_a2dp_profile_only;
>     uint8_t a2dp_initial_volume;
>     uint8_t a2dp_default_abs_volume;
>     uint8_t a2dp_current_abs_volume;
> 
> #ifdef __A2DP_AVDTP_CP__
>     bool avdtp_cp;
>     btif_avdtp_content_prot_t a2dp_avdtp_cp;
>     uint8_t a2dp_avdtp_cp_security_data[BT_AVDTP_CP_VALUE_SIZE];
> #endif
> 
>     btif_avrcp_channel_t *avrcp_channel;
>     avrcp_media_status_t avrcp_palyback_status;
>     bool avrcp_remote_support_playback_status_change_event;
>     uint8_t avrcp_conn_flag;
>     uint8_t volume_report;
>     uint8_t track_changed;
>     uint8_t avrcp_connect_try_times;
>     uint8_t a2dp_stream_recheck_context;
>     bool avrcp_play_status_wait_to_handle;
>     bool filter_avrcp_pause_play_quick_switching;
>     bool a2dp_disc_timer_enable;
>     osTimerId avrcp_pause_play_quick_switch_filter_timer;
>     osTimerId avrcp_play_status_wait_timer;
>     osTimerId a2dp_stream_recheck_timer;
>     osTimerId a2dp_delay_reconnect_timer;
>     osTimerId a2dp_delay_disconnect_timer;
>     osTimerId a2dp_delay_disconnect_timer1;
> 
> #ifndef IBRT
>     osTimerId avrcp_reconnect_timer;
> #endif
> 
>     bool ibrt_slave_force_disc_avrcp;
>     bool mock_avrcp_after_force_disc;
>     bool ibrt_slave_force_disc_hfp;
>     bool mock_hfp_after_force_disc;
> 
>     uint32_t acl_conn_prio;
>     uint32_t a2dp_audio_prio;
>     uint32_t a2dp_conn_prio;
>     uint32_t pause_a2dp_resume_prio;
>     uint32_t close_a2dp_resume_prio;
>     uint32_t sco_audio_prio;
>     uint32_t hfp_conn_prio;
>     uint32_t hfp_call_setup_prio;
>     uint32_t hfp_call_active_prio;
> 
>     btif_hf_channel_t* hf_channel;
>     btif_hf_call_setup_t hfchan_callSetup;
>     btif_hf_call_active_t hfchan_call;
>     btif_audio_state_t hf_audio_state;
>     btif_hf_call_held_state hf_callheld;
>     uint8_t hf_conn_flag;
>     uint8_t switch_sco_to_earbud;
>     uint8_t battery_level;
> 
>     uint16_t media_active;
>     uint16_t app_audio_manage_scocodecid;
> 
> #ifdef BT_HID_DEVICE
>     hid_channel_t hid_channel;
>     osTimerId capture_wait_timer_id;
>     osTimerId hid_wait_disc_timer_id;
>     uint8_t hid_conn_flag;
>     uint8_t wait_send_capture_key;
> #endif
> 
> #if defined (BT_MAP_SUPPORT)
>     btif_map_session_handle_t map_session_handle;
> #endif
> 
> #if defined(BT_PBAP_SUPPORT)
>     struct btif_pbap_channel_t *pbap_channel;
> #endif
> #if defined(HIECHO_ENABLE)
>     bool support_hiecho;
>     bool force_route_audio_to_speaker;
> 
>     osTimerId streaming_recheck_timer;
252a412
> };
254,258c414,422
<     a2dp_stream_t * a2dp_connected_stream[BT_DEVICE_NUM];
<     a2dp_stream_t * a2dp_outconfiged_stream[BT_DEVICE_NUM];
<     btif_remote_device_t * a2dp_outconfiged_rem[BT_DEVICE_NUM];
<     enum BT_DEVICE_ID_T curr_a2dp_stream_id;
<     uint16_t current_a2dp_conhdl;
---
> struct BT_DEVICE_RECONNECT_T {
>     list_entry_t node;
>     bt_bdaddr_t rmt_addr;
>     uint8_t inuse;
>     bool for_source_device;
>     bt_profile_reconnect_mode reconnect_mode;
>     uint16_t acl_reconnect_cnt;
>     osTimerId acl_reconnect_timer;
> };
259a424,444
> struct app_bt_config {
>     uint8_t a2dp_default_abs_volume;
>     uint8_t a2dp_force_use_the_codec;
>     bool a2dp_force_use_prev_codec;
>     bool hid_capture_non_invade_mode;
>     bool a2dp_prompt_play_mode; //new a2dp disruppt old a2dp automatically
>     bool sco_prompt_play_mode; //new sco disruppt old sco automatically
>     bool keep_only_one_sco_link; //only one sco link support in controller
>     bool pause_bg_a2dp_stream;
>     bool close_bg_a2dp_stream;
>     bool dont_auto_play_bg_a2dp;
>     bool block_2nd_sco_before_call_active;
>     bool a2dp_prompt_play_only_when_avrcp_play_received;
>     uint32_t a2dp_prompt_delay_ms;
>     bool a2dp_delay_prompt_play;
>     bool mute_new_a2dp_stream;
>     bool pause_new_a2dp_stream;
>     bool close_new_a2dp_stream;
>     bool keep_only_one_stream_close_connected_a2dp;
>     bool pause_old_a2dp_when_new_sco_connected;
> };
261,277c446,452
<     uint8_t a2dp_state[BT_DEVICE_NUM];
<     uint8_t a2dp_streamming[BT_DEVICE_NUM];
<     uint8_t a2dp_play_pause_flag;
<     uint8_t	avrcpPendingKey;
< 	uint8_t latestPausedDevId;
<     uint8_t	avrcpPressedKey;
<     uint8_t	avrcpVolumeSync;
<     btif_avdtp_codec_type_t codec_type[BT_DEVICE_NUM];
< 
<     uint8_t sample_rate[BT_DEVICE_NUM];
<     uint8_t sample_bit[BT_DEVICE_NUM];
<     uint8_t avrcp_state[BT_DEVICE_NUM];
<     btif_avrcp_channel_t*  avrcp_channel[BT_DEVICE_NUM];
< 
<     hf_chan_handle_t hf_channel[BT_DEVICE_NUM];
< #if defined (__HSP_ENABLE__)
<     HsChannel hs_channel[BT_DEVICE_NUM];
---
> #ifdef IBRT
> struct app_bt_tws_conn_info {
>     bt_bdaddr_t remote;
>     bool acl_is_connected;
>     uint16_t acl_conn_hdl;
>     btif_remote_device_t *btm_conn;
> };
279,280c454,458
< #if defined (__BTMAP_ENABLE__)
<     btif_map_session_handle_t map_session_handle[BT_DEVICE_NUM];
---
> 
> struct BT_DEVICE_MANAGER_T {
>     struct BT_DEVICE_T bt_devices[BT_DEVICE_NUM];
> #if defined(BT_SOURCE)
>     struct BT_DEVICE_T source_base_devices[BT_SOURCE_DEVICE_NUM];
283,323c461,473
<     btif_hf_call_setup_t hfchan_callSetup[BT_DEVICE_NUM];
<     btif_hf_call_active_t hfchan_call[BT_DEVICE_NUM];
<     btif_audio_state_t hf_audio_state[BT_DEVICE_NUM];
<     btif_hf_call_held_state hf_callheld[BT_DEVICE_NUM];
<     uint32_t hf_callsetup_time[BT_DEVICE_NUM];
< #if defined (__HSP_ENABLE__)
<     enum BT_DEVICE_ID_T curr_hs_channel_id;
<     HsCallActiveState hschan_call[BT_DEVICE_NUM];
<     HsAudioConnectState hs_audio_state[BT_DEVICE_NUM];
< #endif
< #ifdef BTIF_AVRCP_ADVANCED_CONTROLLER
<     uint32_t avrcp_advancedPdu_size;
<     void *avrcp_cmd1[BT_DEVICE_NUM];
<     void *avrcp_cmd2[BT_DEVICE_NUM];
<     void *avrcp_get_capabilities_rsp[BT_DEVICE_NUM];
<     void *avrcp_control_rsp[BT_DEVICE_NUM];
<     void *avrcp_notify_rsp[BT_DEVICE_NUM];
<     uint8_t volume_report[BT_DEVICE_NUM];
<     void *avrcp_volume_cmd[BT_DEVICE_NUM];
< 
<     void *avrcp_custom_cmd[BT_DEVICE_NUM];
< #ifdef AVRCP_TRACK_CHANGED
<     uint8_t track_changed[BT_DEVICE_NUM];
< #endif
< #endif
<     uint8_t hf_conn_flag[BT_DEVICE_NUM];
<     uint8_t hf_voice_en[BT_DEVICE_NUM];
<     uint8_t hf_endcall_dis[BT_DEVICE_NUM];
<     uint8_t hf_mute_flag;
<     uint8_t phone_earphone_mark;
< #if defined (__HSP_ENABLE__)
<     uint8_t hs_conn_flag[BT_DEVICE_NUM];
<     uint8_t hs_voice_en[BT_DEVICE_NUM];
<     uint8_t hs_mute_flag;
< #endif
< #ifdef BTIF_HID_DEVICE
<     hid_channel_t  hid_channel[BT_DEVICE_NUM];
< #endif
< 
<     uint8_t callSetupBitRec;
< };
---
>     enum BT_DEVICE_ID_T curr_a2dp_stream_id;
>     uint8_t curr_playing_sco_id;
>     uint8_t curr_playing_a2dp_id;
>     uint8_t interrupted_a2dp_id;
>     uint8_t a2dp_last_paused_device;
>     bool sco_trigger_a2dp_replay;
>     bool a2dp_stream_play_recheck;
> 
>     bool trigger_a2dp_switch;
>     uint8_t a2dp_switch_trigger_device;
>     uint32_t a2dp_switch_trigger_btclk;
>     osTimerId wait_sco_connected_timer;
>     uint8_t wait_sco_connected_device_id;
324a475,488
>     uint32_t audio_prio_seed;
>     uint16_t current_a2dp_conhdl;
>     uint8_t prev_active_audio_link;
>     uint8_t device_routed_sco_to_phone;
>     uint8_t device_routing_sco_back;
>     uint8_t hf_tx_mute_flag;
> 
>     uint8_t hf_call_next_state;
>     uint8_t hfp_key_handle_curr_id;
>     uint8_t hfp_key_handle_another_id;
> 
>     list_entry_t linkloss_reconnect_list;
>     list_entry_t poweron_reconnect_list;
>     struct BT_DEVICE_RECONNECT_T reconnect_node[BT_DEVICE_NUM+BT_SOURCE_DEVICE_NUM];
325a490
>     struct app_bt_config config;
327,330c492,493
< struct BT_DEVICE_ID_DIFF{
<     enum BT_DEVICE_ID_T id;
< #ifdef __BT_ONE_BRING_TWO__
<     enum BT_DEVICE_ID_T id_other;
---
> #ifdef IBRT
>     struct app_bt_tws_conn_info tws_conn;    
333a497,501
> void app_bt_manager_init(void);
> 
> struct BT_DEVICE_T* app_bt_get_device(int i);
> extern struct BT_DEVICE_MANAGER_T app_bt_manager;
> 
359c527
< void a2dp_callback(a2dp_stream_t *Stream, const a2dp_callback_parms_t *Info);
---
> void a2dp_callback(uint8_t device_id, a2dp_stream_t *Stream, const a2dp_callback_parms_t *Info);
361d528
< //void avrcp_callback(AvrcpChannel *chnl, const AvrcpCallbackParms *Parms);
363,366c530,535
< void avrcp_callback_CT(btif_avrcp_chnl_handle_t  chnl, const avrcp_callback_parms_t *Parms);
< void avrcp_callback_TG(btif_avrcp_chnl_handle_t chnl, const avrcp_callback_parms_t *Parms);
< int a2dp_volume_get(enum BT_DEVICE_ID_T id);
< int a2dp_volume_get_tws(void);
---
> void a2dp_volume_set(enum BT_DEVICE_ID_T id, uint8_t bt_volume);
> void a2dp_volume_set_local_vol(enum BT_DEVICE_ID_T id, uint8_t local_volume);
> uint8_t a2dp_volume_get(enum BT_DEVICE_ID_T id);
> void a2dp_volume_local_set(enum BT_DEVICE_ID_T id, uint8_t vol);
> void a2dp_update_local_volume(enum BT_DEVICE_ID_T id, uint8_t localVol);
> 
368,371c537,538
< #if defined(APP_LINEIN_A2DP_SOURCE)||defined(APP_I2S_A2DP_SOURCE) || defined(__APP_A2DP_SOURCE__)
< #ifdef __TWS__
< //void avrcp_set_slave_volume(uint8_t transid,int8_t volume);
< #endif
---
> void a2dp_volume_local_set(enum BT_DEVICE_ID_T id, uint8_t vol);
> uint8_t a2dp_volume_local_get(enum BT_DEVICE_ID_T id);
372a540,541
> void a2dp_abs_volume_set(enum BT_DEVICE_ID_T id, uint8_t vol);
> uint8_t a2dp_abs_volume_get(enum BT_DEVICE_ID_T id);
374,375c543,544
< //#define AVRCP_TRACK_CHANGED
< void a2dp_set_config_codec(btif_avdtp_codec_t *config_codec,const btif_a2dp_callback_parms_t *Info);
---
> uint8_t a2dp_convert_local_vol_to_bt_vol(uint8_t localVol);
> uint8_t a2dp_convert_bt_vol_to_local_vol(uint8_t btVol);
377,385c546,553
< void a2dp_callback_source(a2dp_stream_t *Stream, const a2dp_callback_parms_t *Info);
< void app_a2dp_source_init(void);
< void app_source_init(void);
< 
< void app_a2dp_source_find_sink(void);
< void avrcp_source_callback_TG(btif_avrcp_chnl_handle_t chnl, const avrcp_callback_parms_t *Parms);
< void app_a2dp_start_stream(void);
< void app_a2dp_suspend_stream(void);
< #endif
---
> void hfp_volume_set(enum BT_DEVICE_ID_T id, uint8_t btVol);
> uint8_t hfp_volume_get(enum BT_DEVICE_ID_T id);
> void hfp_update_local_volume(enum BT_DEVICE_ID_T id, uint8_t localVol);
> void hfp_volume_local_set(enum BT_DEVICE_ID_T id, uint8_t vol);
> uint8_t hfp_volume_local_get(enum BT_DEVICE_ID_T id);
> 
> uint8_t hfp_convert_local_vol_to_bt_vol(uint8_t localVol);
> uint8_t hfp_convert_bt_vol_to_local_vol(uint8_t btVol);
406,410c574,577
< uint8_t app_bt_avrcp_get_notify_trans_id(void);
< void app_bt_avrcp_set_notify_trans_id(uint8_t trans_id);
< uint8_t app_bt_avrcp_get_ctl_trans_id(void);
< void app_bt_avrcp_set_ctl_trans_id(uint8_t trans_id);
< 
---
> uint8_t app_bt_avrcp_get_volume_change_trans_id(uint8_t device_id);
> void app_bt_avrcp_set_volume_change_trans_id(uint8_t device_id, uint8_t trans_id);
> uint8_t app_bt_avrcp_get_ctl_trans_id(uint8_t device_id);
> void app_bt_avrcp_set_ctl_trans_id(uint8_t device_id, uint8_t trans_id);
412,417c579
< #if defined(IBRT)
< #if defined(ENHANCED_STACK)
< uint32_t app_avrcp_save_ctxs(btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
< uint32_t app_avrcp_restore_ctxs(btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
< #endif /* ENHANCED_STACK */
< #endif
---
> void app_bt_profile_connect_manager_a2dp(enum BT_DEVICE_ID_T id, a2dp_stream_t *Stream, const a2dp_callback_parms_t *Info);
