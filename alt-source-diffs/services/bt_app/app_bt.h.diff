local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/bt_app/app_bt.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/bt_app/app_bt.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
24a24
> #include "audio_policy.h"
28a29
>     APP_BT_DO_FUNCTION,
31a33,65
> #ifdef IBRT
> typedef enum {
>     RETRIGGER_BY_ROLE_SWITCH                  = 0,
>     RETRIGGER_BY_DECODE_ERROR                 = 1,
>     RETRIGGER_BY_DECODE_STATUS_ERROR          = 2,
>     RETRIGGER_BY_ROLE_MISMATCH                = 3,
>     RETRIGGER_BY_TRIGGER_FAIL                 = 4,
>     RETRIGGER_BY_L_R_SYNC_DETECT              = 5,
>     RETRIGGER_BY_SYNCHRONIZE_CNT_LIMIT        = 6,
>     RETRIGGER_BY_LOW_BUFFER                   = 7,
>     RETRIGGER_BY_SEQ_MISMATCH                 = 8,
>     RETRIGGER_BY_AUTO_SYNC_NO_SUPPORT         = 9,
>     RETRIGGER_BY_PLAYER_NOT_ACTIVE            = 10,
>     RETRIGGER_BY_STATUS_ERROR                 = 11,
>     RETRIGGER_BY_STREAM_RESTART               = 12,
>     RETRIGGER_BY_SYNC_MISMATCH                = 13,
>     RETRIGGER_BY_SYNC_FAIL                    = 14,
>     RETRIGGER_BY_SYS_BUSY                     = 15,
>     RETRIGGER_BY_SYNC_TARGET_CNT_ERROR        = 16,
>     RETRIGGER_BY_AI_STREAM                    = 17,
>     RETRIGGER_BY_IN_SNIFF                     = 18,
>     RETRIGGER_BY_UNKNOW                       = 19,
>     RETRIGGER_MAX                             = 20,
> } AppIbrtAudioRetriggerType;
> #endif
> 
> typedef uint8_t voice_report_role_t;
> #define VOICE_REPORT_MASTER   0x00
> #define VOICE_REPORT_SLAVE    0x01
> #define VOICE_REPORT_LOCAL    0x02
> 
> voice_report_role_t app_ibrt_voice_report_get_role(void);
> 
37a72,138
> typedef struct app_bt_search_result {
>     bt_bdaddr_t *addr;
>     const char *name;
>     int name_len;
> } app_bt_search_result_t;
> 
> #ifdef RESUME_MUSIC_AFTER_CRASH_REBOOT
> typedef struct
> {
>     bt_bdaddr_t addr;
> } app_bt_curr_palyback_device_t;
> #endif
> 
> void app_bt_reconnect_a2dp_profile(bt_bdaddr_t *mobile_addr);
> void app_bt_reconnect_hfp_profile(bt_bdaddr_t * mobile_addr);
> void app_bt_reconnect_avrcp_profile(bt_bdaddr_t *mobile_addr);
> 
> void app_bt_disconnect_a2dp_profile(a2dp_stream_t * a2dp);
> void app_bt_disconnect_avrcp_profile(btif_avrcp_channel_t * avrcp);
> void app_bt_disconnect_hfp_profile(btif_hf_channel_t * hfp);
> 
> const char* app_bt_a2dp_get_all_device_streaming_state(void);
> const char* app_bt_a2dp_get_all_device_state(void);
> const char* app_bt_hf_get_all_device_state(void);
> const char *app_bt_get_device_current_roles(void);
> 
> void app_bt_disconnect_link_by_id(uint8_t device_id);
> void app_bt_disconnect_link_byaddr(bt_bdaddr_t * remote);
> 
> void app_bt_switch_to_non_prompt_disc_a2dp_play_mode(void);
> void app_bt_switch_to_multi_a2dp_quick_switch_play_mode(void);
> 
> struct app_bt_profile_manager;
> 
> void app_bt_reset_profile_manager(struct app_bt_profile_manager *mgr);
> 
> void app_bt_a2dp_state_checker(void);
> void app_bt_hfp_state_checker(void);
> 
> void app_bt_link_state_checker(void);
> bool app_bt_checker_print_link_state(const char* tag, btif_remote_device_t *btm_conn);
> 
> void app_bt_audio_state_checker(void);
> const char* app_bt_get_active_media_state(void);
> 
> void app_bt_a2dp_send_set_abs_volume(uint8_t device_id, uint8_t volume);
> 
> void app_bt_a2dp_send_key_request(uint8_t device_id, uint8_t a2dp_key);
> 
> void app_bt_local_volume_up(void (*cb)(uint8_t device_id));
> void app_bt_local_volume_down(void (*cb)(uint8_t device_id));
> void app_bt_local_volume_set(uint16_t volume, void (*cb)(uint8_t device_id));
> 
> void app_bt_set_a2dp_default_abs_volume(uint8_t volume);
> void app_bt_update_a2dp_default_abs_volume(int device_id, uint8_t volume);
> void app_bt_set_a2dp_current_abs_volume(int device_id, uint8_t volume);
> uint8_t app_bt_get_a2dp_current_abs_volume(int device_id);
> void app_bt_a2dp_current_abs_volume_just_set(int device_id, uint8_t volume);
> void app_bt_a2dp_abs_volume_mix_version_handled(int device_id);
> 
> #ifdef IBRT
> const char *app_bt_get_profile_exchanged_state(void);
> void app_bt_ibrt_mobile_link_state_checker(void);
> bool app_bt_ibrt_has_mobile_link_connected(void);
> bool app_bt_ibrt_has_snoop_link_connected(void);
> #endif
> 
41c142
< typedef void (*APP_APPTHREAD_REQ_CUSTOMER_CALL_FN_T)(void *, void *);
---
> typedef void (*APP_BT_LE_READ_CHANNEL_MAP_CALLBACK) (void *);
43,48c144
< #define app_bt_accessmode_set_req(accmode) do{app_bt_send_request(APP_BT_REQ_ACCESS_MODE_SET, accmode, 0, 0);}while(0)
< typedef enum
< {
<     APP_BT_IDLE_STATE = 0,
<     APP_BT_IN_CONNECTING_PROFILES_STATE	// acl link is created and in the process of connecting profiles
< } APP_BT_CONNECTING_STATE_E;
---
> #define app_bt_accessmode_set_req(accmode) do{app_bt_send_request(APP_BT_REQ_ACCESS_MODE_SET, accmode, 0, 0,0);}while(0)
67a164,172
> #ifdef __SOURCE_TRACE_RX__
> typedef struct
> {
>     uint32_t index;
>     bt_bdaddr_t addr;
>     char name[256];
> }device_info_t;
> #endif
> 
70a176,203
> #ifdef USE_BT_ADAPTER
> enum BT_ACL_CONN_TYPE{
>     BT_ACL_CONNECT      = 0,
>     BT_ACL_DISCONNECT   = 1
> };
> 
> enum BT_PAIR_TYPE{
>     APP_BT_PAIR_NONE      = 0,
>     APP_BT_PAIRED         = 1
> };
> 
> // type: ACL_CONNECT/ACL_DISCONNECT event;
> // addr: peer device address;
> // para: event reason. For ACL_CONNECT event, it is acl link status reason; For ACL_DISCONNECT event, it is disconnect 
> // status reason.
> typedef void (*bt_acl_conn_state_change_cb_t)(uint8_t type,bt_bdaddr_t* addr, uint32_t para);
> typedef void (*bt_pair_state_change_cb_t)(bt_bdaddr_t* addr, uint32_t para);
> extern bt_pair_state_change_cb_t g_bt_pair_state_callback;
> 
> void app_bt_acl_conn_callback_register(bt_acl_conn_state_change_cb_t cb);
> void app_bt_acl_conn_callback_deregister(void);
> void app_bt_pair_callback_register(bt_pair_state_change_cb_t cb);
> void app_bt_pair_callback_deregister(void);
> 
> #endif
> 
> void app_bt_host_fault_dump_trace(void);
> 
74a208,213
> void app_bt_get_remote_device_name(const bt_bdaddr_t * bdaddr);
> 
> void app_bt_inquiry_remote_device_name(const bt_bdaddr_t * bdaddr);
> 
> void app_bt_read_rssi_avg(bt_bdaddr_t * bdaddr);
> 
90c229
< void app_bt_send_request(uint32_t message_id, uint32_t param0, uint32_t param1, uint32_t ptr);
---
> int app_bt_send_request(uint32_t message_id, uint32_t param0, uint32_t param1, uint32_t param2,uint32_t ptr);
98,99d236
< void app_bt_profile_connect_manager_open(void);
< 
108c245,246
< bool app_is_hfp_service_connected(void);
---
> bool app_is_hfp_service_connected(uint8_t device_id);
> 
113,115d250
< #endif
< #if defined(__BT_SELECT_PROF_DEVICE_ID__)
< int8_t app_bt_a2dp_is_same_stream(a2dp_stream_t *src_Stream, a2dp_stream_t *dst_Stream);
117,127c252,256
< void app_bt_a2dp_find_same_unused_stream(a2dp_stream_t *in_Stream, a2dp_stream_t **out_Stream, uint32_t device_id);
< 
< int8_t app_bt_a2dp_is_stream_on_device_id(a2dp_stream_t *in_Stream, uint32_t device_id);
< 
< int8_t app_bt_hfp_is_chan_on_device_id(hf_chan_handle_t chan, uint32_t device_id);
< 
< int8_t app_bt_is_any_profile_connected(uint32_t device_id);
< 
< int8_t app_bt_is_a2dp_connected(uint32_t device_id);
< 
< btif_remote_device_t *app_bt_get_connected_profile_remdev(uint32_t device_id);
---
> void app_bt_ibrt_connect_mobile_a2dp_profile(const bt_bdaddr_t *addr);
> void app_bt_ibrt_connect_mobile_hfp_profile(const bt_bdaddr_t *addr);
> #endif
> #if defined(GET_PEER_RSSI_ENABLE)
> void app_bt_ibrt_rssi_status_checker(void);
135a265,266
> void app_bt_conn_stop_sniff(btif_remote_device_t* currentRemDev);
> 
139a271,274
> bool app_bt_has_mobile_device_in_sniff_mode(void);
> 
> bool app_bt_has_mobile_device_in_active_mode(void);
> 
146,150c281
< void app_bt_reset_reconnect_timer(bt_bdaddr_t *pBdAddr);
< 
< uint8_t app_bt_get_num_of_connected_dev(void);
< 
< bool btapp_hfp_is_dev_call_active(uint8_t devId);
---
> uint8_t app_bt_count_connected_device(void);
160c291
< bool app_bt_is_to_resume_music_player(uint8_t deviceId);
---
> bool app_bt_is_device_profile_connected(uint8_t deviceId);
162c293
< void app_bt_reset_music_player_resume_state(void);
---
> bool app_bt_is_acl_connected(uint8_t device_id);
164c295
< bool app_bt_is_device_connected(uint8_t deviceId);
---
> bool app_bt_is_sco_connected(uint8_t device_id);
166c297,309
< void app_bt_set_music_player_resume_device(uint8_t deviceId);
---
> bool app_bt_is_hfp_connected(uint8_t device_id);
> 
> uint8_t app_bt_get_device_id_byaddr(bt_bdaddr_t *remote);
> 
> bool app_bt_is_a2dp_connected(uint8_t device_id);
> 
> bool app_bt_is_acl_connected_byaddr(const bt_bdaddr_t *remote);
> 
> bool app_bt_is_sco_connected_byaddr(bt_bdaddr_t *remote);
> 
> bool app_bt_is_hfp_connected_byaddr(bt_bdaddr_t *remote);
> 
> bool app_bt_is_a2dp_connected_byaddr(bt_bdaddr_t *remote);
176,181d318
< void app_hfp_start_voice_media(uint8_t devId);
< 
< void app_hfp_resume_pending_voice_media(void);
< 
< bool app_hfp_is_starting_media_pending(void);
< 
184c321
< bool btapp_hfp_is_dev_sco_connected(uint8_t devId);
---
> bool app_bt_is_profile_connected_before(uint8_t device_id);
186c323
< uint8_t a2dp_get_latest_paused_device(void);
---
> bool btapp_hfp_is_dev_sco_connected(uint8_t devId);
194,199d330
< void app_a2dp_hold_mute();
< 
< void app_a2dp_unhold_mute();
< 
< void app_bt_set_mobile_a2dp_stream(uint32_t deviceId,a2dp_stream_t *stream);
< 
202,203d332
< 
< bool app_bt_is_connected();
205c334
< bool app_device_bt_is_connected();
---
> 
208a338
> bt_bdaddr_t* app_bt_get_remote_device_address(uint8_t device_id);
217a348,406
> void app_bt_start_search_with_callback(void (*cb)(bt_bdaddr_t *remote), void (*result_cb)(app_bt_search_result_t *result));
> 
> void app_bt_del_search_except_device(const bt_bdaddr_t *addr);
> 
> void app_bt_add_search_except_device(const bt_bdaddr_t *addr);
> 
> void app_bt_clear_search_except_device_list(void);
> 
> typedef void (*inquiryResponseCallback_t)(uint8_t *btAddr, uint8_t *deviceName, uint8_t *eir);
> /**
>  ****************************************************************************************
>  * @brief register inquiry_response_callback to get bt addr, device name and eir.
>  *
>  * @param[in] inquiryResponseCallback_t callback
>  ****************************************************************************************
>  */
> void app_bt_register_inquiry_response_callback(inquiryResponseCallback_t callback);
> 
> /**
>  ****************************************************************************************
>  * @brief bt start inquiry.
>  *
>  * @param[in] inquiryLastingTime        Inquiry lasting time, uint is 1.28s.
>                                         Range: 0x01 to 0x30
>                                         Time(seconds) = inquiryLastingTime * 1.28s
>                                         Range: 1.28 to 61.44 s
>  ****************************************************************************************
>  */
> void app_bt_start_inquiry(uint8_t inquiryLastingTime);
> 
> /**
>  ****************************************************************************************
>  * @brief bt stop inquiry.
>  *
>  ****************************************************************************************
>  */
> void app_bt_stop_inquiry(void);
> 
> /**
>  ****************************************************************************************
>  * @brief bt set channel classification map which related Set AFH Host Channel Classification command
>  * AFH_Host_Channel_Classification: Size: 10 octets (79 bits meaningful)
>  * This parameter contains 80 1-bit fields
>  * The nth such field (in the range 0 to 78) contains the value for channel n:
>  *    0: channel n is bad
>  *    1: channel n is unknown
>  *
>  * The most significant bit (bit 79) is reserved for future use
>  * At least (Nmin == 20) channels shall be marked as unknown.
>  * default all bits value is 1
>  *
>  ****************************************************************************************
>  */
> void app_bt_set_chnl_classification(uint8_t *chnl_map);
> 
> void app_bt_read_le_chnl_map(uint16_t conn_handle);
> void app_bt_set_le_host_chnl_classification(uint8_t *chnl_map);
> void app_bt_registe_read_le_chnl_map_callback(APP_BT_LE_READ_CHANNEL_MAP_CALLBACK cb);
> 
219c408,409
< #if defined(ENHANCED_STACK)
---
> uint32_t app_bt_save_bd_addr_ctx(btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
> uint32_t app_bt_restore_bd_addr_ctx(bt_bdaddr_t *bdaddr_p, uint8_t *buf, uint32_t buf_len);
221c411
< uint32_t app_bt_restore_a2dp_app_ctx(uint8_t *buf, uint32_t buf_len);
---
> uint32_t app_bt_restore_a2dp_app_ctx(bt_bdaddr_t *bdaddr_p, uint8_t *buf, uint32_t buf_len);
223c413
< uint32_t app_bt_restore_avrcp_app_ctx(uint8_t *buf, uint32_t buf_len);
---
> uint32_t app_bt_restore_avrcp_app_ctx(bt_bdaddr_t *bdaddr_p, uint8_t *buf, uint32_t buf_len);
225,228c415,418
< uint32_t app_bt_restore_hfp_app_ctx(uint8_t *buf, uint32_t buf_len);
< uint32_t app_bt_save_spp_app_ctx(uint32_t app_id,btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
< uint32_t app_bt_restore_spp_app_ctx(uint8_t *buf, uint32_t buf_len, uint32_t app_id);
< #ifdef __BTMAP_ENABLE__
---
> uint32_t app_bt_restore_hfp_app_ctx(bt_bdaddr_t *bdaddr_p, uint8_t *buf, uint32_t buf_len);
> uint32_t app_bt_save_spp_app_ctx(uint64_t app_id,btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
> uint32_t app_bt_restore_spp_app_ctx(bt_bdaddr_t *bdaddr_p, uint8_t *buf, uint32_t buf_len, uint64_t app_id);
> #ifdef BT_MAP_SUPPORT
230,234c420
< uint32_t app_bt_restore_map_app_ctx(uint8_t *buf, uint32_t buf_len);
< #endif
< #ifdef BTIF_HID_DEVICE
< uint32_t app_bt_save_hid_app_ctx(uint8_t *buf);
< uint32_t app_bt_restore_hid_app_ctx(uint8_t *buf);
---
> uint32_t app_bt_restore_map_app_ctx(bt_bdaddr_t *bdaddr_p, uint8_t *buf, uint32_t buf_len);
236c422
< #endif /* ENHANCED_STACK */
---
> bool app_bt_is_any_connection(void);
240a427
> void app_bt_print_buff_status(void);
245,249c432,459
< void app_bt_prepare_for_ota(void);
< void hfp_reconnecting_timer_stop_callback(const btif_event_t *event);
< int app_bt_start_custom_function_in_app_thread(
<                                     uint32_t param0, uint32_t param1, uint32_t funcPtr);
< uint8_t app_bt_get_a2dp_state();
---
> 
> #ifdef CTKD_ENABLE
> bool app_bt_ctkd_is_connecting_mobile_pending(void);
> void app_bt_ctkd_connecting_mobile_handler(void);
> #endif
> 
> typedef bool (*app_factory_test_ind_handler_func)(uint8_t test_type);
> void app_factory_register_test_ind_callback(app_factory_test_ind_handler_func cb);
> #ifdef _SUPPORT_REMOTE_COD_
> void app_bt_get_remote_cod(uint8_t *cod0, uint8_t *cod1);
> bool app_bt_get_remote_cod_by_addr(const bt_bdaddr_t *bd_ddr, uint8_t *cod);
> #endif
> void app_bt_report_audio_retrigger(uint8_t retrgigerType);
> void app_bt_reset_tws_acl_data_packet_check(void);
> void app_bt_update_link_monitor_info(uint8_t *ptr);
> void app_bt_acl_data_packet_check(uint8_t *data);
> #ifdef RESUME_MUSIC_AFTER_CRASH_REBOOT
> void app_bt_resume_music_after_crash_reboot(uint8_t device_id);
> void app_bt_resume_music_after_crash_reboot_init(void);
> void app_bt_reset_curr_playback_device(uint8_t device_id);
> #endif
> void app_bt_reset_rssi_collector(void);
> int32_t app_bt_tx_rssi_analyzer(int8_t rssi);
> void app_bt_sleep_init(void);
> uint8_t app_bt_ibrt_mobile_link_num_get(void);
> #ifdef LINK_KEY_ENCRYPT_BY_CUSTOMER
> uint8_t *app_get_current_remote_device_name(void);
> #endif
