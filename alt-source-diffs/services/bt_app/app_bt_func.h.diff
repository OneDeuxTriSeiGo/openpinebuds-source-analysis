local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/bt_app/app_bt_func.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/bt_app/app_bt_func.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
49,55d47
< #if defined (__HSP_ENABLE__)
<         HS_CreateServiceLink_req                    = 18,
<         HS_CreateAudioLink_req                      = 19,
<         HS_DisconnectAudioLink_req                  = 20,
<         HS_EnableSniffMode_req                      = 21,
<         HS_DisconnectServiceLink_req                = 22,
< #endif
70c62
< typedef void (*APP_BTTHREAD_REQ_CUSTOMER_CALL_CB_T)(void *, void *);
---
> typedef void (*APP_BT_REQ_CUSTOMER_CALl_CB_T)(void *, void *, void *, void *);
114d105
<         btif_access_mode_info_t info;
144c135
<         bt_bdaddr_t *Addr;
---
>         bt_bdaddr_t Addr;
160,161c151,152
<         hf_chan_handle_t Chan;
<         bt_bdaddr_t *Addr;
---
>         btif_hf_channel_t* Chan;
>         bt_bdaddr_t Addr;
164c155
<     //bt_status_t HF_DisconnectServiceLink(hf_chan_handle_t Chan)
---
>     //bt_status_t HF_DisconnectServiceLink(btif_hf_channel_t* Chan)
166c157
<         hf_chan_handle_t Chan;
---
>         btif_hf_channel_t* Chan;
169c160
<     //bt_status_t HF_CreateAudioLink(hf_chan_handle_t Chan)
---
>     //bt_status_t HF_CreateAudioLink(btif_hf_channel_t* Chan)
171c162
<         hf_chan_handle_t Chan;
---
>         btif_hf_channel_t* Chan;
174c165
<     //bt_status_t HF_DisconnectAudioLink(hf_chan_handle_t Chan)
---
>     //bt_status_t HF_DisconnectAudioLink(btif_hf_channel_t* Chan)
176c167
<         hf_chan_handle_t Chan;
---
>         btif_hf_channel_t* Chan;
179c170
<     //bt_status_t HF_EnableSniffMode(hf_chan_handle_t Chan, BOOL Enable)
---
>     //bt_status_t HF_EnableSniffMode(btif_hf_channel_t* Chan, BOOL Enable)
181c172
<         hf_chan_handle_t Chan;
---
>         btif_hf_channel_t* Chan;
185c176
<     //bt_status_t HF_SetMasterRole(hf_chan_handle_t Chan, BOOL Flag);
---
>     //bt_status_t HF_SetMasterRole(btif_hf_channel_t* Chan, BOOL Flag);
187c178
<         hf_chan_handle_t Chan;
---
>         btif_hf_channel_t* Chan;
198,226d188
< #if defined (__HSP_ENABLE__)
<     //bt_status_t HS_CreateServiceLink(HsChannel *Chan, bt_bdaddr_t *Addr)
<     struct {
<         HsChannel *Chan;
<         bt_bdaddr_t *Addr;
<     } HS_CreateServiceLink_param;
< 
<     //BtStatus HS_CreateAudioLink(HsChannel *Chan)
<     struct {
<         HsChannel *Chan;
<     } HS_CreateAudioLink_param;
< 
<     //BtStatus HS_DisconnectAudioLink(HsChannel *Chan)
<     struct {
<         HsChannel *Chan;
<     } HS_DisconnectAudioLink_param;
< 
<     //BtStatus HS_DisconnectServiceLink(HsChannel *Chan)
<     struct {
<         HsChannel *Chan;
<     } HS_DisconnectServiceLink_param;
< 
<     //BtStatus HS_EnableSniffMode(HsChannel *Chan, BOOL Enable)
<     struct {
<         HsChannel *Chan;
<         BOOL Enable;
<     } HS_EnableSniffMode_param;
< #endif
< 
230a193,194
>         uint32_t param2;
>         uint32_t param3;
288c252
< int app_bt_HF_CreateServiceLink(hf_chan_handle_t Chan, bt_bdaddr_t *Addr);
---
> int app_bt_HF_CreateServiceLink(btif_hf_channel_t* Chan, bt_bdaddr_t *Addr);
290c254
< int app_bt_HF_DisconnectServiceLink(hf_chan_handle_t Chan);
---
> int app_bt_HF_DisconnectServiceLink(btif_hf_channel_t* Chan);
292c256
< int app_bt_HF_CreateAudioLink(hf_chan_handle_t Chan);
---
> int app_bt_HF_CreateAudioLink(btif_hf_channel_t* Chan);
294c258
< int app_bt_HF_DisconnectAudioLink(hf_chan_handle_t Chan);
---
> int app_bt_HF_DisconnectAudioLink(btif_hf_channel_t* Chan);
296c260
< int app_bt_HF_EnableSniffMode(hf_chan_handle_t Chan, BOOL Enable);
---
> int app_bt_HF_EnableSniffMode(btif_hf_channel_t* Chan, BOOL Enable);
298c262
< int app_bt_HF_SetMasterRole(hf_chan_handle_t Chan, BOOL Flag);
---
> int app_bt_HF_SetMasterRole(btif_hf_channel_t* Chan, BOOL Flag);
311,322d274
< #if defined (__HSP_ENABLE__)
< int app_bt_HS_CreateServiceLink(HsChannel *Chan, bt_bdaddr_t *Addr);
< 
< int app_bt_HS_CreateAudioLink(HsChannel *Chan);
< 
< int app_bt_HS_DisconnectAudioLink(HsChannel *Chan);
< 
< int app_bt_HS_DisconnectServiceLink(HsChannel *Chan);
< 
< int app_bt_HS_EnableSniffMode(HsChannel *Chan, BOOL Enable);
< 
< #endif
334a287,289
> int app_bt_call_func_in_bt_thread(
>     uint32_t param0, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t funcPtr);
> 
343,344d297
< 
< 
