local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/nv_section/userdata_section/nvrecord_bt.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/nv_section/userdata_section/nvrecord_bt.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
29a29,31
> typedef void (*nv_record_btdevice_new_device_paired_func_t)(const uint8_t* btAddr);
> typedef bool (*nv_record_check_fake_master_bt_record_func_t)(void);
> 
30a33
> void nv_record_btdevicerecord_set_a2dp_abs_vol(nvrec_btdevicerecord* pRecord, int8_t vol);
34c37
< void nv_record_btdevicerecord_set_vend_id_and_source(nvrec_btdevicerecord* pRecord, int16_t vend_id, int16_t vend_id_source);
---
> void nv_record_btdevicerecord_set_pnp_info(nvrec_btdevicerecord* pRecord, bt_dip_pnp_info_t* pPnpInfo);
37d39
< void nv_record_btdevicerecord_set_hsp_profile_active_state(btdevice_profile* device_plf, bool isActive);
38a41
> int nv_record_get_paired_dev_list(nvrec_btdevicerecord** record);
44a48
> bt_status_t nv_record_ddbrec_delete_all();
46a51
> bool nv_record_get_pnp_info(bt_bdaddr_t *bdAddr, bt_dip_pnp_info_t *pPnpInfo);
49a55,76
> #ifdef FPGA
> bt_status_t ram_record_ddbrec_find(const bt_bdaddr_t* bd_ddr, nvrec_btdevicerecord **record);
> bt_status_t ram_record_ddbrec_add(const nvrec_btdevicerecord* param_rec);
> bt_status_t ram_record_ddbrec_delete(const bt_bdaddr_t *bdaddr);
> #endif
> 
> #ifdef TOTA_CRASH_DUMP_TOOL_ENABLE
> void nv_record_btdevicerecord_crash_dump(void);
> #endif
> 
> uint8_t* nv_record_btdevice_get_latest_paired_device_bt_addr(void);
> void nv_record_bt_device_register_newly_paired_device_callback(nv_record_btdevice_new_device_paired_func_t func);
> #ifdef USE_BT_ADAPTER
> void nv_record_register_ibrt_role_check_cb(nv_record_check_fake_master_bt_record_func_t cb);
> #endif
> 
> #ifdef LINK_KEY_ENCRYPT_BY_CUSTOMER
> typedef int32_t (*aes256_en_de_crype_cb_t)(uint8_t *input, const uint8_t *key, uint8_t *output);
> void AES256_GCM_encrypt_register(aes256_en_de_crype_cb_t cb);
> void AES256_GCM_decrypt_register(aes256_en_de_crype_cb_t cb);
> #endif
> 
