local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/bt_if_enhanced/inc/l2cap_api.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/bt_if_enhanced/inc/l2cap_api.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
94c93
<     bool btif_l2cap_is_profile_channel_connected(uint8_t psm_context_mask);
---
>     bool btif_l2cap_is_profile_channel_connected(btif_remote_device_t *p_dev, uint8_t psm_context_mask);
96,98c95,97
<     void btif_l2cap_register_sdp_disconnect_callback(btif_callback cb);
< 	void btif_btm_register_get_ibrt_role_callback(btif_callback_ext cb);
<      void btif_btm_register_get_tss_state_callback(btif_callback_ext cb);
---
>     void btif_l2cap_register_sdp_disconnect_callback(void (*cb)(const void* addr));
>     void btif_btm_register_get_ibrt_role_callback(uint8_t (*cb)(const void* addr));
>     void btif_btm_register_get_tss_state_callback(uint8_t (*cb)(const void* addr));
113a113,122
> 
>     typedef void (*btif_l2cap_process_echo_req_callback_func)(uint8_t device_id, uint16_t conhdl, uint8_t id, uint16_t len, uint8_t *data);
>     typedef void (*btif_l2cap_process_echo_res_callback_func)(uint8_t device_id, uint16_t conhdl, uint8_t *rxdata, uint16_t rxlen);
>     typedef void (*btif_l2cap_fill_in_echo_req_data_callback_func)(uint8_t device_id, struct l2cap_conn *conn, uint8_t *data, uint16_t data_len);
> 
>     void btif_l2cap_process_echo_req_rewrite_rsp_data(uint8_t device_id, uint16_t conhdl, uint8_t id, uint16_t len, uint8_t *data);
>     void btif_l2cap_process_echo_res_analyze_data(uint8_t device_id, uint16_t conhdl, uint8_t *rxdata, uint16_t rxlen);
>     void btif_l2cap_fill_in_echo_req_data(uint8_t device_id, struct l2cap_conn *conn, uint8_t *data, uint16_t data_len);
> 
>     void btif_l2cap_echo_init(btif_l2cap_process_echo_req_callback_func req_func,btif_l2cap_process_echo_res_callback_func res_func,btif_l2cap_fill_in_echo_req_data_callback_func data_func);
