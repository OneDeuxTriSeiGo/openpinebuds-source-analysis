local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/bt_if_enhanced/inc/hfp_api.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/bt_if_enhanced/inc/hfp_api.h
diff -sw local remote
---

1,8c1,5
< /***************************************************************************
<  *
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
<  *
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
10,13c7
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
15c9,14
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
23,27c22,24
< #ifdef __BT_ONE_BRING_TWO__
< #define HF_CHANNEL_NUM     2
< #else
< #define HF_CHANNEL_NUM     1
< #endif
---
> #define HF_CHANNEL_NUM (BT_DEVICE_NUM+BT_SOURCE_DEVICE_NUM)
> 
> typedef struct { /* empty */ } btif_hf_channel_t; /* used to hold the pointer to struct _hshf_channel */
29d25
< typedef void *hf_chan_handle_t;
75a72
>     BTIF_HF_SCO_CODEC_XXXX = 16,    // Cunstomer Codec
116,164c113,165
<     BTIF_HF_EVENT_SERVICE_CONNECT_REQ = 0,
<     BTIF_HF_EVENT_SERVICE_CONNECTED = 1,
<     BTIF_HF_EVENT_SERVICE_DISCONNECTED = 2,
<     BTIF_HF_EVENT_AUDIO_CONNECTED = 3,
<     BTIF_HF_EVENT_AUDIO_DISCONNECTED = 4,
<     BTIF_HF_EVENT_AUDIO_DATA = 5,
<     BTIF_HF_EVENT_AUDIO_DATA_SENT = 6,
<     BTIF_HF_EVENT_GATEWAY_FEATURES = 7,
<     BTIF_HF_EVENT_GW_HOLD_FEATURES = 8,
<     BTIF_HF_EVENT_CALL_STATE = 9,
<     BTIF_HF_EVENT_CALLER_ID = 10,
<     BTIF_HF_EVENT_CALL_LISTING_ENABLED = 11,
<     BTIF_HF_EVENT_RESPONSE_HOLD_APPL = 12,
<     BTIF_HF_EVENT_CALL_IND = 13,
<     BTIF_HF_EVENT_CALLSETUP_IND = 14,
<     BTIF_HF_EVENT_CALLHELD_IND = 15,
<     BTIF_HF_EVENT_RING_IND = 16,
<     BTIF_HF_EVENT_WAIT_NOTIFY = 17,
<     BTIF_HF_EVENT_CALLER_ID_NOTIFY = 18,
<     BTIF_HF_EVENT_CURRENT_CALL_STATE = 19,
<     BTIF_HF_EVENT_RESPONSE_HOLD = 20,
<     BTIF_HF_EVENT_SERVICE_IND = 21,
<     BTIF_HF_EVENT_BATTERY_IND = 22,
<     BTIF_HF_EVENT_SIGNAL_IND = 23,
<     BTIF_HF_EVENT_ROAM_IND = 24,
<     BTIF_HF_EVENT_SMS_IND = 25,
<     BTIF_HF_EVENT_VOICE_REC_STATE = 26,
<     BTIF_HF_EVENT_VOICE_TAG_NUMBER = 27,
<     BTIF_HF_EVENT_SPEAKER_VOLUME = 28,
<     BTIF_HF_EVENT_MIC_VOLUME = 29,
<     BTIF_HF_EVENT_IN_BAND_RING = 30,
<     BTIF_HF_EVENT_NETWORK_OPERATOR = 31,
<     BTIF_HF_EVENT_SUBSCRIBER_NUMBER = 32,
<     BTIF_HF_EVENT_NO_CARRIER = 33,
<     BTIF_HF_EVENT_BUSY = 34,
<     BTIF_HF_EVENT_NO_ANSWER = 35,
<     BTIF_HF_EVENT_DELAYED = 36,
<     BTIF_HF_EVENT_BLACKLISTED = 37,
<     BTIF_HF_EVENT_PHONEBOOK_STORAGE = 38,
<     BTIF_HF_EVENT_PHONEBOOK_INFO = 39,
<     BTIF_HF_EVENT_PHONEBOOK_SIZE = 40,
<     BTIF_HF_EVENT_PHONEBOOK_ENTRY = 41,
<     BTIF_HF_EVENT_AT_RESULT_DATA = 42,
<     BTIF_HF_EVENT_COMMAND_COMPLETE = 43,
<     BTIF_HF_EVENT_SIRI_STATUS = 44,
<     BTIF_HF_EVENT_READ_AG_INDICATORS_STATUS = 45,
<     BTIF_HF_EVENT_BES_TEST = 46,
<     BTIF_HF_EVENT_SELECT_CHANNEL = 47,
<     BTIF_HF_EVENT_RFCOMM_CONNECTED = 48,
---
>     BTIF_HF_EVENT_SERVICE_CONNECT_REQ = 1,
>     BTIF_HF_EVENT_SERVICE_CONNECTED = 2,
>     BTIF_HF_EVENT_SERVICE_DISCONNECTED = 3,
>     BTIF_HF_EVENT_AUDIO_CONNECTED = 4,
>     BTIF_HF_EVENT_AUDIO_DISCONNECTED = 5,
>     BTIF_HF_EVENT_AUDIO_DATA = 6,
>     BTIF_HF_EVENT_AUDIO_DATA_SENT = 7,
>     BTIF_HF_EVENT_GATEWAY_FEATURES = 8,
>     BTIF_HF_EVENT_GW_HOLD_FEATURES = 9,
>     BTIF_HF_EVENT_CALL_STATE = 10,
>     BTIF_HF_EVENT_CALLER_ID = 11,
>     BTIF_HF_EVENT_CALL_LISTING_ENABLED = 12,
>     BTIF_HF_EVENT_RESPONSE_HOLD_APPL = 13,
>     BTIF_HF_EVENT_CALL_IND = 14,
>     BTIF_HF_EVENT_CALLSETUP_IND = 15,
>     BTIF_HF_EVENT_CALLHELD_IND = 16,
>     BTIF_HF_EVENT_RING_IND = 17,
>     BTIF_HF_EVENT_WAIT_NOTIFY = 18,
>     BTIF_HF_EVENT_CALLER_ID_NOTIFY = 19,
>     BTIF_HF_EVENT_CURRENT_CALL_STATE = 20,
>     BTIF_HF_EVENT_RESPONSE_HOLD = 21,
>     BTIF_HF_EVENT_SERVICE_IND = 22,
>     BTIF_HF_EVENT_BATTERY_IND = 23,
>     BTIF_HF_EVENT_SIGNAL_IND = 24,
>     BTIF_HF_EVENT_ROAM_IND = 25,
>     BTIF_HF_EVENT_SMS_IND = 26,
>     BTIF_HF_EVENT_VOICE_REC_STATE = 27,
>     BTIF_HF_EVENT_VOICE_TAG_NUMBER = 28,
>     BTIF_HF_EVENT_SPEAKER_VOLUME = 29,
>     BTIF_HF_EVENT_MIC_VOLUME = 30,
>     BTIF_HF_EVENT_IN_BAND_RING = 31,
>     BTIF_HF_EVENT_NETWORK_OPERATOR = 32,
>     BTIF_HF_EVENT_SUBSCRIBER_NUMBER = 33,
>     BTIF_HF_EVENT_NO_CARRIER = 34,
>     BTIF_HF_EVENT_BUSY = 35,
>     BTIF_HF_EVENT_NO_ANSWER = 36,
>     BTIF_HF_EVENT_DELAYED = 37,
>     BTIF_HF_EVENT_BLACKLISTED = 38,
>     BTIF_HF_EVENT_PHONEBOOK_STORAGE = 39,
>     BTIF_HF_EVENT_PHONEBOOK_INFO = 40,
>     BTIF_HF_EVENT_PHONEBOOK_SIZE = 41,
>     BTIF_HF_EVENT_PHONEBOOK_ENTRY = 42,
>     BTIF_HF_EVENT_AT_RESULT_DATA = 43,
>     BTIF_HF_EVENT_COMMAND_COMPLETE = 44,
>     BTIF_HF_EVENT_SIRI_STATUS = 45,
>     BTIF_HF_EVENT_READ_AG_INDICATORS_STATUS = 46,
>     BTIF_HF_EVENT_BES_TEST = 47,
>     BTIF_HF_EVENT_SELECT_CHANNEL = 48,
>     BTIF_HF_EVENT_RFCOMM_CONNECTED = 49,
>     BTIF_HF_EVENT_REMOTE_NOT_SUPPORT = 50,
>     BTIF_HF_EVENT_AUDIO_MOCK_CONNECTED = 51,
>     BTIF_HF_EVENT_AUDIO_MOCK_DISCONNECTED = 52,
>     BTIF_HF_EVENT_SERVICE_MOCK_CONNECTED = 53,
185,186c186,190
<     uint32_t speaker_volume;
<     uint32_t voice_rec_state;
---
>     uint8_t speaker_volume;
>     uint8_t mic_volume;
>     uint8_t bsir_enable;
>     uint8_t voice_rec_state;
>     uint8_t ciev_status;
189a194
>     uint8_t sco_codec;
199c204
< typedef void (*hf_event_cb_t) (hf_chan_handle_t chan, struct hfp_context * ctx);
---
> typedef void (*hf_event_cb_t) (uint8_t device_id, btif_hf_channel_t* chan, struct hfp_context * ctx);
204a210,238
>     struct btif_hf_cind_value {
>         uint8_t index;
>         uint8_t min;
>         uint8_t max;
>         uint8_t value;
>         bool initial_support;
>     };
>     
> #ifdef USE_BT_ADAPTER
>     void btif_hfp_register_user_event_callback(hf_event_cb_t cb);
>     hf_event_cb_t btif_hfp_get_user_event_callback(void);
> #endif
> 
>     struct btif_hf_cind_value btif_hf_get_cind_service_value(btif_hf_channel_t* chan_h);
> 
>     struct btif_hf_cind_value btif_hf_get_cind_call_value(btif_hf_channel_t* chan_h);
> 
>     struct btif_hf_cind_value btif_hf_get_cind_callsetup_value(btif_hf_channel_t* chan_h);
> 
>     struct btif_hf_cind_value btif_hf_get_cind_callheld_value(btif_hf_channel_t* chan_h);
> 
>     struct btif_hf_cind_value btif_hf_get_cind_signal_value(btif_hf_channel_t* chan_h);
> 
>     struct btif_hf_cind_value btif_hf_get_cind_roam_value(btif_hf_channel_t* chan_h);
> 
>     struct btif_hf_cind_value btif_hf_get_cind_battchg_value(btif_hf_channel_t* chan_h);
> 
>     uint32_t btif_hf_get_ag_features(btif_hf_channel_t *chan_h);
> 
211,212d244
<     int hfp_hfcommand_mempool_init(void);
< 
217c249,253
<     hf_gateway_version btif_hf_get_version(hf_chan_handle_t chan_h);
---
>     int btif_ag_register_callback(hf_event_cb_t callback);
> 
>     hf_gateway_version btif_hf_get_version(btif_hf_channel_t* chan_h);
> 
>     bt_status_t btif_hf_update_indicators_batt_level(btif_hf_channel_t* chan_h, uint32_t level);
219c255
<     bt_status_t btif_hf_update_indicators_batt_level(hf_chan_handle_t chan_h, uint8_t assigned_num, uint8_t level);
---
>     bt_status_t btif_hf_batt_report(btif_hf_channel_t* chan_h, uint8_t level);
221c257
<     bt_status_t btif_hf_batt_report(hf_chan_handle_t chan_h, uint8_t level);
---
>     bt_status_t btif_hf_report_enhanced_safety(btif_hf_channel_t* chan_h, uint8_t value);
223c259
<     bt_status_t btif_hf_siri_report(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_enable_voice_recognition(btif_hf_channel_t* chan_h, bool en);
225c261
<     bt_status_t btif_hf_enable_voice_recognition(hf_chan_handle_t chan_h, bool en);
---
>     bt_status_t btif_hf_batt_report(btif_hf_channel_t* chan_h, uint8_t level);
227c263
<     bt_status_t btif_hf_batt_report(hf_chan_handle_t chan_h, uint8_t level);
---
>     bool btif_hf_is_voice_rec_active(btif_hf_channel_t* chan_h);
229c265
<     bool btif_hf_is_voice_rec_active(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_disable_nrec(btif_hf_channel_t* chan_h);
231c267
<     bt_status_t btif_hf_disable_nrec(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_report_speaker_volume(btif_hf_channel_t* chan_h, uint8_t gain);
233c269
<     bt_status_t btif_hf_report_speaker_volume(hf_chan_handle_t chan_h, uint8_t gain);
---
>     bt_status_t btif_hf_send_at_cmd(btif_hf_channel_t* chan_h, const char *at_str);
235c271
<     bt_status_t btif_hf_send_at_cmd(hf_chan_handle_t chan_h, const char *at_str);
---
>     bt_status_t btif_hf_list_current_calls(btif_hf_channel_t* chan_h);
237c273
<     bt_status_t btif_hf_list_current_calls(hf_chan_handle_t chan_h);
---
>     bool btif_hf_is_hf_indicators_support(btif_hf_channel_t* chan_h);
239c275
<     bool btif_hf_is_hf_indicators_support(hf_chan_handle_t chan_h);
---
>     bool btif_hf_is_batt_report_support(btif_hf_channel_t* chan_h);
241c277
<     bool btif_hf_is_batt_report_support(hf_chan_handle_t chan_h);
---
>     bool btif_hf_is_sco_wait_codec_sync(btif_hf_channel_t* chan_h);
243c279
<     bt_status_t btif_hf_force_disconnect_sco(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_force_disconnect_sco(btif_hf_channel_t* chan_h);
245c281
<     void btif_hf_set_negotiated_codec(hf_chan_handle_t chan_h, hfp_sco_codec_t codec);
---
>     void btif_hf_set_negotiated_codec(btif_hf_channel_t* chan_h, hfp_sco_codec_t codec);
247c283
<     hfp_sco_codec_t btif_hf_get_negotiated_codec(hf_chan_handle_t chan_h);
---
>     hfp_sco_codec_t btif_hf_get_negotiated_codec(btif_hf_channel_t* chan_h);
249c285
<     bt_status_t btif_hf_answer_call(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_answer_call(btif_hf_channel_t* chan_h);
251c287
<     bt_status_t btif_hf_hang_up_call(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_hang_up_call(btif_hf_channel_t* chan_h);
253c289
<     bt_status_t btif_hf_redial_call(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_redial_call(btif_hf_channel_t* chan_h);
255c291
<     bt_status_t btif_hf_dial_number(hf_chan_handle_t chan_h, uint8_t *number, uint16_t len);
---
>     bt_status_t btif_hf_dial_number(btif_hf_channel_t* chan_h, uint8_t *number, uint16_t len);
257c293
<     bt_status_t btif_hf_disc_audio_link(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_disc_audio_link(btif_hf_channel_t* chan_h);
259c295
<     bt_status_t btif_hf_create_audio_link(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_create_audio_link(btif_hf_channel_t* chan_h);
261c297,299
<     bt_status_t btif_hf_call_hold(hf_chan_handle_t chan_h, btif_hf_hold_call_t action,
---
>     bt_status_t btif_hf_create_sco_directly(btif_hf_channel_t* chan_h);
> 
>     bt_status_t btif_hf_call_hold(btif_hf_channel_t* chan_h, btif_hf_hold_call_t action,
263,264c301,302
<     bt_status_t btif_hf_switch_calls(hf_chan_handle_t hangup_chan_h,
<                                      hf_chan_handle_t answer_chan_h);
---
>     bt_status_t btif_hf_switch_calls(btif_hf_channel_t* hangup_chan_h,
>                                      btif_hf_channel_t* answer_chan_h);
266c304
<     hf_chan_handle_t btif_get_hf_chan_by_address(bt_bdaddr_t *bdaddr);
---
>     btif_hf_channel_t* btif_get_hf_chan_by_address(bt_bdaddr_t *bdaddr);
268c306
<     uint8_t btif_get_hf_chan_audio_up_flag(hf_chan_handle_t chan_h);
---
>     uint8_t btif_get_hf_chan_audio_up_flag(btif_hf_channel_t* chan_h);
270c308
<     btif_hf_chan_state_t btif_get_hf_chan_state(hf_chan_handle_t chan_h);
---
>     btif_hf_chan_state_t btif_get_hf_chan_state(btif_hf_channel_t* chan_h);
272c310
<     bool btif_hf_check_AudioConnect_status(hf_chan_handle_t chan_h);
---
>     bool btif_hf_check_AudioConnect_status(btif_hf_channel_t* chan_h);
274c312
<     hf_chan_handle_t btif_hf_create_channel(void);
---
>     btif_hf_channel_t* btif_hf_alloc_channel(void);
276c314
<     int btif_hf_init_channel(hf_chan_handle_t chan_h);
---
>     btif_hf_channel_t* btif_ag_alloc_channel(void);
278c316
<     bt_status_t btif_hf_disconnect_service_link(hf_chan_handle_t chan_h);
---
>     int btif_hf_init_channel(btif_hf_channel_t* chan_h);
280c318
<     bt_status_t btif_hf_create_service_link(hf_chan_handle_t chan_h, bt_bdaddr_t * bt_addr);
---
>     bt_status_t btif_hf_disconnect_service_link(btif_hf_channel_t* chan_h);
282c320
<     btif_cmgr_handler_t *btif_hf_get_chan_manager_handler(hf_chan_handle_t chan_h);
---
>     bt_status_t btif_hf_create_service_link(bt_bdaddr_t * bt_addr);
284c322
<     bt_status_t btif_hfp_switch_sco(hf_chan_handle_t chan_h);
---
>     btif_cmgr_handler_t *btif_hf_get_chan_manager_handler(btif_hf_channel_t* chan_h);
286c324
<     bt_status_t btif_hf_set_master_role(hf_chan_handle_t chan_h, bool role);
---
>     bt_status_t btif_hfp_switch_sco(btif_hf_channel_t* chan_h);
288c326
<     bt_status_t btif_hf_enable_sniff_mode(hf_chan_handle_t chan_h, bool enable);
---
>     bt_status_t btif_hf_set_master_role(btif_hf_channel_t* chan_h, bool role);
290c328
<     bool btif_hf_get_remote_bdaddr(hf_chan_handle_t chan_h, bt_bdaddr_t *bdaddr_p);
---
>     bt_status_t btif_hf_enable_sniff_mode(btif_hf_channel_t* chan_h, bool enable);
292c330
<     uint16_t btif_hf_get_sco_hcihandle(hf_chan_handle_t chan_h);
---
>     bool btif_hf_get_remote_bdaddr(btif_hf_channel_t* chan_h, bt_bdaddr_t *bdaddr_p);
294c332
<     btif_hci_handle_t btif_hf_get_remote_hci_handle(hf_chan_handle_t chan_h);
---
>     void btif_hfp_register_peer_sco_codec_receive_handler(void (*cb)(uint8_t device_id,void * chan,uint8_t codec));
296c334
<     bool btif_hf_is_acl_connected(hf_chan_handle_t chan_h);
---
>     void btif_hf_receive_peer_sco_codec_info(const void* remote, uint8_t codec);
298c336
<     btif_remote_device_t *btif_hf_cmgr_get_remote_device(hf_chan_handle_t chan_h);
---
>     void btif_hf_register_sco_codec_info_sync_handler(void (*cb)(const void* remote, uint8_t codec));
300c338
<     bool btif_hf_check_rfcomm_l2cap_channel_is_creating(bt_bdaddr_t *bdaddr);
---
>     uint16_t btif_hf_get_sco_hcihandle(btif_hf_channel_t* chan_h);
302c340
<     bt_status_t btif_hf_send_audio_data(hf_chan_handle_t chan_h, btif_bt_packet_t *packet);
---
>     btif_hci_handle_t btif_hf_get_remote_hci_handle(btif_hf_channel_t* chan_h);
304c342
<     bt_status_t btif_hf_is_inbandring_enabled(hf_chan_handle_t chan_h);
---
>     bool btif_hf_is_acl_connected(btif_hf_channel_t* chan_h);
306c344,350
<     uint32_t btif_hfp_profile_save_ctx(btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
---
>     btif_remote_device_t *btif_hf_cmgr_get_remote_device(btif_hf_channel_t* chan_h);
> 
>     bool btif_hf_check_rfcomm_l2cap_channel_is_creating(bt_bdaddr_t *bdaddr);
> 
>     btif_remote_device_t *btif_hf_cmgr_get_remote_device(btif_hf_channel_t* chan_h);
> 
>     bt_status_t btif_hf_send_audio_data(btif_hf_channel_t* chan_h, btif_bt_packet_t *packet);
308c352,353
<     uint32_t btif_hfp_profile_restore_ctx(uint8_t *buf, uint32_t buf_len);
---
>     bt_status_t btif_hf_is_inbandring_enabled(btif_hf_channel_t* chan_h);
>     bool btif_hfp_is_profile_initiator(bt_bdaddr_t* remote);
310a356,357
>     uint32_t btif_hfp_profile_save_ctx(btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
>     uint32_t btif_hfp_profile_restore_ctx(bt_bdaddr_t *bdaddr_p, uint8_t *buf, uint32_t buf_len);
313c360,361
<     btif_hf_chan_state_t btif_hfp_profile_channel_state(uint8_t bt_device_id);
---
>     bool btif_hfp_profile_connecting(bt_bdaddr_t *bdaddr_p);
>     bt_status_t btif_hfp_force_disconnect_hfp_profile(uint8_t device_id,uint8_t reason);
316,333c364,447
<     bt_status_t btif_hf_indicators_1(hf_chan_handle_t chan_h);
<     bt_status_t btif_hf_indicators_2(hf_chan_handle_t chan_h);
<     bt_status_t btif_hf_indicators_3(hf_chan_handle_t chan_h);
< 
< #if defined(HFP_MOBILE_AG_ROLE)
<     bt_status_t btif_ag_create_service_link(hf_chan_handle_t chan_h, bt_bdaddr_t * bt_addr);
<     bt_status_t btif_ag_disconnect_service_link(hf_chan_handle_t chan_h);
<     bt_status_t btif_ag_create_audio_link(hf_chan_handle_t chan_h);
<     bt_status_t btif_ag_disc_audio_link(hf_chan_handle_t chan_h);
<     bt_status_t btif_ag_send_call_active_status(hf_chan_handle_t chan_h, bool active);
<     bt_status_t btif_ag_send_callsetup_status(hf_chan_handle_t chan_h, uint8_t status);
<     bt_status_t btif_ag_send_callheld_status(hf_chan_handle_t chan_h, uint8_t status);
<     bt_status_t btif_ag_send_calling_ring(hf_chan_handle_t chan_h, const char* number);
<     bt_status_t btif_ag_set_speaker_gain(hf_chan_handle_t chan_h, uint8_t volume);
<     bt_status_t btif_ag_set_microphone_gain(hf_chan_handle_t chan_h, uint8_t volume);
<     bt_status_t btif_ag_send_result_code(hf_chan_handle_t chan_h, const char *data, int len);
<     bt_status_t btif_ag_register_mobile_module(hf_chan_handle_t chan_h, struct hfp_mobile_module_handler* handler);
< #endif
---
>     bt_status_t btif_hf_indicators_1(btif_hf_channel_t* chan_h);
>     bt_status_t btif_hf_indicators_2(btif_hf_channel_t* chan_h);
>     bt_status_t btif_hf_indicators_3(btif_hf_channel_t* chan_h);
> 
>     struct btif_ag_call_info
>     {
>         uint8_t direction; // 0 outgoing, 1 incoming
>         uint8_t state; // 0 active, 1 held, 2 outgoing dialing, 3 outgoing alerting, 4 incoming, 5 waiting, 6 held by Response and Hold
>         uint8_t mode; // 0 voice, 1 data, 2 fax
>         uint8_t multiparty; // 0 is not one of multiparty call parties, 1 is one of.
>         const char* number; // calling number, optional
>     };
> 
>     typedef int (*btif_ag_handler)(btif_hf_channel_t *chan);
> 
>     typedef int (*btif_ag_handler_int)(btif_hf_channel_t *chan, int n);
> 
>     typedef int (*btif_ag_handler_str)(btif_hf_channel_t *chan, const char* s);
> 
>     typedef int (*btif_ag_iterate_call_handler)(btif_hf_channel_t *chan, struct btif_ag_call_info* out);
> 
>     typedef const char* (*btif_ag_query_operator_handler)(btif_hf_channel_t *chan);
> 
>     struct btif_ag_module_handler
>     {
>         btif_ag_handler answer_call;
>         btif_ag_handler hungup_call;
>         btif_ag_handler dialing_last_number;
>         btif_ag_handler release_held_calls;
>         btif_ag_handler release_active_and_accept_calls;
>         btif_ag_handler hold_active_and_accept_calls;
>         btif_ag_handler add_held_call_to_conversation;
>         btif_ag_handler connect_remote_two_calls;
>         btif_ag_handler disable_mobile_nrec;
>         btif_ag_handler_int release_specified_active_call;
>         btif_ag_handler_int hold_all_calls_except_specified_one;
>         btif_ag_handler_int hf_battery_change; /* battery level 0 ~ 100 */
>         btif_ag_handler_int hf_spk_gain_change; /* speaker gain 0 ~ 15 */
>         btif_ag_handler_int hf_mic_gain_change; /* mic gain 0 ~ 15 */
>         btif_ag_handler_int transmit_dtmf_code;
>         btif_ag_handler_int memory_dialing_call;
>         btif_ag_handler_str dialing_call;
>         btif_ag_handler_str handle_at_command;
>         btif_ag_query_operator_handler query_current_operator;
>         btif_ag_iterate_call_handler iterate_current_call;
>     };
> 
>     bt_status_t btif_ag_create_service_link(btif_hf_channel_t* chan_h, bt_bdaddr_t * bt_addr);
> 
>     bt_status_t btif_ag_disconnect_service_link(btif_hf_channel_t* chan_h);
> 
>     bt_status_t btif_ag_create_audio_link(btif_hf_channel_t* chan_h);
> 
>     bt_status_t btif_ag_disc_audio_link(btif_hf_channel_t* chan_h);
> 
>     bt_status_t btif_ag_send_service_status(btif_hf_channel_t* chan_h, bool enabled);
> 
>     bt_status_t btif_ag_send_call_active_status(btif_hf_channel_t* chan_h, bool active);
> 
>     bt_status_t btif_ag_send_callsetup_status(btif_hf_channel_t* chan_h, uint8_t status);
> 
>     bt_status_t btif_ag_send_callheld_status(btif_hf_channel_t* chan_h, uint8_t status);
> 
>     bt_status_t btif_ag_send_mobile_signal_level(btif_hf_channel_t* chan_h, uint8_t level);
> 
>     bt_status_t btif_ag_send_mobile_roam_status(btif_hf_channel_t* chan_h, bool enabled);
> 
>     bt_status_t btif_ag_send_mobile_battery_level(btif_hf_channel_t* chan_h, uint8_t level);
> 
>     bt_status_t btif_ag_send_calling_ring(btif_hf_channel_t* chan_h, const char* number);
> 
>     bt_status_t btif_ag_set_speaker_gain(btif_hf_channel_t* chan_h, uint8_t volume);
> 
>     bt_status_t btif_ag_set_inband_ring_tone(btif_hf_channel_t* chan_h, bool enabled);
> 
>     bt_status_t btif_ag_set_last_dial_number(btif_hf_channel_t* chan_h, bool enabled);
> 
>     bt_status_t btif_ag_set_microphone_gain(btif_hf_channel_t* chan_h, uint8_t volume);
> 
>     bt_status_t btif_ag_send_call_waiting_notification(btif_hf_channel_t* chan_h, const char* number);
> 
>     bt_status_t btif_ag_send_result_code(btif_hf_channel_t* chan_h, const char *data, int len);
> 
>     bt_status_t btif_ag_register_module_handler(btif_hf_channel_t* chan_h, struct btif_ag_module_handler* handler);
