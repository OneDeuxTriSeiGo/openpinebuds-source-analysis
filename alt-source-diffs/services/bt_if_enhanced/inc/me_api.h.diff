local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/bt_if_enhanced/inc/me_api.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/bt_if_enhanced/inc/me_api.h
diff -sw local remote
---

1,8c1,5
< /***************************************************************************
<  *
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
<  *
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
10,13c7
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
15,16c9,14
<  ****************************************************************************/
< 
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
42c40
< #define BTIF_BTEVENT_LINK_CON_RESTRICT    8
---
> #define BTIF_BTEVENT_ROLE_DISCOVERED      8
246c244
< #define BTIF_BEM_LINK_CON_RESTRICT            0x00000080
---
> #define BTIF_BEM_ROLE_DISCOVERED              0x00000080
324d321
< 
326a324,328
> //BES vendor error code
> #define BTIF_BEC_BT_LINK_REAL_DISCONNECTED 0xb8
> #define BTIF_BEC_BT_CANCEL_PAGE       0xb9
> #define BTIF_BEC_BT_DISCONNECT_ITSELF 0xba
> 
447,451c449
< typedef void btif_remote_device_t;
< 
< 
< typedef void btif_BtDeviceContext;
< 
---
> typedef struct { /* empty */ } btif_remote_device_t; /* used to hold the pointer to btm_conn_item_t */
454c452
< typedef void btif_event_t;
---
> typedef struct { /* empty */ } btif_event_t; /* used to hold the pointer to event */
456c454
< typedef void (*btif_callback) (const void *);
---
> typedef void (*btif_callback) (const btif_event_t *);
494a493
> 
508a508
> 
638a639,642
> //RX filter typpe
> #define BTIF_BTM_RX_FILTER_HCI_TYPE   (0x01)
> #define BTIF_BTM_RX_FILTER_L2C_TYPE   (0x02)
> 
744c748,749
<     BOOL trusted;
---
>     bool trusted;
>     bool for_bt_source;
747d751
< 
748a753,759
> #ifdef _SUPPORT_REMOTE_COD_
>     uint8_t cod[3];
> #endif
> #ifdef LINK_KEY_ENCRYPT_BY_CUSTOMER
>     uint8_t encryptlinkKey[32];
>     uint8_t encryptrandom[12];
> #endif
820a832,837
> struct dbg_send_prefer_rate
> {
>     uint16_t conhdl;
>     uint8_t rate;
> };
> 
926a944,950
>         /* Information for BTEVENT_CONN_PACKET_TYPE_CHNG */
>         struct
>         {
>             U16 connHandle;
>             U16 packetType;
>         } packetTypeChanged;
> 
1030a1055
>             U8 device_id;
1049a1075
>             U8      device_id;  /* Belong device id */
1106a1133
>             uint8_t name[248];
1121c1148
< typedef void (*ibrt_disconnect_callback)(const void *event);
---
> typedef void (*ibrt_disconnect_callback)(const btif_event_t *event);
1134a1162
> uint16_t btif_me_get_conhandle_by_remote_address(bt_bdaddr_t *addr);
1157a1186,1188
> bt_status_t btif_me_ble_read_chnle_map(uint16_t conn_handle);
> bt_status_t btif_me_ble_set_host_chnl_classification(uint8_t *chnl_map);
> 
1174a1206
> uint8_t btif_me_reset_this_device_to_source(uint8_t device_id);
1179a1212,1213
> uint8_t btif_me_get_source_activeCons(void);
> 
1184c1218,1221
<     btif_remote_device_t *btif_me_get_callback_event_rem_dev(const btif_event_t * event);
---
> void btif_me_reset_l2cap_sigid(void *addr);
> 
> uint8_t btif_me_get_callback_event_max_slot(const btif_event_t *event);
> uint16_t btif_me_get_callback_event_packet_type(const btif_event_t * event);
1186c1223
<     btif_BtDeviceContext* btif_me_get_bt_device_context(const btif_event_t * event);
---
> btif_remote_device_t *btif_me_get_callback_event_rem_dev(const btif_event_t * event);
1192a1230
> bt_bdaddr_t *btif_me_get_callback_event_name_rsp_bd_addr(const btif_event_t * event);
1236a1275
> void btif_me_set_bt_source_event_handler(btif_handler *handler);
1238a1278
> void btif_me_register_sco_request_handler(bool (*cb)(uint8_t device_id, const uint8_t *remote));
1270,1271d1309
< 
<     void btif_me_sec_set_io_cap_rsp_reject_ext(BOOL(*ext_fn) (void *));
1288c1326
<     void btif_me_update_cmgr_info(void *cmgr_handler,btif_BtDeviceContext* bt_device_context,btif_remote_device_t * rdev);
---
> void btif_register_remote_is_mobile_func(bool (*cb)(void* remote));
1294a1333,1337
> bool btif_me_get_remote_dip_queried(btif_remote_device_t *rdev);
> void btif_me_set_remote_dip_queried(btif_remote_device_t *rdev, bool queried);
> bool btif_me_is_remote_dip_query_on_going(btif_remote_device_t *rdev);
> void btif_me_set_remote_dip_query_state(btif_remote_device_t *rdev, bool isInQuery);
> 
1298a1342,1346
> void btif_me_register_snoop_acl_connection_callback(void (*conn)(uint8_t device_id, void* remote, void* btm_conn), void (*disc)(uint8_t device_id, void* remote));
> 
> void btif_me_register_check_to_accept_new_sco_callback(void (*cb)(uint8_t));
> 
> void btif_me_register_pending_too_many_rx_acl_packets_callback(void (*cb)(void));
1300a1349,1352
> bool btif_me_wait_acl_complete(void* remote, void (*cb)(uint8_t device_id, void* remote, bool succ, uint8_t errcode));
> 
> uint8_t btif_me_get_device_id_from_addr(bt_bdaddr_t *addr);
> uint8_t btif_me_get_device_id_from_rdev(btif_remote_device_t *rdev);
1302a1355,1363
> 
> void btif_me_set_creating_source_link(const bt_bdaddr_t *remote, bool mark_as_source);
> bool btif_me_is_creating_source_link(const void *remote);
> 
> void btif_me_set_accepting_source_link(bool set_source_link);
> bool btif_me_is_accepting_source_link(const bt_bdaddr_t *remote);
> 
> void btif_me_register_is_creating_source_link(bool (*cb)(const void *remote));
> 
1311a1373,1382
> bool btif_me_is_in_sniff_mode(bt_bdaddr_t *remote);
> bool btif_me_is_in_active_mode(bt_bdaddr_t *remote);
> 
> void btif_me_set_conn_tws_link(void *conn, uint8_t is_tws_link);
> bool btif_me_get_conn_tws_link(void *conn);
> bt_status_t btif_me_bt_dbg_send_prefer_rate(uint16_t conhdl,uint8_t rate);
> bt_status_t btif_me_bt_dbg_set_txpwr_link_thd(uint8_t index, uint8_t enable,uint8_t link_id,
>     uint16_t rssi_avg_nb_pkt, int8_t rssi_high_thd, int8_t rssi_low_thd, int8_t rssi_below_low_thd, int8_t rssi_interf_thd);
> bt_status_t btif_me_read_avg_rssi(uint16_t connhld);
> 
1312a1384,1390
> bt_status_t btif_me_qos_setup_with_tpoll(uint16_t conn_handle, uint32_t tpoll_slot);
> #define QOS_SETUP_SERVICE_TYPE_NO_TRAFFIC       0x00
> #define QOS_SETUP_SERVICE_TYPE_BEST_EFFORT      0x01
> #define QOS_SETUP_SERVICE_TYPE_GUARANTEED       0x02
> 
> bt_status_t btif_me_qos_setup_with_tpoll_generic(uint16_t conn_handle, uint32_t tpoll_slot, uint8_t service_type);
> 
1314a1393,1410
> 
> /**
>  ****************************************************************************************
>  * @brief bt set channel classification map which related Set AFH Host Channel Classification command
>  * AFH_Host_Channel_Classification: Size: 10 octets (79 bits meaningful)
>  * This parameter contains 80 1-bit fields
>  * The nth such field (in the range 0 to 78) contains the value for channel n:
>  *    0: channel n is bad
>  *    1: channel n is unknown
>  *
>  * The most significant bit (bit 79) is reserved for future use
>  * At least (Nmin == 20) channels shall be marked as unknown.
>  *
>  * default all bits value is 1
>  ****************************************************************************************
>  */
> bt_status_t  btif_me_set_afh_chnl_classification(uint8_t *chnl_map);
> 
1328c1424
<     bt_status_t btif_me_stop_ibrt(uint8_t enable,uint8_t reason);
---
> bt_status_t btif_me_stop_ibrt(uint16_t mobile_conhdl,uint8_t reason);
1329a1426
> bt_status_t btif_me_set_fix_tws_interval_param(uint16_t duration, uint16_t interval, uint16_t interval_in_sco);
1331c1428
<     bt_status_t btif_me_ibrt_role_switch(uint8_t switch_op);
---
> bt_status_t btif_me_ibrt_role_switch(uint16_t mobile_conhdl);
1333,1339c1430,1433
<     void btif_me_set_ibrt_mobile_hci_handle(uint16_t hci_handle);
<     uint16_t btif_me_get_ibrt_mobile_hci_handle(void);
< 
<     void btif_me_set_devctx_state(uint8_t ctx_idx, uint16_t state);
<     void btif_me_set_devctx_link(uint8_t ctx_idx, btif_remote_device_t * rm_dev);
<     bt_bdaddr_t*  btif_me_get_devctx_btaddr(uint8_t ctx_idx);
<     btif_remote_device_t* btif_me_get_remote_device(uint8_t dev_index);
---
> void btif_me_set_devctx_state(uint8_t acl_array_idx, uint16_t state);
> void btif_me_set_devctx_link(uint8_t acl_array_idx, btif_remote_device_t * rm_dev);
> bt_bdaddr_t*  btif_me_get_devctx_btaddr(uint8_t acl_array_idx);
> btif_remote_device_t* btif_me_get_remote_device(uint8_t acl_array_idx);
1341,1342c1435
<     btif_remote_device_t*  btif_me_get_devctx_remote_device(uint8_t ctx_idx);
<     btif_remote_device_t * btif_me_avdev_ctx_get_conn_remote_device(uint8_t dev_idx);
---
> btif_remote_device_t*  btif_me_get_devctx_remote_device(uint8_t acl_array_idx);
1361,1363c1454,1456
<     void btif_me_register_conn_req_pre_treatment_callback(btif_callback cb);
<     void btif_me_register_cmd_status_callback(btif_callback cb);
<     void btif_me_register_cmd_complete_callback(HCI_CMD_COMPLETE_USER_E index,btif_callback cb);
---
> void btif_me_register_cmd_status_callback(void (*cb)(const void *para));
> void btif_me_register_get_ibrt_handle_callback(uint16_t (*cb)(void* remote));
> void btif_me_register_cmd_complete_callback(HCI_CMD_COMPLETE_USER_E index, void (*cb)(const btif_event_t *para));
1369a1463,1466
> uint16_t btif_me_get_ibrt_hci_handle(bt_bdaddr_t *bd_addr);
> void btif_btm_register_ibrt_rx_data_filter_callback(bool (*cb)(const void* addr,uint8_t rx_filter_type,void*para));
> void btif_me_configure_keeping_both_scan(bool isToKeepBothScan);
> 
