local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/bt_if_enhanced/inc/spp_api.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/bt_if_enhanced/inc/spp_api.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,16c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
< 
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
19c17
< 
---
> #include "btapp.h"
25,26c23,27
< #define SPP_DEVICE_NUM      6
< #define SPP_SERVICE_NUM     6
---
> #define SPP_DEVICE_NUM      (SPP_SERVICE_NUM*BT_DEVICE_NUM)
> 
> #ifndef SPP_SERVICE_NUM
> #define SPP_SERVICE_NUM 5
> #endif
41a43,44
> #define BTIF_SPP_MAXIMUM_CREDIT_LIMIT    4
> 
75c78
< typedef void (*spp_callback_t)(struct spp_device *locDev,
---
> typedef void (*spp_callback_t)(uint8_t device_id, struct spp_device *locDev,
78c81
< typedef int (*spp_handle_data_event_func_t)(void *pDev, uint8_t process, uint8_t *pData, uint16_t dataLen);
---
> typedef int (*spp_handle_data_event_func_t)(uint8_t device_id, void *pDev, uint8_t process, uint8_t *pData, uint16_t dataLen);
86a90,94
> typedef struct {
>     uint8_t len;
>     const uint8_t *pdata;
> } rfcomm_uuid_t;
> 
89c97,98
<     uint32_t        app_id;
---
>     uint64_t        app_id;
>     rfcomm_uuid_t   rfcomm_uuid;
97c106
<     spp_callback_t  spp_callback;
---
>     spp_callback_t  spp_app_callback;
104a114
>     uint8_t         device_id;
110a121
> #ifndef container_of
113a125
> #endif
118a131,134
> void btif_spp_server_register_accept_channel_callback(bool (*cb)(uint8_t device_id, uint32_t rfcomm_handle, const void* remote, uint8_t server_channel));
> struct spp_device *btif_spp_get_device_from_addr(const void* remote, uint64_t app_id);
> struct spp_service *btif_spp_find_registered_service(uint8_t service_id);
> 
130c146
< bt_status_t btif_spp_disconnect(struct spp_device *dev);
---
> bt_status_t btif_spp_disconnect(struct spp_device *dev,uint8_t reason);
139c155
<                         btif_remote_device_t  *btDevice,
---
>                         bt_bdaddr_t  *remote,
144c160
< struct spp_device *btif_spp_get_device(uint32_t app_id);
---
> struct spp_device *btif_spp_get_device(uint64_t app_id);
147c163
< uint32_t btif_spp_get_app_id(struct spp_device *dev);
---
> uint64_t btif_spp_get_app_id(struct spp_device *dev);
152c168
< typedef void (*btif_bt_spp_app_callback_func)(void* spp_devi, void* spp_para);
---
> typedef void (*btif_bt_spp_app_callback_func)(uint8_t device_id, void* spp_devi, void* spp_para);
154,155d169
< uint32_t btif_spp_profile_save_ctx(uint32_t app_id,btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
< uint32_t btif_spp_profile_restore_ctx(uint8_t *buf, uint32_t buf_len);
156a171,178
> #if defined(IBRT)
> uint32_t btif_spp_profile_save_ctx(uint64_t app_id,btif_remote_device_t *rem_dev, uint8_t *buf, uint32_t buf_len);
> uint32_t btif_spp_profile_restore_ctx(bt_bdaddr_t *bdaddr_p, uint8_t *buf, uint32_t buf_len);
> void btif_spp_force_disconnect_spp_profile(bt_bdaddr_t *addr,uint64_t app_id,uint8_t reason);
> bool btif_is_this_spp_connected(uint64_t app_id,btif_remote_device_t *rem_dev);
> #endif
> 
> uint16_t btif_spp_get_rfcomm_framesize(struct spp_device *dev);
171a194,204
>     RFCOMM_CHANNEL_11,
>     RFCOMM_CHANNEL_12,
>     RFCOMM_CHANNEL_13,
>     RFCOMM_CHANNEL_14,
>     RFCOMM_CHANNEL_15,
>     RFCOMM_CHANNEL_16,
>     RFCOMM_CHANNEL_17,
>     RFCOMM_CHANNEL_18,
>     RFCOMM_CHANNEL_19,
>     RFCOMM_CHANNEL_20,
>     RFCOMM_CHANNEL_21,
