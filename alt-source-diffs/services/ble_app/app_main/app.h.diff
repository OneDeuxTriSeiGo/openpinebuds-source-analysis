local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/ble_app/app_main/app.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/ble_app_v2/app_main/app.h
diff -sw local remote
---

1,15c1,14
< /***************************************************************************
<  *
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
<  *
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
>  *
>  *     http://www.apache.org/licenses/LICENSE-2.0
>  *
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
35a35,37
> #include "app_ble_mode_switch.h"
> #include "app_ble_param_config.h"
> #include "co_bt_defines.h"
40c42
< #include <co_bt.h>           // Common BT Definitions
---
> //#include <co_bt.h>           // Common BT Definitions
42,43c44,47
< #include "gapc.h"            // GAPC Definitions
< #include "gapm_task.h"
---
> #include "gapc_msg.h"       // GAPC Definitions
> #include "gapm_msg.h" 
> #include "gap.h"
> 
57d60
< 
71a75,139
> #define INVALID_BLE_ACTIVITY_INDEX  0xFF
> 
> #define BLE_CONN_PARAM_SLAVE_LATENCY_CNT        0
> #define BLE_CONN_PARAM_SUPERVISE_TIMEOUT_MS     6000
> 
> /*
>  * MACROS
>  ****************************************************************************************
>  */
> 
> #define APP_HANDLERS(subtask)    {&subtask##_msg_handler_list[0], ARRAY_LEN(subtask##_msg_handler_list)}
> 
> /*
>  * ENUMERATIONS
>  ****************************************************************************************
>  */
> 
> 
> /// Activity state machine
> enum app_actv_state
> {
>     /// Activity does not exists
>     APP_ACTV_STATE_IDLE = 0,
> 
>     /// Creating advertising activity
>     APP_ADV_STATE_CREATING,
>     /// Setting advertising data
>     APP_ADV_STATE_SETTING_ADV_DATA,
>     /// Setting scan response data
>     APP_ADV_STATE_SETTING_SCAN_RSP_DATA,
> 
>     /// Starting advertising activity
>     APP_ADV_STATE_STARTING,
>     /// Advertising activity started
>     APP_ADV_STATE_STARTED,
>     /// Stopping advertising activity
>     APP_ADV_STATE_STOPPING,
>     /// Deleting advertising activity
>     APP_ADV_STATE_DELETING,
> 
>     /// Creating scanning activity
>     APP_SCAN_STATE_CREATING,        //8
>     /// Starting scanning activity
>     APP_SCAN_STATE_STARTING,
>     /// Scanning activity started
>     APP_SCAN_STATE_STARTED,
>     /// Stopping scanning activity
>     APP_SCAN_STATE_STOPPING,
>     /// Deleting scanning activity
>     APP_SCAN_STATE_DELETING,
> 
>     /// Creating connecting activity
>     APP_CONNECT_STATE_CREATING,     //13
>     /// Starting connecting activity
>     APP_CONNECT_STATE_STARTING,
>     /// Connecting activity started
>     APP_CONNECT_STATE_STARTED,
>     /// Stopping connecting activity
>     APP_CONNECT_STATE_STOPPING,
>     /// Deleting connecting activity
>     APP_CONNECT_STATE_DELETING,
> 
> };
> 
> 
75a144,153
> 
> /// Structure containing information about the handlers for an application subtask
> struct app_subtask_handlers
> {
>     /// Pointer to the message handler table
>     const struct ke_msg_handler *p_msg_handler_tab;
>     /// Number of messages handled
>     uint16_t msg_cnt;
> };
> 
84a163
>     BLE_CONN_PARAM_MODE_BLE_AUDIO,
97c176
< enum BLE_CONNECT_STATE {
---
> typedef enum BLE_CONNECT_STATE {
101c180
< };
---
> }BLE_CONNECT_STATE_E;
110,112d188
< #define BLE_CONN_PARAM_SLAVE_LATENCY_CNT        0
< #define BLE_CONN_PARAM_SUPERVISE_TIMEOUT_MS     6000
< 
117c193
<     uint8_t connectStatus;
---
>     BLE_CONNECT_STATE_E connectStatus;
126,127c202,207
<     uint16_t connInterval;
< 
---
>     /// ble connection param record
>     APP_BLE_CONN_PARAM_T connParam;
>     /// ble connection pending param
>     APP_BLE_CONN_PARAM_T connPendindParam;
>     /// ble connection param update times
>     uint8_t conn_param_update_times;
133a214,240
> 
>     enum app_actv_state state[BLE_ACTIVITY_MAX];
> 
>     /// Advertising activity index
>     uint8_t adv_actv_idx[BLE_ADV_ACTIVITY_USER_NUM];
>     /// Scanning activity index
>     uint8_t scan_actv_idx;
>     /// Connecting activity index
>     uint8_t connect_actv_idx;
> 
>     bool need_restart_adv;
>     bool need_update_adv;
>     bool need_set_rsp_data;
>     BLE_ADV_PARAM_T advParam;
> 
>     bool need_restart_scan;
>     uint16_t scanIntervalInMs;
>     uint16_t scanWindowInMs;
>     uint32_t scanFiltPolicy;
> 
>     bool need_restart_connect;
>     BLE_INIT_PARAM_T ble_init_param;
> 
>     bool need_set_white_list;
>     uint8_t white_list_size;
>     gap_bdaddr_t white_list_addr[8];
> 
146d252
< };
148,166c254
< // TODO: 
< typedef struct
< {
<    uint8_t role                         :2;
<    uint8_t earSide                      :1;
<    uint8_t isConnectedWithMobile        :1;
<    uint8_t isConnectedWithTWS           :1;
<    uint8_t reserved                     :3;
< }__attribute__((__packed__)) BLE_ADV_CURRENT_STATE_T;
< 
< typedef struct
< {
<     ///Connection interval value
<     uint16_t            con_interval;
<     ///Connection latency value
<     uint16_t            con_latency;
<     ///Supervision timeout
<     uint16_t            sup_to;
< } APP_BLE_NEGOTIATED_CONN_PARAM_T;
---
> };
203a292,298
>  * @brief Add the bdaddr to white list
>  ****************************************************************************************
>  */
> void appm_set_white_list(gap_bdaddr_t *bdaddr, uint8_t size);
> 
> /**
>  ****************************************************************************************
210a306,312
>  * @brief
>  ****************************************************************************************
>  */
> void appm_actv_fsm_next(uint8_t actv_idx, uint8_t status);
> 
> /**
>  ****************************************************************************************
214c316
< void appm_stop_advertising(void);
---
> void appm_stop_advertising(uint8_t actv_idx);
240a343,344
> uint8_t appm_is_connected();
> 
262c366,379
< void app_ble_connected_evt_handler(uint8_t conidx, const uint8_t* pPeerBdAddress);
---
> void app_ble_connected_evt_handler(uint8_t conidx, gap_bdaddr_t *pPeerBdAddress);
> 
> 
> /**
>  ****************************************************************************************
>  * @brief delete advertising
>  *
>  * @param[in] none
>  ****************************************************************************************
>  */
> 
> void appm_delete_activity(uint8_t actv_idx);
> 
> void appm_update_actv_state(uint8_t actv_idx, enum app_actv_state newState);
277c394,398
< void app_ble_disconnected_evt_handler(uint8_t conidx);
---
> void app_ble_disconnected_evt_handler(uint8_t conidx, uint8_t errCode);
> 
> void app_connecting_stopped(gap_bdaddr_t *peer_addr);
> 
> bool appm_check_adv_activity_index(uint8_t actv_idx);
283c404
<                         uint8_t  slaveLantency);
---
>                         uint8_t  slaveLatency);
285c406
< void appm_start_connecting(struct gap_bdaddr* ptBdAddr);
---
> void appm_start_connecting(BLE_INIT_PARAM_T *init_param);
297c418
< void app_advertising_stopped(void);
---
> void app_advertising_stopped(uint8_t actv_idx);
299,301c420
< void app_advertising_starting_failed(void);
< 
< void app_adv_data_updated(void);
---
> void app_advertising_starting_failed(uint8_t actv_idx, uint8_t err_code);
305c424,426
< void app_scanning_starting_failed(void);
---
> void app_scanning_starting_failed(uint8_t actv_idx, uint8_t err_code);
> 
> void app_connecting_failed(uint8_t actv_idx, uint8_t err_code);
307c428
< void app_connecting_stopped(void);
---
> void app_ble_update_param_failed(uint8_t conidx, uint8_t errCode);
309c430
< void app_connecting_failed(void);
---
> void app_ble_update_param_successful(uint8_t conidx, APP_BLE_CONN_PARAM_T* pConnParam);
315,316d435
< void app_adv_reported_scanned(struct gapm_adv_report_ind* ptInd);
< 
323,325c442
< void app_advertising_started(void);
< 
< void app_connecting_stopped(void);
---
> void app_advertising_started(uint8_t actv_idx);
334a452,453
> uint8_t app_ble_get_actv_state(uint8_t actv_idx);
> 
369c488
< void app_ble_save_negotiated_conn_param(uint8_t conidx, APP_BLE_NEGOTIATED_CONN_PARAM_T* pConnParam);
---
> bool app_ble_get_conn_param(uint8_t conidx,  APP_BLE_CONN_PARAM_T* pConnParam);
371,374c490
< bool app_ble_get_connection_interval(uint8_t conidx,  APP_BLE_NEGOTIATED_CONN_PARAM_T* pConnParam);
< 
< void appm_update_adv_data(uint8_t* pAdvData, uint32_t advDataLen,
<     uint8_t* pScanRspData, uint32_t scanRspDataLen);
---
> void appm_update_adv_data(void *param);
383c499,501
< bool app_ble_is_parameter_mode_enabled(uint8_t conidx, BLE_CONN_PARAM_MODE_E mode);
---
> bool app_ble_is_connection_on_by_addr(uint8_t *addr);
> 
> void app_ble_set_white_list_complete(void);
385c503,511
< void app_ble_parameter_mode_clear(uint8_t conidx, BLE_CONN_PARAM_MODE_E mode);
---
> uint8_t* app_ble_get_peer_addr(uint8_t conidx);
> 
> bool app_ble_is_connection_on_by_index(uint8_t conidx);
> 
> void app_init_ble_name(const char *name);
> 
> void app_ble_on_bond_success(uint8_t conidx);
> 
> void app_ble_on_encrypt_success(uint8_t conidx, uint8_t pairing_lvl);
390d515
< 
