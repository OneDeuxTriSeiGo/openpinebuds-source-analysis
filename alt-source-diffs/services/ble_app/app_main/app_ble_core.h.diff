local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/services/ble_app/app_main/app_ble_core.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/521459d7e674ad3cf4d70b0faa3cb2cacd90f7b0/bes2600w/sdk_liteos/bsp/services/ble_app_v2/app_main/app_ble_core.h
diff -sw local remote
---

1,16c1,14
< /***************************************************************************
< *
< *Copyright 2015-2019 BES.
< *All rights reserved. All unpublished rights reserved.
< *
< *No part of this work may be used or reproduced in any form or by any
< *means, or stored in a database or retrieval system, without prior written
< *permission of BES.
< *
< *Use of this work is governed by a license granted by BES.
< *This work contains confidential and proprietary information of
< *BES. which is protected by copyright, trade secret,
< *trademark and other intellectual property rights.
< *
< ****************************************************************************/
< 
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
>  *
>  *     http://www.apache.org/licenses/LICENSE-2.0
>  *
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
20a19
> #include "app_ble_mode_switch.h"
31,33c30,46
<     BLE_DISCONNECT_EVENT,
<     BLE_CONN_PARAM_UPDATE_REQ_EVENT,
<     BLE_SET_RANDOM_BD_ADDR_EVENT,
---
>     BLE_CONNECT_BOND_EVENT              = 1,    //pairing success
>     BLE_CONNECT_NC_EXCH_EVENT           = 2,    //Numeric Comparison - Exchange of Numeric Value
>     BLE_CONNECT_ENCRYPT_EVENT           = 3,    //encrypt complete
>     BLE_CONNECTING_STOPPED_EVENT        = 4,
>     BLE_CONNECTING_FAILED_EVENT         = 5,
>     BLE_DISCONNECT_EVENT                = 6,
>     BLE_CONN_PARAM_UPDATE_REQ_EVENT     = 7,
>     BLE_CONN_PARAM_UPDATE_FAILED_EVENT  = 8,
>     BLE_CONN_PARAM_UPDATE_SUCCESSFUL_EVENT = 9,
>     BLE_SET_RANDOM_BD_ADDR_EVENT        = 10,
>     BLE_ADV_STARTED_EVENT               = 11,
>     BLE_ADV_STARTING_FAILED_EVENT       = 12,
>     BLE_ADV_STOPPED_EVENT               = 13,
>     BLE_SCAN_STARTED_EVENT              = 14,
>     BLE_SCAN_DATA_REPORT_EVENT          = 15,
>     BLE_SCAN_STARTING_FAILED_EVENT      = 16,
>     BLE_SCAN_STOPPED_EVENT              = 17,
37a51
> 
52,54d65
<     ble_evnet_type_e evt_type;
<     union {
<         struct {
56,58c67,70
<             const uint8_t *peer_bdaddr;
<         } connect_handled;
<         struct {
---
>     ble_bdaddr_t peer_bdaddr;
> } connect_handled_t;
> 
> typedef struct {
60,61c72,97
<         } disconnect_handled;
<         struct {
---
> } connect_bond_handled_t;
> 
> typedef struct {
>     uint8_t conidx;
> } connect_nc_exch_handled_t;
> 
> typedef struct {
>     uint8_t conidx;
>     uint8_t pairing_lvl;
> } connect_encrypt_handled_t;
> 
> typedef struct {
>     uint8_t peer_bdaddr[BTIF_BD_ADDR_SIZE];
> } stopped_connecting_handled_t;
> 
> typedef struct {
>     uint8_t actv_idx;
>     uint8_t err_code;
> } connecting_failed_handled_t;
> 
> typedef struct {
>     uint8_t conidx;
>     uint8_t errCode;
> } disconnect_handled_t;
> 
> typedef struct {
70,71c106,123
<         } conn_param_update_req_handled;
<         struct {
---
> } conn_param_update_req_handled_t;
> 
> typedef struct {
>     uint8_t conidx;
>     uint8_t err_code;
> } conn_param_update_failed_handled_t;
> 
> typedef struct {
>     uint8_t conidx;
>     ///Connection interval value
>     uint16_t con_interval;
>     ///Connection latency value
>     uint16_t con_latency;
>     ///Supervision timeout
>     uint16_t sup_to;
> } conn_param_update_successful_handled_t;
> 
> typedef struct {
73,75c125,178
<         } set_random_bd_addr_handled;
<     } p;
< } ble_evnet_t;
---
> } set_random_bd_addr_handled_t;
> 
> typedef struct {
>     uint8_t actv_idx;
> } adv_started_handled_t;
> 
> typedef struct {
>     uint8_t actv_idx;
>     uint8_t err_code;
> } adv_starting_failed_handled_t;
> 
> typedef struct {
>     uint8_t actv_idx;
> } adv_stopped_handled_t;
> 
> typedef struct {
>     /// Transmitter device address
>     ble_bdaddr_t trans_addr;
>     /// RSSI (between -127 and +20 dBm)
>     int8_t rssi;
>     /// Report data length
>     uint16_t length;
>     /// Report data
>     uint8_t data[ADV_DATA_LEN];
> } scan_data_report_handled_t;
> 
> typedef struct {
>     uint8_t actv_idx;
>     uint8_t err_code;
> } scan_starting_failed_handled_t;
> 
> typedef union {
>     connect_handled_t connect_handled;
>     connect_bond_handled_t connect_bond_handled;
>     connect_nc_exch_handled_t connect_nc_exch_handled;
>     connect_encrypt_handled_t connect_encrypt_handled;
>     stopped_connecting_handled_t stopped_connecting_handled;
>     connecting_failed_handled_t connecting_failed_handled;
>     disconnect_handled_t disconnect_handled;
>     conn_param_update_req_handled_t conn_param_update_req_handled;
>     conn_param_update_failed_handled_t conn_param_update_failed_handled;
>     conn_param_update_successful_handled_t conn_param_update_successful_handled;
>     set_random_bd_addr_handled_t set_random_bd_addr_handled;
>     adv_started_handled_t adv_started_handled;
>     adv_starting_failed_handled_t adv_starting_failed_handled;
>     adv_stopped_handled_t adv_stopped_handled;
>     scan_data_report_handled_t scan_data_report_handled;
>     scan_starting_failed_handled_t scan_starting_failed_handled;
> } ble_event_handled_t;
> 
> typedef struct {
>     ble_evnet_type_e evt_type;
>     ble_event_handled_t p;
> } ble_event_t;
90,93c193
< } ble_callback_evnet_t;
< 
< typedef void (*APP_BLE_CORE_GLOBAL_HANDLER_FUNC)(ble_evnet_t *, void *);
< typedef void (*APP_BLE_CORE_GLOBAL_CALLBACK_HANDLER_FUNC)(ble_callback_evnet_t *, void *);
---
> } ble_callback_event_t;
94a195,196
> typedef void (*APP_BLE_CORE_GLOBAL_HANDLER_FUNC)(ble_event_t *, void *);
> typedef void (*APP_BLE_CORE_GLOBAL_CALLBACK_HANDLER_FUNC)(ble_callback_event_t *, void *);
111a214,222
> typedef struct
> {
>     uint8_t head[3];
>     uint8_t length;
>     bool ble_is_busy;
>     uint8_t actv_state[BES_BLE_ACTIVITY_MAX];
>     uint8_t conn_cnt;
> } __attribute__((__packed__)) AUTO_TEST_BLE_STATE_T;
> 
115a227
> /****************************function declearation**************************/
159c271
< void app_ble_core_global_handle(ble_evnet_t *event, void *output);
---
> void app_ble_core_global_handle(ble_event_t *event, void *output);
174c286,316
< void app_ble_core_global_callback_event(ble_callback_evnet_t *event, void *output);
---
> void app_ble_core_global_callback_event(ble_callback_event_t *event, void *output);
> 
> /*---------------------------------------------------------------------------
>  *            ble_core_enable_stub_adv
>  *---------------------------------------------------------------------------
>  *
>  *Synopsis:
>  *    enable stub adv
>  *
>  * Parameters:
>  *    void
>  *
>  * Return:
>  *    void
>  */
> void ble_core_enable_stub_adv(void);
> 
> /*---------------------------------------------------------------------------
>  *            ble_core_disable_stub_adv
>  *---------------------------------------------------------------------------
>  *
>  *Synopsis:
>  *    disable stub adv
>  *
>  * Parameters:
>  *    void
>  *
>  * Return:
>  *    void
>  */
> void ble_core_disable_stub_adv(void);
222d363
< /****************************function declearation**************************/
224c365
<  *            ble_adv_data_parse
---
>  *            app_ble_core_print_ble_state
228c369
<  *    for ble core to parse adv data
---
>  *    print ble state
231,234c372
<  *    bleBdAddr -- ble address
<  *    rssi      -- ble rssi
<  *    adv_buf   -- adv data
<  *    len       -- adv data length
---
>  *    void
239,243c377
< void ble_adv_data_parse(uint8_t *bleBdAddr,
<                                int8_t rssi,
<                                unsigned char *adv_buf,
<                                unsigned char len);
< 
---
> void app_ble_core_print_ble_state(void);
