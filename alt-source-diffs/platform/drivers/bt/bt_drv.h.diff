local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/drivers/bt/bt_drv.h
remote: https://raw.githubusercontent.com/dawmlight/device_bestechnic/fc81e5e2ceafd3610bae6591117735ff997d478d/bes2600w/sdk_liteos/bsp/platform/drivers/bt/bt_drv.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 bestechnic (Shanghai) Technologies CO., LIMITED.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
33c32,34
< #define BT_DRV_REG_OP_EXIT()     spent_time = TICKS_TO_US(hal_sys_timer_get()-stime);if (spent_time>300)TRACE(2,"%s exit, %dus",__func__, spent_time);}while(0);
---
> #define BT_DRV_REG_OP_EXIT()     spent_time = TICKS_TO_US(hal_sys_timer_get()-stime);if (spent_time>500)TRACE(2,"%s exit, %dus",__func__, spent_time);}while(0);
> #define btdrv_read_wifi_reg(reg,val)            hal_analogif_reg_read(ISPI_WFRF_REG(reg),val)
> #define btdrv_write_wifi_reg(reg,val)           hal_analogif_reg_write(ISPI_WFRF_REG(reg),val)
41c42
< #if defined(CHIP_BEST1400) || defined(CHIP_BEST1402) || defined(CHIP_BEST2001)
---
> #if defined(CHIP_BEST1400) || defined(CHIP_BEST1402) || defined(CHIP_BEST2001) || defined(CHIP_BEST2003) || defined(CHIP_BEST1501) || defined(CHIP_BEST1305)
46a48,67
> // NOTE: Measure this value for every CHIP Version
> #if defined(CHIP_BEST2300A) || defined(CHIP_BEST1305) || defined(CHIP_BEST1501) || defined(CHIP_BEST2003)
> #define CVSD_OFFSET_BYTES (120)
> #else
> #define CVSD_OFFSET_BYTES (120 - 2)
> #endif
> 
> // NOTE: Measure this value for every CHIP Version
> #if defined(CHIP_BEST2300A) || defined(CHIP_BEST1305) || defined(CHIP_BEST1501) || defined(CHIP_BEST2003)
> #define MSBC_OFFSET_BYTES (0)
> #else
> #define MSBC_OFFSET_BYTES (1)
> #endif
> 
> #if defined(CHIP_BEST1400) || defined(CHIP_BEST1402) || defined(CHIP_BEST2300P) || defined(CHIP_BEST2300A) || defined(CHIP_BEST1305) || defined(CHIP_BEST2001)|| defined(CHIP_BEST1501) || defined(CHIP_BEST2003)
> #define MSBC_MUTE_PATTERN (0x55)
> #else
> #define MSBC_MUTE_PATTERN (0x00)
> #endif
> 
50a72
> #define btdrv_delay_us(us)                         hal_sys_timer_delay(US_TO_TICKS(us))
53,54c75,76
< #define BTDIGITAL_REG(a)                        (*(volatile uint32_t *)(uintptr_t)(a))
< #define BTDIGITAL_REG_WR(addr, value)         (*(volatile uint32_t *)(uintptr_t)(addr)) = (value)
---
> #define BTDIGITAL_REG(a)                        (*(volatile uint32_t *)(a))
> #define BTDIGITAL_REG_WR(addr, value)         (*(volatile uint32_t *)(addr)) = (value)
56c78
< #define BTDIGITAL_BT_EM(a)                      (*(volatile uint16_t *)(uintptr_t)(a))
---
> #define BTDIGITAL_BT_EM(a)                      (*(volatile uint16_t *)(a))
58c80
< #define BTDIGITAL_EM_BT_WR(addr, value)         (*(volatile uint16_t *)(uintptr_t)(addr)) = (value)
---
> #define BTDIGITAL_EM_BT_WR(addr, value)         (*(volatile uint16_t *)(addr)) = (value)
74c96,114
< #define BT_DRV_DEBUG  0
---
> #define BTRF_REG_SET_FIELD(reg, mask, shift, v)\
>                                                 do{ \
>                                                     unsigned short tmp; \
>                                                     btdrv_read_rf_reg(reg,&tmp); \
>                                                     tmp &= ~(mask<<shift); \
>                                                     tmp |= (v<<shift); \
>                                                     btdrv_write_rf_reg(reg,tmp); \
>                                                 }while(0)
> 
> #define BTRF_REG_GET_FIELD(reg, mask, shift, v)\
>                                                 do{ \
>                                                     unsigned short tmp; \
>                                                     btdrv_read_rf_reg(reg,&tmp); \
>                                                     v = (tmp>>shift)&mask; \
>                                                 }while(0)
> 
> #define getbit(x,y)   ((x) >> (y)&1)
> 
> #define BT_DRV_DEBUG  1
77a118,122
> #ifndef TOTA_CRASH_DUMP_TOOL_ENABLE
> #define BT_DRV_TRACE_CRASH_DUMP(n, fmt, ...)  TRACE(n, fmt, ##__VA_ARGS__)
> #else
> #define BT_DRV_TRACE_CRASH_DUMP(n, fmt, ...)  REL_TRACE_IMM(n, fmt, ##__VA_ARGS__)
> #endif
79,80c124,127
< #define BT_DRV_TRACE(n, fmt, ...) hal_trace_dummy(fmt, ##__VA_ARGS__)
< #define BT_DRV_DUMP(s,buff,len)   hal_dump_dummy(s, buff, len)
---
> #define BT_DRV_TRACE(n, fmt, ...) hal_trace_dummy(NULL, ##__VA_ARGS__)
> #define BT_DRV_DUMP(s,buff,len)
> #define BT_DRV_TRACE_CRASH_DUMP(n, fmt, ...) hal_trace_dummy(NULL, ##__VA_ARGS__)
> 
84a132
> #define MAX_NB_SYNC (2)
112c160
< #elif defined(CHIP_BEST2300P) || defined(CHIP_BEST2300A) || defined(CHIP_BEST1400) || defined(CHIP_BEST1402) || defined(__FPGA_BT_1400__) || defined(CHIP_BEST2001)
---
> #elif defined(CHIP_BEST2300P) || defined(CHIP_BEST2300A) || defined(CHIP_BEST1400) || defined(CHIP_BEST1402) || defined(__FPGA_BT_1400__) || defined(CHIP_BEST2001) || defined(CHIP_BEST1305) || defined(CHIP_BEST1600SIMU)
140c188
< #ifdef CHIP_BEST2300A
---
> #if defined(CHIP_BEST2300A) || defined(CHIP_BEST1305)
146c194,204
< #elif defined(__FPGA_BT_1500__)
---
> #elif defined(__FPGA_BT_1500__) || defined(CHIP_BEST1501) || defined(CHIP_BEST2003)
> #if defined(CHIP_BEST1501SIMU) || defined(CHIP_BEST1600SIMU)
> #ifdef __FPGA_1501P__
> #define BT_EM_ADDR_BASE (0xD0216F34)
> #else
> #define BT_EM_ADDR_BASE (0xD0216800)
> #endif//fpga_1501p
> #else
> #if defined(CHIP_BEST2003) && defined __BT_RAMRUN__
> #define BT_EM_ADDR_BASE (0xD0215ee0)
> #else
147a206,208
> #endif
> 
> #endif
149a211
> #define EM_BLE_CS_OFFSET    (0x178)
152c214
< #define EM_BT_BITOFF_ADDR   //(BT_EM_ADDR_BASE + 0x02)
---
> //#define EM_BT_BITOFF_ADDR  //1501 don't have bitoff reg
161a224,225
> #define BLE_MAXEVTIME_ADDR   (0xD0210030 + EM_BLE_CS_OFFSET)
> #define BLE_CRCINIT1_ADDR    (0xD0210014 + EM_BLE_CS_OFFSET)
163,165c227,229
< #define EM_BT_AUDIOBUF_OFF    0xd02144fc
< #define EM_BT_RXACLBUFPTR_ADDR  0xd02115f8
< #define REG_EM_BT_RXDESC_SIZE 16
---
> #define EM_BT_AUDIOBUF_OFF    0xd0218a70
> #define EM_BT_RXACLBUFPTR_ADDR  0xD0215482
> #define REG_EM_BT_RXDESC_SIZE 20
168c232
< #define BT_CONTROLLER_CRASH_DUMP_ADDR_BASE  (0xc0000050)
---
> #define BT_CONTROLLER_CRASH_DUMP_ADDR_BASE  (0xc0004050)
170c234
< #define DEFAULT_XTAL_FCAP                       0x8080
---
> #define DEFAULT_XTAL_FCAP                       0x1300
178,180d241
< #ifndef __FPGA_BT_1500__
< //#define FPGA_1303
< #endif
181a243,246
> #if defined(__FPGA_BT_1500__) || defined(CHIP_BEST1501) || defined(CHIP_BEST2003)
> //bt max slot clock
> #define MAX_SLOT_CLOCK      ((1L<<28) - 1)
> #else
183a249
> #endif
186,187c252
< #define XTAL_OFFSET           50
< 
---
> #define HALF_SLOT_SIZE       625                    // A half slot is 312.5 us (in half us)
316c381,382
<     defined(__FPGA_BT_1500__)
---
>     defined(__FPGA_BT_1500__) || defined(CHIP_BEST1501) || defined(CHIP_BEST2003) || \
>     defined(CHIP_BEST1305) || defined(CHIP_BEST1600SIMU)
388a455
> #define HCI_DBG_SET_FIX_TWS_INTERVAL_CMD_OPCODE       0xFCAB
394a462,486
> #if defined(CHIP_BEST1501) || defined(CHIP_BEST2003)
> #define HCI_DBG_SET_RSSI_TX_POWER_DFT_THR_CMD_OPCODE     0xFCB3
> #define HCI_DBG_SET_RSSI_TX_POWER_LINK_THR_CMD_OPCODE    0xFCB4
> #define HCI_DBG_SET_CLK_DRAGGING_CMD_OPCODE              0xFCB5
> #define HCI_DBG_SET_BLE_TXPWR_CMD_OPCODE                 0xFCB6
> #define HCI_DBG_SET_BT_BLE_PARA_CMD_OPCODE               0xFCB7
> #define HCI_DBG_SET_FUNC_PATCH_CMD_OPCODE                0xFCB8
> //#define HCI_DBG_SET_IBRT_TEST_MODE_CMD_OPCODE            0xfcb9
> //#define HCI_DBG_SET_ECC_DATA_TEST_CMD_OPCODE             0xfcbb
> #define HCI_DBG_SET_IBRT_DATA_TEST_CMD_OPCODE            0xfcbc
> #define HCI_DBG_GET_TX_RX_BUF_CNT_CMD_OPCODE             0xfcbd
> //#define HCI_DBG_IBRT_SWITCH_CMD_OPCODE                 0xfcbe
> //#define HCI_DBG_STOP_MULTI_POINT_IBRT_CMD_OPCODE       0xfcbf
> #define HCI_DBG_SET_TXPWR_MODE_CMD_OPCODE                0xfcc0
> #define HCI_DBG_SET_LOW_LATENCY_MODE_CMD_OPCODE          0xfcc1
> #define HCI_DBG_SET_SW_RSSI_CMD_OPCODE                   0xfcc2
> #define HCI_DBG_SET_BT_SCHE_SETTING_CMD_OPCODE           0xfcc3
> #define HCI_DBG_SET_BT_IBRT_SETTING_CMD_OPCODE           0xfcc4
> #define HCI_DBG_SET_BT_HW_FEAT_SETTING_CMD_OPCODE        0xfcc5
> #define HCI_DBG_SIGNAL_TEST_ACTIVATE_CMD_OPCODE          0xfcc6
> #define HCI_DBG_SIGNAL_TEST_CONTROL_CMD_OPCODE           0xfcc7
> #define HCI_DBG_SIGNAL_TEST_PWR_CTRL_REQ_CMD_OPCODE      0xfcc8
> #define HCI_DBG_BT_COMMON_SETTING_T1_CMD_OPCODE          0xfcca
> #define HCI_DBG_SET_AFH_ASSESS_CMD_OPCODE                0xfccb
> #else //!defined(CHIP_BEST1501)
404a497,504
> #define HCI_DBG_SET_BT_SCHE_SETTING_CMD_OPCODE        0xFCC3
> #define HCI_DBG_SET_BT_IBRT_SETTING_CMD_OPCODE        0xFCC4
> #define HCI_DBG_SET_BT_HW_FEAT_SETTING_CMD_OPCODE     0xFCC5
> #endif//defined(CHIP_BEST1501)
> 
> #if defined(CHIP_BEST1305) || defined(CHIP_BEST1600SIMU)
> #define HCI_DBG_SET_BT_SETTING_EXT3_CMD_OPCODE        0xfcbf
> #endif
476d575
< 
