local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/drivers/ana/analog.h
remote: https://raw.githubusercontent.com/dawmlight/device_bestechnic/fc81e5e2ceafd3610bae6591117735ff997d478d/bes2600w/sdk_liteos/bsp/platform/drivers/ana/analog.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 bestechnic (Shanghai) Technologies CO., LIMITED.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
22d20
< 
28a27,29
> #ifdef DONGLE_SUPPORT
> #include CHIP_SPECIFIC_HDR(dongle)
> #endif
30,33c31,33
< #define ANALOG_DEBUG_TRACE(n, s, ...)
< //TRACE(n, s, ##__VA_ARGS__)
< #define ANALOG_DEBUG_TRACE_IMM(n, s, ...)  TRACE_IMM(n, s, ##__VA_ARGS__)
< #define ANALOG_INFO_TRACE(n, s, ...)       TRACE(n, s, ##__VA_ARGS__)
---
> #define ANALOG_DEBUG_TRACE(n, s, ...)       TR_DUMMY(n, s, ##__VA_ARGS__)
> #define ANALOG_INFO_TRACE_IMM(n, s, ...)    TR_INFO((n) | TR_ATTR_IMM, s, ##__VA_ARGS__)
> #define ANALOG_INFO_TRACE(n, s, ...)        TR_INFO(n, s, ##__VA_ARGS__)
42a43
> #ifndef ANA_AUD_PLL_USER_T
50a52,58
> #endif
> 
> enum ANA_DAC_DC_CALIB_MODE_T {
>     ANA_DAC_DC_CALIB_MODE_ADC_ONLY,
>     ANA_DAC_DC_CALIB_MODE_DAC_TO_ADC,
>     ANA_DAC_DC_CALIB_MODE_NORMAL,
> };
75a84,85
> void analog_aud_restore_anc_dyn_adc_gain(enum ANC_TYPE_T type);
> 
77a88,89
> void analog_aud_apply_dyn_adc_gain(enum AUD_CHANNEL_MAP_T ch_map, int16_t gain);
> 
110a123,147
> 
> bool analog_aud_dc_calib_valid(void);
> 
> uint16_t analog_aud_dac_dc_diff_to_val(int32_t diff);
> 
> uint16_t analog_aud_dc_calib_val_to_efuse(uint16_t val);
> 
> int16_t analog_aud_dac_dc_get_step(void);
> 
> void analog_aud_save_dc_calib(uint16_t val);
> 
> void analog_aud_dc_calib_set_value(uint16_t dc_l, uint16_t dc_r);
> 
> void analog_aud_dc_calib_get_cur_value(uint16_t *dc_l, uint16_t *dc_r);
> 
> bool analog_aud_dc_calib_get_large_ana_dc_value(uint16_t *ana_dc, int cur_dig_dc, int tgt_dig_dc,
>     int chan, bool init);
> 
> void analog_aud_dc_calib_enable(bool en);
> 
> void analog_aud_dac_dc_auto_calib_enable(void);
> 
> void analog_aud_dac_dc_auto_calib_disable(void);
> 
> void analog_aud_dac_dc_auto_calib_set_mode(enum ANA_DAC_DC_CALIB_MODE_T mode);
