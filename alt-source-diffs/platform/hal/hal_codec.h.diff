local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/hal_codec.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/hal/hal_codec.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
25a25,26
> #define DAC_DC_VALID_MARK                   (0xDAC0DC00)
> 
34,57d34
< struct HAL_CODEC_CONFIG_T {
<     enum AUD_BITS_T bits;
<     enum AUD_SAMPRATE_T sample_rate;
<     enum AUD_CHANNEL_NUM_T channel_num;
<     enum AUD_CHANNEL_MAP_T channel_map;
< 
<     uint32_t use_dma:1;
<     uint32_t vol:5;
< 
<     enum AUD_IO_PATH_T io_path;
< 
<     uint32_t set_flag;
< };
< 
< struct dac_classg_cfg {
<     uint8_t thd2;
<     uint8_t thd1;
<     uint8_t thd0;
<     uint8_t lr;
<     uint8_t step_4_3n;
<     uint8_t quick_down;
<     uint16_t wind_width;
< };
< 
91,97d67
< enum HAL_CODEC_IIR_USER_T {
<     HAL_CODEC_IIR_USER_ANC,
<     HAL_CODEC_IIR_USER_EQ,
< 
<     HAL_CODEC_IIR_USER_QTY,
< };
< 
105a76,90
> enum HAL_CODEC_PSAP_MODE_T {
>     HAL_CODEC_PSAP_MODE_ADC = 0,
>     HAL_CODEC_PSAP_MODE_ADC_DAC,
>     HAL_CODEC_PSAP_MODE_DAC,
>     HAL_CODEC_PSAP_MODE_DRC_LIM,
> };
> 
> typedef enum {
>     HAL_CODEC_ECHO_PATH_DAC1_DAC2_PSAP = 0,
>     HAL_CODEC_ECHO_PATH_DAC1_ALONE = 1,
>     HAL_CODEC_ECHO_PATH_ALL = 2,
>     HAL_CODEC_ECHO_PATH_DAC2_ALONE = 3,
>     HAL_CODEC_ECHO_PATH_QTY
> } HAL_CODEC_ECHO_PATH_T;
> 
111a97,144
> typedef void (*HAL_CODEC_IRQ_CALLBACK2)(uint32_t status1, uint32_t status2);
> 
> struct HAL_CODEC_CONFIG_T {
>     enum AUD_BITS_T bits;
>     enum AUD_SAMPRATE_T sample_rate;
>     enum AUD_CHANNEL_NUM_T channel_num;
>     enum AUD_CHANNEL_MAP_T channel_map;
> 
>     uint32_t use_dma:1;
>     uint32_t vol:7;
> 
>     enum AUD_IO_PATH_T io_path;
> 
>     uint32_t set_flag;
> };
> 
> struct dac_classg_cfg {
>     uint8_t thd2;
>     uint8_t thd1;
>     uint8_t thd0;
>     uint8_t lr;
>     uint8_t step_4_3n;
>     uint8_t quick_down;
>     uint16_t wind_width;
> };
> 
> struct HAL_CODEC_PSAP_CFG_T {
>     enum HAL_CODEC_PSAP_MODE_T mode;
>     uint8_t din0_samp_delay;
>     float din0_gain;
>     uint8_t din1_sign;
> };
> 
> struct HAL_CODEC_DAC_DRE_CALIB_CFG_T {
>     uint32_t valid;
>     uint32_t dc_l;
>     uint32_t dc_r;
>     float    gain_l;
>     float    gain_r;
>     uint16_t ana_dc_l;
>     uint16_t ana_dc_r;
>     uint8_t ana_gain;
>     uint8_t ini_ana_gain;
>     uint8_t gain_offset;
>     uint8_t step_mode;
>     uint8_t top_gain;
>     uint8_t rsv[3];
> };
113a147,150
> uint32_t hal_codec_get_all_input_path_cfg(void);
> uint32_t hal_codec_get_input_map_chan_num(uint32_t ch_map);
> uint32_t hal_codec_get_input_path_chan_num(enum AUD_IO_PATH_T io_path);
> void hal_codec_set_dac_volume_table(const struct CODEC_DAC_VOL_T *table_ptr, uint32_t table_num);
117a155
> uint32_t hal_codec_get_real_sample_rate(enum AUD_SAMPRATE_T rate, bool resamp);
140a179
> void hal_codec_set_dac2_sw_output_coef_callback(HAL_CODEC_SW_OUTPUT_COEF_CALLBACK callback);
169a209
> void hal_codec_dac_sdm_reset_pulse(void);
174a215,216
> void hal_codec_mc_enable(void);
> void hal_codec_mc_disable(void);
179a222,224
> uint32_t hal_codec_get_echo_path(void);
> void hal_codec_set_echo_path(HAL_CODEC_ECHO_PATH_T path);
> 
199,201c244,246
< 
< int hal_codec_iir_enable(enum HAL_CODEC_IIR_USER_T user, uint32_t speed);
< int hal_codec_iir_disable(enum HAL_CODEC_IIR_USER_T user);
---
> void hal_codec_set_bt_trigger_ex_callback(uint32_t index, HAL_CODEC_BT_TRIGGER_CALLBACK callback);
> int hal_codec_bt_trigger_ex_start(uint32_t index);
> int hal_codec_bt_trigger_ex_stop(uint32_t index);
207a253,300
> 
> void hal_codec_iir_enable(uint32_t speed);
> void hal_codec_iir_disable(void);
> 
> void hal_codec_iir_eq_enable(uint32_t speed);
> void hal_codec_iir_eq_disable(void);
> 
> void hal_codec_fir_enable(uint32_t speed);
> void hal_codec_fir_disable(void);
> void hal_codec_fir_select_sys_clock(void);
> void hal_codec_fir_select_own_clock(void);
> 
> void hal_codec_psap_enable(uint32_t speed);
> void hal_codec_psap_disable(void);
> void hal_codec_psap_setup(enum AUD_CHANNEL_MAP_T ch_map, const struct HAL_CODEC_PSAP_CFG_T *cfg);
> 
> int  hal_codec_dac2_start_interface(enum HAL_CODEC_ID_T id, int dma);
> int  hal_codec_dac2_stop_interface(enum HAL_CODEC_ID_T id);
> int  hal_codec_dac2_setup_stream(enum HAL_CODEC_ID_T id, const struct HAL_CODEC_CONFIG_T *cfg);
> void hal_codec_dac2_mute(bool mute);
> int  hal_codec_dac2_set_chan_vol(enum AUD_CHANNEL_MAP_T ch_map, uint8_t vol);
> 
> void hal_codec_sync_dac2_disable(void);
> void hal_codec_sync_dac2_enable(enum HAL_CODEC_SYNC_TYPE_T type);
> void hal_codec_sync_dac2_resample_rate_disable(void);
> void hal_codec_sync_dac2_resample_rate_enable(enum HAL_CODEC_SYNC_TYPE_T type);
> void hal_codec_sync_dac2_gain_disable(void);
> void hal_codec_sync_dac2_gain_enable(enum HAL_CODEC_SYNC_TYPE_T type);
> 
> void hal_codec_tune_dac2_resample_rate(enum AUD_STREAM_T stream, float ratio);
> 
> void hal_codec_set_dac_bt_sync_source(uint32_t src);
> void hal_codec_set_adc_bt_sync_source(uint32_t src);
> void hal_codec_set_dac2_bt_sync_source(uint32_t src);
> void hal_codec_pll_bt_sync_source(uint32_t src);
> 
> void hal_codec_dac_dre_init_calib_cfg(void);
> struct HAL_CODEC_DAC_DRE_CALIB_CFG_T *hal_codec_dac_dre_get_calib_cfg(uint32_t *nr);
> int  hal_codec_dac_dre_check_calib_cfg(struct HAL_CODEC_DAC_DRE_CALIB_CFG_T *cfg);
> void hal_codec_set_dac_calib_status(bool status);
> void hal_codec_set_dac_ana_gain(uint8_t ini_ana_gain, uint8_t gain_offset);
> bool hal_codec_get_dig_dc_calib_value_high_dre_gain(int32_t *dc_l, int32_t *dc_r);
> int  hal_codec_dac_dc_auto_calib_enable(void);
> int  hal_codec_dac_dc_auto_calib_disable(void);
> void hal_codec_dac_dc_offset_enable(int32_t dc_l, int32_t dc_r);
> void hal_codec_set_dig_dac_gain_dr(enum AUD_CHANNEL_MAP_T map, int32_t gain);
> int hal_codec_trigger_en(HAL_CODEC_IRQ_CALLBACK cb);
> int hal_codec_timer_trigger_en(HAL_CODEC_IRQ_CALLBACK cb);
