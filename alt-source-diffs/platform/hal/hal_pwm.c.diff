local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/hal_pwm.c
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/hal/hal_pwm.c
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
23a23,24
> #ifdef PWM_BASE
> 
33,34c34,35
< #ifdef CHIP_BEST2000
<     (struct PWM_T *)AON_PWM_BASE,
---
> #if defined(CHIP_BEST2000) || defined (CHIP_BEST2003)
>     (struct PWM_T *)PWM1_BASE,
40,41c41,42
< #ifdef CHIP_BEST2000
<     HAL_CMU_AON_O_PWM0,
---
> #if defined(CHIP_BEST2000) || defined (CHIP_BEST2003)
>     HAL_CMU_MOD_O_PWM4,
47,48c48,49
< #ifdef CHIP_BEST2000
<     HAL_CMU_AON_A_PWM,
---
> #if defined(CHIP_BEST2000) || defined (CHIP_BEST2003)
>     HAL_CMU_MOD_P_PWM1,
51a53,55
> static uint8_t pwm_map;
> STATIC_ASSERT(sizeof(pwm_map) * 8 >= HAL_PWM_ID_QTY, "pwm_map size too small");
> 
109,110c113,114
< #ifdef CHIP_BEST2000
<     if (id < HAL_PWM2_ID_0) {
---
> #if defined(CHIP_BEST2000) || defined (CHIP_BEST2003)
>     if (id < HAL_PWM1_ID_0) {
115c119
<         offset = id - HAL_PWM2_ID_0;
---
>         offset = id - HAL_PWM1_ID_0;
122c126,129
<     if (hal_cmu_reset_get_status(pwm_o_mod[index] + offset) == HAL_CMU_RST_SET) {
---
>     lock = int_lock();
> 
>     if ((pwm_map & (1 << id)) == 0) {
>         pwm_map |= (1 << id);
133c140
<         return 0;
---
>         goto _exit;
136,138c143
<     hal_cmu_pwm_set_freq(id, mod_freq);
< 
<     lock = int_lock();
---
>     hal_cmu_pwm_set_freq(id, (mod_freq == PWM_FAST_CLOCK) ? mod_freq : 0);
161a167
> _exit:
170a177,178
>     uint32_t lock;
>     uint32_t mask;
176,177c184,185
< #ifdef CHIP_BEST2000
<     if (id < HAL_PWM2_ID_0) {
---
> #if defined(CHIP_BEST2000) || defined (CHIP_BEST2003)
>     if (id < HAL_PWM1_ID_0) {
179a188
>         mask = (1 << HAL_PWM1_ID_0) - 1;
182c191,192
<         offset = id - HAL_PWM2_ID_0;
---
>         offset = id - HAL_PWM1_ID_0;
>         mask = (1 << HAL_PWM_ID_QTY) - (1 << HAL_PWM1_ID_0);
186a197
>     mask = (1 << HAL_PWM_ID_QTY) - 1;
189,190c200,203
<     if (hal_cmu_reset_get_status(pwm_o_mod[index] + offset) == HAL_CMU_RST_SET) {
<         return 0;
---
>     lock = int_lock();
> 
>     if ((pwm_map & (1 << id)) == 0) {
>         goto _exit;
191a205
>     pwm_map &= ~(1 << id);
196c210
<     if (pwm[index]->EN == 0) {
---
>     if ((pwm_map & mask) == 0) {
200a215,217
> _exit:
>     int_unlock(lock);
> 
202a220,350
> 
> int hal_pwm_breathing_led_enable(enum HAL_PWM_ID_T id, const struct HAL_PWM_BR_CFG_T *cfg)
> {
>     uint8_t index;
>     uint8_t offset;
>     uint32_t lock;
>     uint32_t st1;
>     uint32_t st2;
>     uint32_t subcnt_data;
>     uint8_t tg;
> 
>     if (id >= HAL_PWM_ID_QTY) {
>         return 1;
>     }
> 
> #if defined(CHIP_BEST2000) || defined (CHIP_BEST2003)
>     if (id < HAL_PWM1_ID_0) {
>         index = 0;
>         offset = id - HAL_PWM_ID_0;
>     } else {
>         index = 1;
>         offset = id - HAL_PWM1_ID_0;
>     }
> #else
>     index = 0;
>     offset = id - HAL_PWM_ID_0;
> #endif
> 
>     if (offset != 2 && offset != 3) {
>         return 2;
>     }
> 
>     st1 = MS_TO_TICKS(cfg->off_time_ms);
>     if (st1 > (REG_PWM2_ST1_MASK >> REG_PWM2_ST1_SHIFT)) {
>         st1 = (REG_PWM2_ST1_MASK >> REG_PWM2_ST1_SHIFT);
>     }
>     st2 = MS_TO_TICKS(cfg->on_time_ms);
>     if (st2 > (PWM_TOGGLE23_2_MASK >> PWM_TOGGLE23_2_SHIFT)) {
>         st2 = (REG_PWM2_ST1_MASK >> REG_PWM2_ST1_SHIFT);
>     }
>     subcnt_data = MS_TO_TICKS(cfg->fade_time_ms);
>     subcnt_data = integer_sqrt_nearest(subcnt_data);
>     if (subcnt_data > (SUBCNT_DATA2_MASK >> SUBCNT_DATA2_SHIFT)) {
>         subcnt_data = (SUBCNT_DATA2_MASK >> SUBCNT_DATA2_SHIFT);
>     }
>     // TODO: HW will be fixed from 2500
>     if (subcnt_data > 0xFE) {
>         subcnt_data = 0xFE;
>     }
>     tg = 1;
> 
>     lock = int_lock();
> 
>     if (hal_cmu_reset_get_status(pwm_o_mod[index] + offset) == HAL_CMU_RST_SET) {
>         hal_cmu_clock_enable(pwm_o_mod[index] + offset);
>         hal_cmu_clock_enable(pwm_p_mod[index]);
>         hal_cmu_reset_clear(pwm_o_mod[index] + offset);
>         hal_cmu_reset_clear(pwm_p_mod[index]);
>     } else {
>         pwm[index]->EN &= ~(1 << offset);
>     }
> 
>     hal_cmu_pwm_set_freq(id, 0);
> 
>     if (offset == 2) {
>         pwm[index]->ST1_23 = SET_BITFIELD(pwm[index]->ST1_23, REG_PWM2_ST1, st1);
>         pwm[index]->TOGGLE23 = SET_BITFIELD(pwm[index]->TOGGLE23, PWM_TOGGLE23_2, st2);
>         pwm[index]->TWINKLE23 = (pwm[index]->TWINKLE23 & ~(SUBCNT_DATA2_MASK | TG_SUBCNT_D2_ST_MASK)) |
>             SUBCNT_DATA2(subcnt_data) | TG_SUBCNT_D2_ST(tg) | REG_PWM2_BR_EN;
>     } else {
>         pwm[index]->ST1_23 = SET_BITFIELD(pwm[index]->ST1_23, REG_PWM3_ST1, st1);
>         pwm[index]->TOGGLE23 = SET_BITFIELD(pwm[index]->TOGGLE23, PWM_TOGGLE23_3, st2);
>         pwm[index]->TWINKLE23 = (pwm[index]->TWINKLE23 & ~(SUBCNT_DATA3_MASK | TG_SUBCNT_D3_ST_MASK)) |
>             SUBCNT_DATA3(subcnt_data) | TG_SUBCNT_D3_ST(tg) | REG_PWM3_BR_EN;
>     }
> 
>     pwm[index]->EN |= (1 << offset);
> 
>     int_unlock(lock);
> 
>     return 0;
> }
> 
> int hal_pwm_breathing_led_disable(enum HAL_PWM_ID_T id)
> {
>     uint8_t index;
>     uint8_t offset;
>     uint32_t lock;
> 
>     if (id >= HAL_PWM_ID_QTY) {
>         return 1;
>     }
> 
> #if defined(CHIP_BEST2000) || defined (CHIP_BEST2003)
>     if (id < HAL_PWM1_ID_0) {
>         index = 0;
>         offset = id - HAL_PWM_ID_0;
>     } else {
>         index = 1;
>         offset = id - HAL_PWM1_ID_0;
>     }
> #else
>     index = 0;
>     offset = id - HAL_PWM_ID_0;
> #endif
> 
>     if (offset != 2 && offset != 3) {
>         return 2;
>     }
> 
>     lock = int_lock();
> 
>     if (hal_cmu_reset_get_status(pwm_o_mod[index] + offset) == HAL_CMU_RST_SET) {
>         goto _exit;
>     }
> 
>     if (offset == 2) {
>         pwm[index]->TWINKLE23 &= ~REG_PWM2_BR_EN;
>     } else {
>         pwm[index]->TWINKLE23 &= ~REG_PWM3_BR_EN;
>     }
> 
>     hal_pwm_disable(id);
> 
> _exit:
>     int_unlock(lock);
> 
>     return 0;
> }
> 
> #endif
