local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/hal_dma.c
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/hal/hal_dma.c
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
29a29,35
> #if (defined(CHIP_BEST1501SIMU) && !defined(__FPGA_1501P__)) || defined(CHIP_BEST1600SIMU)
> enum HAL_DMA_INST_T {
>     HAL_DMA_INST_AUDMA = 1,
>     HAL_DMA_INST_GPDMA = HAL_DMA_INST_AUDMA,
>     HAL_DMA_INST_QTY
> };
> #else
39a46
> #endif
157a165,174
> #ifdef DMA_DEBUG
> #if (CHIP_HAS_DMA > 1) && (GPDMA_CHAN_NUM > AUDMA_CHAN_NUM)
> #define MAX_CHAN_NUM_PER_INST               GPDMA_CHAN_NUM
> #else
> #define MAX_CHAN_NUM_PER_INST               AUDMA_CHAN_NUM
> #endif
> static void *chan_user[HAL_DMA_INST_QTY][MAX_CHAN_NUM_PER_INST];
> static uint32_t debug_user_map[HAL_DMA_INST_QTY];
> STATIC_ASSERT(sizeof(debug_user_map[0]) * 8 >= MAX_CHAN_NUM_PER_INST, "debug_user_map size too small");
> #endif
258c275
<         DMA_DMACONFIG_EN |
---
>         DMA_DMACONFIG_EN | DMA_DMACONFIG_CROSS_1KB_EN |
588c605
< uint32_t hal_dma_cancel(uint8_t ch)
---
> void hal_dma_cancel(uint8_t ch)
592d608
<     uint32_t remains;
603,606d618
< 
<     remains = GET_BITFIELD(dma[inst]->CH[hwch].CONTROL, DMA_CONTROL_TRANSFERSIZE);
< 
<     return remains;
609c621
< uint32_t hal_dma_stop(uint8_t ch)
---
> void hal_dma_stop(uint8_t ch)
634c646,647
<     return hal_dma_cancel(ch);
---
> 
>     hal_dma_cancel(ch);
683a697,702
> #ifdef DMA_DEBUG
>     if (got != HAL_DMA_CHAN_NONE) {
>         chan_user[inst][hwch] = __builtin_return_address(0);
>     }
> #endif
> 
998c1017
<     for (inst = 0; inst < HAL_DMA_INST_QTY; inst++) {
---
>     for (inst = HAL_DMA_INST_AUDMA; inst < HAL_DMA_INST_QTY; inst++) {
1055a1075,1107
> }
> 
> void hal_dma_record_busy_chan(void)
> {
> #ifdef DMA_DEBUG
>     enum HAL_DMA_INST_T inst;
>     int hwch;
> 
>     for (inst = HAL_DMA_INST_AUDMA; inst < HAL_DMA_INST_QTY; inst++) {
>         debug_user_map[inst] = 0;
>         for (hwch = chan_start[inst]; hwch < chan_num[inst]; hwch++) {
>             if (hal_dma_chan_busy_inst(inst, hwch)) {
>                 debug_user_map[inst] |= (1 << hwch);
>             }
>         }
>     }
> #endif
> }
> 
> void hal_dma_print_busy_chan(void)
> {
> #ifdef DMA_DEBUG
>     enum HAL_DMA_INST_T inst;
>     int hwch;
> 
>     for (inst = HAL_DMA_INST_AUDMA; inst < HAL_DMA_INST_QTY; inst++) {
>         for (hwch = chan_start[inst]; hwch < chan_num[inst]; hwch++) {
>             if (debug_user_map[inst] & (1 << hwch)) {
>                 TRACE(0, "*** DMA CHAN BUSY: %u-%u %8X", inst, hwch, (uint32_t)chan_user[inst][hwch]);
>             }
>         }
>     }
> #endif
