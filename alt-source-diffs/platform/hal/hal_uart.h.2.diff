local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/hal_uart.h
remote: https://raw.githubusercontent.com/alibaba/AliOS-Things/a99f20706f9c666903a12a205edce13263b1fadb/hardware/chip/haas1000/drivers/platform/hal/hal_uart.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
102,108d100
< struct HAL_UART_BUF_T {
<     uint8_t *buf;
<     uint32_t len;
<     bool irq;
<     bool loop_hdr;
< };
< 
156a149,150
> typedef void (*HAL_UART_IRQ_BREAK_HANDLER_T)(void);
> 
165,166d158
< int hal_uart_change_baud_rate(enum HAL_UART_ID_T id, uint32_t rate);
< 
205c197,198
< void hal_uart_irq_set_dma_handler(enum HAL_UART_ID_T id, HAL_UART_IRQ_RXDMA_HANDLER_T rxdma, HAL_UART_IRQ_TXDMA_HANDLER_T txdma);
---
> void hal_uart_irq_set_dma_handler(enum HAL_UART_ID_T id, HAL_UART_IRQ_RXDMA_HANDLER_T rxdma,
>                                   HAL_UART_IRQ_TXDMA_HANDLER_T txdma, HAL_UART_IRQ_BREAK_HANDLER_T brk);
217a211,214
> int hal_uart_dma_recv_mask2(enum HAL_UART_ID_T id, uint8_t *buf0, uint32_t len0,
>                             uint8_t *buf1, uint32_t len1,
>                             struct HAL_DMA_DESC_T desc[2], const union HAL_UART_IRQ_T *mask);
> 
226,228d222
< int hal_uart_dma_recv_mask_buf_list(enum HAL_UART_ID_T id, const struct HAL_UART_BUF_T *ubuf, uint32_t ucnt,
<                                     struct HAL_DMA_DESC_T *desc, uint32_t *desc_cnt, const union HAL_UART_IRQ_T *mask);
< 
236c230,232
< uint32_t hal_uart_stop_dma_send(enum HAL_UART_ID_T id);
---
> int hal_uart_dma_send2(enum HAL_UART_ID_T id, const uint8_t *buf0, uint32_t len0,
>                        const uint8_t *buf1, uint32_t len1,
>                        struct HAL_DMA_DESC_T desc[2]);
237a234
> uint32_t hal_uart_stop_dma_send(enum HAL_UART_ID_T id);
238a236,238
> // addd for ali tihngs uart2 dma send
> int hal_uart_dma_send_sync_cache(enum HAL_UART_ID_T id, const uint8_t *buf, uint32_t len,
>                       struct HAL_DMA_DESC_T *desc, uint32_t *desc_cnt);
244a245,246
> 
> void hal_uart_output(const unsigned char *buf, int size);
