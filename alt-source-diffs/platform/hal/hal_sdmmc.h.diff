local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/hal_sdmmc.h
remote: https://raw.githubusercontent.com/dawmlight/device_bestechnic/63ade68296297f19742d8d5f98353c4376e516cb/bes2600w/sdk_liteos/bsp/platform/hal/hal_sec_eng.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 bestechnic (Shanghai) Technologies CO., LIMITED.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,17c9,16
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
< #ifndef _HAL_SDMMC_H_
< #define _HAL_SDMMC_H_
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
> #ifndef __HAL_SEC_ENG_H__
> #define __HAL_SEC_ENG_H__
23a23,117
> #include "stdbool.h"
> #include "stdint.h"
> #include "hal_dma.h"
> 
> enum HAL_SE_RET_T {
>     HAL_SE_OK,
>     HAL_SE_ERR,
>     HAL_SE_ALREADY_OPENED,
>     HAL_SE_NOT_OPENED,
>     HAL_SE_ENG_BUSY,
>     HAL_SE_DMA_BUSY,
>     HAL_SE_CFG_NULL,
>     HAL_SE_INPUT_NULL,
>     HAL_SE_OUTPUT_NULL,
>     HAL_SE_KEY_NULL,
>     HAL_SE_IV_NULL,
>     HAL_SE_KEY2_NULL,
>     HAL_SE_BAD_INPUT_LEN,
>     HAL_SE_BAD_OUTPUT_LEN,
>     HAL_SE_BAD_KEY_LEN,
>     HAL_SE_BAD_AES_MODE,
>     HAL_SE_BAD_AES_MODULAR,
>     HAL_SE_BAD_MODE,
>     HAL_SE_BAD_OP,
> };
> 
> enum HAL_SE_AES_MODE_T {
>     HAL_SE_AES_ECB                      = 0,
>     HAL_SE_AES_CBC                      = 1,
>     HAL_SE_AES_CTR                      = 2,
>     HAL_SE_AES_XTS                      = 3,
>     HAL_SE_AES_KEY_WRAP                 = 4,
> 
>     HAL_SE_AES_MODE_QTY,
> };
> 
> enum HAL_SE_DONE_ERR_T {
>     HAL_SE_DONE_OK                      = 0,
>     HAL_SE_DONE_ERR_DMA_IN,
>     HAL_SE_DONE_ERR_DMA_OUT,
>     HAL_SE_DONE_ERR_DMA_IN_REMAIN,
>     HAL_SE_DONE_ERR_DMA_OUT_REMAIN,
>     HAL_SE_DONE_ERR_ENG_ERR1,
>     HAL_SE_DONE_ERR_ENG_ERR2,
>     HAL_SE_DONE_ERR_ENG_ERR1_ERR2,
> };
> 
> enum HAL_SE_HASH_MODE_T {
>     HAL_SE_HASH_SHA1                    = 0,
>     HAL_SE_HASH_SHA256,
>     HAL_SE_HASH_SHA224,
>     HAL_SE_HASH_MD5,
>     HAL_SE_HASH_SHA512,
>     HAL_SE_HASH_SHA384,
> 
>     HAL_SE_HASH_QTY,
> };
> 
> typedef void (*HAL_SC_DONE_HANDLER_T)(void *buf, uint32_t len, enum HAL_SE_DONE_ERR_T err);
> 
> struct HAL_SE_AES_CFG_T {
>     enum HAL_SE_AES_MODE_T mode;
>     const void *key;
>     uint16_t key_len;
>     uint8_t ctr_modular;
>     const void *key2;
>     const void *iv;
>     const void *in;
>     uint32_t in_len;
>     void *out;
>     uint32_t out_len;
>     HAL_SC_DONE_HANDLER_T done_hdlr;
> };
> 
> struct HAL_SE_HASH_CFG_T {
>     const void *in;
>     uint32_t in_len;
>     HAL_SC_DONE_HANDLER_T done_hdlr;
> };
> 
> enum HAL_SE_RET_T hal_se_open(void);
> 
> enum HAL_SE_RET_T hal_se_close(void);
> 
> enum HAL_SE_RET_T hal_se_aes_encrypt(const struct HAL_SE_AES_CFG_T *cfg);
> 
> enum HAL_SE_RET_T hal_se_aes_decrypt(const struct HAL_SE_AES_CFG_T *cfg);
> 
> int hal_se_aes_busy(void);
> 
> enum HAL_SE_RET_T hal_se_aes_reset(void);
> 
> enum HAL_SE_RET_T hal_se_hash_init(enum HAL_SE_HASH_MODE_T mode);
> 
> enum HAL_SE_RET_T hal_se_hash_update(const struct HAL_SE_HASH_CFG_T *cfg);
25,40c119,165
< enum HAL_SDMMC_ID_T {
<     HAL_SDMMC_ID_0 = 0,
<     HAL_SDMMC_ID_NUM,
< };
< 
< typedef void (*HAL_SDMMC_DELAY_FUNC)(uint32_t ms);
< 
< /* hal api */
< HAL_SDMMC_DELAY_FUNC hal_sdmmc_set_delay_func(HAL_SDMMC_DELAY_FUNC new_func);
< int32_t hal_sdmmc_open(enum HAL_SDMMC_ID_T id);
< void hal_sdmmc_info(enum HAL_SDMMC_ID_T id, uint32_t *sector_count, uint32_t *sector_size);
< uint32_t hal_sdmmc_read_blocks(enum HAL_SDMMC_ID_T id, uint32_t start_block, uint32_t block_count, uint8_t* dest);
< uint32_t hal_sdmmc_write_blocks(enum HAL_SDMMC_ID_T id, uint32_t start_block, uint32_t block_count, uint8_t* src);
< void hal_sdmmc_close(enum HAL_SDMMC_ID_T id);
< void hal_sdmmc_dump(enum HAL_SDMMC_ID_T id);
< int hal_sdmmc_enable_detecter(enum HAL_SDMMC_ID_T id,void (* cb)(uint8_t));
---
> enum HAL_SE_RET_T hal_se_hash_final(const struct HAL_SE_HASH_CFG_T *cfg, uint64_t total_in_len);
> 
> enum HAL_SE_RET_T hal_se_hash(enum HAL_SE_HASH_MODE_T mode, const struct HAL_SE_HASH_CFG_T *cfg);
> 
> enum HAL_SE_RET_T hal_se_hash_get_digest(void *out, uint32_t out_len, uint32_t *real_len);
> 
> int hal_se_hash_busy(void);
> 
> enum HAL_SE_RET_T hal_se_hash_reset(void);
> 
> enum HAL_SE_RET_T hal_se_hmac_init(enum HAL_SE_HASH_MODE_T mode, const void *key, uint32_t key_len);
> 
> enum HAL_SE_RET_T hal_se_hmac_update(const struct HAL_SE_HASH_CFG_T *cfg);
> 
> enum HAL_SE_RET_T hal_se_hmac_final(const struct HAL_SE_HASH_CFG_T *cfg, uint64_t total_in_len);
> 
> enum HAL_SE_RET_T hal_se_hmac(enum HAL_SE_HASH_MODE_T mode, const void *key, uint32_t key_len, const struct HAL_SE_HASH_CFG_T *cfg);
> 
> enum HAL_SE_RET_T hal_se_hmac_get_digest(void *out, uint32_t out_len, uint32_t *real_len);
> 
> int hal_se_hmac_busy(void);
> 
> enum HAL_SE_RET_T hal_se_hmac_reset(void);
> 
> // ------------------------------------------------------------------------------
> // ROM Functions
> // ------------------------------------------------------------------------------
> 
> enum HAL_SE_RET_T hal_se_rom_open(void);
> 
> enum HAL_SE_RET_T hal_se_rom_close(void);
> 
> int hal_se_hash_rom_done(void);
> 
> int hal_se_hash_rom_busy(void);
> 
> int hal_se_hash_dma_rom_busy(void);
> 
> enum HAL_SE_RET_T hal_se_hash_rom_init(enum HAL_SE_HASH_MODE_T mode);
> 
> enum HAL_SE_RET_T hal_se_hash_rom_update(const struct HAL_SE_HASH_CFG_T *cfg);
> 
> enum HAL_SE_RET_T hal_se_hash_rom_final(const struct HAL_SE_HASH_CFG_T *cfg, uint64_t total_in_len);
> 
> enum HAL_SE_RET_T hal_se_hash_rom_get_digest(void *out, uint32_t out_len, uint32_t *real_len);
> 
> enum HAL_SE_RET_T hal_se_hash_rom(enum HAL_SE_HASH_MODE_T mode, const struct HAL_SE_HASH_CFG_T *cfg);
46c171
< #endif /* _HAL_SDMMC_H_ */
---
> #endif
