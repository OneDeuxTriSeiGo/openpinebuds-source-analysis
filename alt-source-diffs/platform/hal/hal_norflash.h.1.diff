local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/hal_norflash.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/hal/hal_norflash.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
25a25,27
> // 64M Bytes
> #define HAL_NORFLASH_ADDR_MASK              0x03FFFFFF
> 
27a30
> #define HAL_NORFLASH_CP_ID_LEN              2
30,33c33,46
< enum HAL_NORFLASH_ID_T {
<     HAL_NORFLASH_ID_0 = 0,
<     HAL_NORFLASH_ID_NUM,
< };
---
> #define FLASH_SECTOR_SIZE_IN_BYTES          4096
> #define FLASH_BLOCK_SIZE_IN_BYTES           (32*1024)
> 
> #define NORFLASH_PUYA_ID_PREFIX             0x85
> 
> #define NORFLASH_XTS_ID_PREFIX              0x0B
> 
> #define NORFLASH_XMC_ID_PREFIX              0x20
> 
> #define NORFLASH_ZBIT_ID_PREFIX             0x5E
> 
> #define NORFLASH_WB_ID_PREFIX               0xEF
> 
> #define NORFLASH_GD_ID_PREFIX               0xC8
46a60,62
>     HAL_NORFLASH_BAD_REMAP_ID,
>     HAL_NORFLASH_BAD_REMAP_OFFSET,
>     HAL_NORFLASH_BAD_ERASE_TYPE,
63a80,88
> enum HAL_NORFLASH_REMAP_ID_T {
>     HAL_NORFLASH_REMAP_ID_0,
>     HAL_NORFLASH_REMAP_ID_1,
>     HAL_NORFLASH_REMAP_ID_2,
>     HAL_NORFLASH_REMAP_ID_3,
> 
>     HAL_NORFLASH_REMAP_ID_QTY,
> };
> 
68,79c93,106
<     /* standard spi mode */
<     HAL_NORFLASH_OP_MODE_STAND_SPI              = 0x1,
<     /* fast spi mode*/
<     HAL_NORFLASH_OP_MODE_FAST_SPI               = 0x2,
<      /* dual mode */
<     HAL_NORFLASH_OP_MODE_DUAL_OUTPUT            = 0x4,
<     /* dual mode */
<     HAL_NORFLASH_OP_MODE_DUAL_IO                = 0x8,
<     /* quad mode */
<     HAL_NORFLASH_OP_MODE_QUAD_OUTPUT            = 0x10,
<     /* quad mode */
<     HAL_NORFLASH_OP_MODE_QUAD_IO                = 0x20,
---
>     // standard spi mode
>     HAL_NORFLASH_OP_MODE_STAND_SPI              = (1 << 0),
>     // fast spi mode
>     HAL_NORFLASH_OP_MODE_FAST_SPI               = (1 << 1),
>     // dual mode
>     HAL_NORFLASH_OP_MODE_DUAL_OUTPUT            = (1 << 2),
>     // dual mode
>     HAL_NORFLASH_OP_MODE_DUAL_IO                = (1 << 3),
>     // quad mode
>     HAL_NORFLASH_OP_MODE_QUAD_OUTPUT            = (1 << 4),
>     // quad mode
>     HAL_NORFLASH_OP_MODE_QUAD_IO                = (1 << 5),
>     // dtr mode
>     HAL_NORFLASH_OP_MODE_DTR                    = (1 << 6),
84c111
<     HAL_NORFLASH_OP_MODE_CONTINUOUS_READ        = 0x40,
---
>     HAL_NORFLASH_OP_MODE_CONTINUOUS_READ        = (1 << 12),
86c113
<     HAL_NORFLASH_OP_MODE_HIGH_PERFORMANCE       = 0x80,
---
>     HAL_NORFLASH_OP_MODE_HIGH_PERFORMANCE       = (1 << 13),
88c115
<     HAL_NORFLASH_OP_MODE_READ_WRAP              = 0x100,
---
>     HAL_NORFLASH_OP_MODE_READ_WRAP              = (1 << 14),
92c119
<     HAL_NORFLASH_OP_MODE_PAGE_PROGRAM           = 0x200,
---
>     HAL_NORFLASH_OP_MODE_PAGE_PROGRAM           = (1 << 16),
94c121
<     HAL_NORFLASH_OP_MODE_DUAL_PAGE_PROGRAM      = 0x400,
---
>     HAL_NORFLASH_OP_MODE_DUAL_PAGE_PROGRAM      = (1 << 17),
96c123,125
<     HAL_NORFLASH_OP_MODE_QUAD_PAGE_PROGRAM      = 0x800,
---
>     HAL_NORFLASH_OP_MODE_QUAD_PAGE_PROGRAM      = (1 << 18),
>     // erase in standard spi mode
>     HAL_NORFLASH_OP_MODE_ERASE_IN_STD           = (1 << 19),
100,102c129
<     HAL_NORFLASH_OP_MODE_SUSPEND                = 0x1000,
<     // erase in standard spi mode
<     HAL_NORFLASH_OP_MODE_ERASE_IN_STD           = 0x2000,
---
>     HAL_NORFLASH_OP_MODE_SUSPEND                = (1 << 24),
116c143
<     uint8_t cmdquad:1;
---
>     uint8_t reserved_3:1;
138a166,172
> #ifdef ARM_CMNS
> #define NORFLASH_API_WRAP(n)                                         n##_se
> #else
> #define NORFLASH_API_WRAP(n)                                         n
> #endif
> 
> #ifndef ARM_CMNS
140c174
< void hal_norflash_set_freq(enum HAL_CMU_FREQ_T freq);
---
> void hal_norflash_set_boot_freq(enum HAL_CMU_FREQ_T freq);
144,148c178,182
< enum HAL_NORFLASH_RET_T hal_norflash_open(enum HAL_NORFLASH_ID_T id, const struct HAL_NORFLASH_CONFIG_T *cfg);
< enum HAL_NORFLASH_RET_T hal_norflash_reopen(enum HAL_NORFLASH_ID_T id, const struct HAL_NORFLASH_CONFIG_T *cfg);
< enum HAL_NORFLASH_RET_T hal_norflash_apply_config(enum HAL_NORFLASH_ID_T id, const struct HAL_NORFLASH_CONFIG_T *cfg, uint32_t timing_idx);
< uint32_t hal_norflash_get_timing_index(enum HAL_NORFLASH_ID_T id);
< void hal_norflash_show_calib_result(void);
---
> enum HAL_NORFLASH_RET_T hal_norflash_open(enum HAL_FLASH_ID_T id, const struct HAL_NORFLASH_CONFIG_T *cfg);
> enum HAL_NORFLASH_RET_T hal_norflash_reopen(enum HAL_FLASH_ID_T id, const struct HAL_NORFLASH_CONFIG_T *cfg);
> enum HAL_NORFLASH_RET_T hal_norflash_apply_config(enum HAL_FLASH_ID_T id, const struct HAL_NORFLASH_CONFIG_T *cfg, uint32_t timing_idx);
> uint32_t hal_norflash_get_timing_index(enum HAL_FLASH_ID_T id);
> void hal_norflash_show_calib_result(enum HAL_FLASH_ID_T id);
150,167c184,201
< enum HAL_NORFLASH_RET_T hal_norflash_get_size(enum HAL_NORFLASH_ID_T id, uint32_t *total_size, uint32_t *block_size, uint32_t *sector_size, uint32_t *page_size);
< enum HAL_NORFLASH_RET_T hal_norflash_get_boundary(enum HAL_NORFLASH_ID_T id, uint32_t address, uint32_t* block_boundary, uint32_t* sector_boundary);
< enum HAL_NORFLASH_RET_T hal_norflash_get_id(enum HAL_NORFLASH_ID_T id, uint8_t *value, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_get_unique_id(enum HAL_NORFLASH_ID_T id, uint8_t *value, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_enable_protection(enum HAL_NORFLASH_ID_T id);
< enum HAL_NORFLASH_RET_T hal_norflash_disable_protection(enum HAL_NORFLASH_ID_T id);
< enum HAL_NORFLASH_RET_T hal_norflash_erase_chip(enum HAL_NORFLASH_ID_T id);
< enum HAL_NORFLASH_RET_T hal_norflash_erase_suspend(enum HAL_NORFLASH_ID_T id, uint32_t start_address, uint32_t len, int suspend);
< enum HAL_NORFLASH_RET_T hal_norflash_erase(enum HAL_NORFLASH_ID_T id, uint32_t start_address, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_erase_resume(enum HAL_NORFLASH_ID_T id, int suspend);
< enum HAL_NORFLASH_RET_T hal_norflash_write_suspend(enum HAL_NORFLASH_ID_T id, uint32_t start_address, const uint8_t *buffer, uint32_t len, int suspend);
< enum HAL_NORFLASH_RET_T hal_norflash_write(enum HAL_NORFLASH_ID_T id, uint32_t start_address, const uint8_t *buffer, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_write_resume(enum HAL_NORFLASH_ID_T id, int suspend);
< enum HAL_NORFLASH_RET_T hal_norflash_suspend_check_irq(enum HAL_NORFLASH_ID_T id, uint32_t irq_num);
< enum HAL_NORFLASH_RET_T hal_norflash_read(enum HAL_NORFLASH_ID_T id, uint32_t start_address, uint8_t *buffer, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_close(enum HAL_NORFLASH_ID_T id);
< void hal_norflash_sleep(enum HAL_NORFLASH_ID_T id);
< void hal_norflash_wakeup(enum HAL_NORFLASH_ID_T id);
---
> enum HAL_NORFLASH_RET_T hal_norflash_get_size(enum HAL_FLASH_ID_T id, uint32_t *total_size, uint32_t *block_size, uint32_t *sector_size, uint32_t *page_size);
> enum HAL_NORFLASH_RET_T hal_norflash_get_boundary(enum HAL_FLASH_ID_T id, uint32_t address, uint32_t* block_boundary, uint32_t* sector_boundary);
> enum HAL_NORFLASH_RET_T hal_norflash_get_id(enum HAL_FLASH_ID_T id, uint8_t *value, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_get_unique_id(enum HAL_FLASH_ID_T id, uint8_t *value, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_enable_protection(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_disable_protection(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_erase_chip(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_erase_suspend(enum HAL_FLASH_ID_T id, uint32_t start_address, uint32_t len, int suspend);
> enum HAL_NORFLASH_RET_T hal_norflash_erase(enum HAL_FLASH_ID_T id, uint32_t start_address, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_erase_resume(enum HAL_FLASH_ID_T id, int suspend);
> enum HAL_NORFLASH_RET_T hal_norflash_write_suspend(enum HAL_FLASH_ID_T id, uint32_t start_address, const uint8_t *buffer, uint32_t len, int suspend);
> enum HAL_NORFLASH_RET_T hal_norflash_write(enum HAL_FLASH_ID_T id, uint32_t start_address, const uint8_t *buffer, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_write_resume(enum HAL_FLASH_ID_T id, int suspend);
> enum HAL_NORFLASH_RET_T hal_norflash_suspend_check_irq(enum HAL_FLASH_ID_T id, uint32_t irq_num);
> enum HAL_NORFLASH_RET_T hal_norflash_read(enum HAL_FLASH_ID_T id, uint32_t start_address, uint8_t *buffer, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_close(enum HAL_FLASH_ID_T id);
> void hal_norflash_sleep(enum HAL_FLASH_ID_T id);
> void hal_norflash_wakeup(enum HAL_FLASH_ID_T id);
169,179c203,331
< uint32_t hal_norflash_get_flash_total_size(enum HAL_NORFLASH_ID_T id);
< int hal_norflash_opened(enum HAL_NORFLASH_ID_T id);
< enum HAL_NORFLASH_RET_T hal_norflash_get_open_state(enum HAL_NORFLASH_ID_T id);
< enum HAL_NORFLASH_RET_T hal_norflash_security_register_lock(enum HAL_NORFLASH_ID_T id, uint32_t start_address, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_security_register_erase(enum HAL_NORFLASH_ID_T id, uint32_t start_address, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_security_register_write(enum HAL_NORFLASH_ID_T id, uint32_t start_address, const uint8_t *buffer, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_security_register_read(enum HAL_NORFLASH_ID_T id, uint32_t start_address, uint8_t *buffer, uint32_t len);
< enum HAL_NORFLASH_RET_T hal_norflash_enable_remap(enum HAL_NORFLASH_ID_T id, uint32_t addr, uint32_t len, uint32_t offset);
< enum HAL_NORFLASH_RET_T hal_norflash_disable_remap(enum HAL_NORFLASH_ID_T id);
< enum HAL_NORFLASH_RET_T hal_norflash_re_enable_remap(enum HAL_NORFLASH_ID_T id);
< int hal_norflash_get_remap_status(enum HAL_NORFLASH_ID_T id);
---
> uint32_t hal_norflash_mem_read_bus_lock(enum HAL_FLASH_ID_T id);
> void hal_norflash_mem_read_bus_unlock(enum HAL_FLASH_ID_T id, uint32_t status);
> uint32_t hal_norflash_get_flash_total_size(enum HAL_FLASH_ID_T id);
> int hal_norflash_opened(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_get_open_state(enum HAL_FLASH_ID_T id);
> int hal_norflash_security_register_is_locked(enum HAL_FLASH_ID_T id, uint32_t start_address, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_security_register_lock(enum HAL_FLASH_ID_T id, uint32_t start_address, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_security_register_erase(enum HAL_FLASH_ID_T id, uint32_t start_address, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_security_register_write(enum HAL_FLASH_ID_T id, uint32_t start_address, const uint8_t *buffer, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_security_register_read(enum HAL_FLASH_ID_T id, uint32_t start_address, uint8_t *buffer, uint32_t len);
> void hal_norflash_reset_remap(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_config_remap(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t addr, uint32_t len, uint32_t offset);
> enum HAL_NORFLASH_RET_T hal_norflash_enable_remap(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> enum HAL_NORFLASH_RET_T hal_norflash_disable_remap(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> int hal_norflash_get_remap_status(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> void hal_norflash_boot_reset_remap(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_boot_config_remap(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t addr, uint32_t len, uint32_t offset);
> enum HAL_NORFLASH_RET_T hal_norflash_boot_disable_remap(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> enum HAL_NORFLASH_RET_T hal_norflash_boot_enable_remap(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> int hal_norflash_boot_get_remap_status(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> #else /* !ARM_CMNS */
> #define hal_norflash_get_id hal_norflash_get_id_se
> #define hal_norflash_get_flash_total_size hal_norflash_get_flash_total_size_se
> #define hal_norflash_get_size hal_norflash_get_size_se
> #define hal_norflash_show_calib_result hal_norflash_show_calib_result_se
> #define hal_norflash_erase hal_norflash_erase_se
> #define hal_norflash_write hal_norflash_write_se
> #define hal_norflash_read hal_norflash_read_se
> #define hal_norflash_sleep hal_norflash_sleep_se
> #define hal_norflash_wakeup hal_norflash_wakeup_se
> #define hal_norflash_opened hal_norflash_opened_se
> #define hal_norflash_get_open_state hal_norflash_get_open_state_se
> #define hal_norflash_write_resume hal_norflash_write_resume_se
> #define hal_norflash_erase_resume hal_norflash_erase_resume_se
> #define hal_norflash_write_suspend hal_norflash_write_suspend_se
> #define hal_norflash_erase_suspend hal_norflash_erase_suspend_se
> #define hal_norflash_enable_remap hal_norflash_enable_remap_se
> #define hal_norflash_disable_remap hal_norflash_disable_remap_se
> #define hal_norflash_config_remap hal_norflash_config_remap_se
> #define hal_norflash_get_remap_status hal_norflash_get_remap_status_se
> #define hal_norflash_get_unique_id hal_norflash_get_unique_id_se
> #define hal_norflash_disable_protection hal_norflash_disable_protection_se
> #define hal_norflash_security_register_lock hal_norflash_security_register_lock_se
> #define hal_norflash_security_register_read hal_norflash_security_register_read_se
> #define hal_norflash_erase_remap hal_norflash_erase_remap_se
> #define hal_norflash_write_remap hal_norflash_write_remap_se
> #define hal_norflash_read_remap hal_norflash_read_remap_se
> 
> enum HAL_NORFLASH_RET_T hal_norflash_get_id_se(enum HAL_FLASH_ID_T id, uint8_t *value, uint32_t len);
> uint32_t hal_norflash_get_flash_total_size_se(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_get_size_se0(uint32_t *total_size,
>     uint32_t *block_size, uint32_t *sector_size, uint32_t *page_size);
> enum HAL_NORFLASH_RET_T hal_norflash_get_size_se1(uint32_t *total_size,
>     uint32_t *block_size, uint32_t *sector_size, uint32_t *page_size);
> static inline enum HAL_NORFLASH_RET_T hal_norflash_get_size_se(enum HAL_FLASH_ID_T id, uint32_t *total_size,
>     uint32_t *block_size, uint32_t *sector_size, uint32_t *page_size)
> {
>     if (id == HAL_FLASH_ID_0)
>         return hal_norflash_get_size_se0(total_size, block_size, sector_size, page_size);
>     else if (id == HAL_FLASH_ID_1)
>         return hal_norflash_get_size_se1(total_size, block_size, sector_size, page_size);
>     else
>         return HAL_NORFLASH_BAD_ID;
> }
> void hal_norflash_show_calib_result_se(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_erase_se(enum HAL_FLASH_ID_T id, uint32_t start_address, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_write_se(enum HAL_FLASH_ID_T id, uint32_t start_address, const uint8_t *buffer, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_read_se(enum HAL_FLASH_ID_T id, uint32_t start_address, uint8_t *buffer, uint32_t len);
> void hal_norflash_sleep_se(enum HAL_FLASH_ID_T id);
> void hal_norflash_wakeup_se(enum HAL_FLASH_ID_T id);
> int hal_norflash_opened_se(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_get_open_state_se(enum HAL_FLASH_ID_T id);
> enum HAL_NORFLASH_RET_T hal_norflash_write_resume_se(enum HAL_FLASH_ID_T id, int suspend);
> enum HAL_NORFLASH_RET_T hal_norflash_erase_resume_se(enum HAL_FLASH_ID_T id, int suspend);
> enum HAL_NORFLASH_RET_T hal_norflash_enable_remap_se(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> enum HAL_NORFLASH_RET_T hal_norflash_disable_remap_se(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> enum HAL_NORFLASH_RET_T hal_norflash_config_remap_se0(enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t addr, uint32_t len, uint32_t offset);
> enum HAL_NORFLASH_RET_T hal_norflash_config_remap_se1(enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t addr, uint32_t len, uint32_t offset);
> static inline enum HAL_NORFLASH_RET_T hal_norflash_config_remap_se(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t addr, uint32_t len, uint32_t offset)
> {
>     if (id == HAL_FLASH_ID_0)
>         return hal_norflash_config_remap_se0(remap_id, addr, len, offset);
>     else if (id == HAL_FLASH_ID_1)
>         return hal_norflash_config_remap_se1(remap_id, addr, len, offset);
>     else
>         return HAL_NORFLASH_BAD_ID;
> }
> int hal_norflash_get_remap_status_se(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id);
> enum HAL_NORFLASH_RET_T hal_norflash_write_suspend_se0(uint32_t start_address, const uint8_t *buffer, uint32_t len, int suspend);
> enum HAL_NORFLASH_RET_T hal_norflash_write_suspend_se1(uint32_t start_address, const uint8_t *buffer, uint32_t len, int suspend);
> static inline enum HAL_NORFLASH_RET_T hal_norflash_write_suspend_se(enum HAL_FLASH_ID_T id, uint32_t start_address, const uint8_t *buffer, uint32_t len, int suspend)
> {
>     if (id == HAL_FLASH_ID_0)
>         return hal_norflash_write_suspend_se0(start_address, buffer, len, suspend);
>     else if (id == HAL_FLASH_ID_1)
>         return hal_norflash_write_suspend_se1(start_address, buffer, len, suspend);
>     else
>         return HAL_NORFLASH_BAD_ID;
> }
> enum HAL_NORFLASH_RET_T hal_norflash_get_unique_id_se(enum HAL_FLASH_ID_T id, uint8_t *value, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_security_register_lock_se(enum HAL_FLASH_ID_T id, uint32_t start_address, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_security_register_read_se(enum HAL_FLASH_ID_T id, uint32_t start_address, uint8_t *buffer, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_erase_suspend_se(enum HAL_FLASH_ID_T id, uint32_t start_address, uint32_t len, int suspend);
> enum HAL_NORFLASH_RET_T hal_norflash_disable_protection_se(enum HAL_FLASH_ID_T id);
> 
> enum HAL_NORFLASH_RET_T hal_norflash_read_remap_se0(enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t start_address, uint8_t *buffer, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_read_remap_se1(enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t start_address, uint8_t *buffer, uint32_t len);
> static inline enum HAL_NORFLASH_RET_T hal_norflash_read_remap_se(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t start_address, uint8_t *buffer, uint32_t len)
> {
>     if (id == HAL_FLASH_ID_0)
>         return hal_norflash_read_remap_se0(remap_id, start_address, buffer, len);
>     else if (id == HAL_FLASH_ID_1)
>         return hal_norflash_read_remap_se1(remap_id, start_address, buffer, len);
>     else
>         return HAL_NORFLASH_BAD_ID;
> }
> enum HAL_NORFLASH_RET_T hal_norflash_write_remap_se0(enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t start_address, uint8_t *buffer, uint32_t len);
> enum HAL_NORFLASH_RET_T hal_norflash_write_remap_se1(enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t start_address, uint8_t *buffer, uint32_t len);
> static inline enum HAL_NORFLASH_RET_T hal_norflash_write_remap_se(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t start_address, uint8_t *buffer, uint32_t len)
> {
>     if (id == HAL_FLASH_ID_0)
>         return hal_norflash_write_remap_se0(remap_id, start_address, buffer, len);
>     else if (id == HAL_FLASH_ID_1)
>         return hal_norflash_write_remap_se1(remap_id, start_address, buffer, len);
>     else
>         return HAL_NORFLASH_BAD_ID;
> }
> enum HAL_NORFLASH_RET_T hal_norflash_erase_remap_se(enum HAL_FLASH_ID_T id, enum HAL_NORFLASH_REMAP_ID_T remap_id, uint32_t start_address, uint32_t len);
> #endif /* ARM_CMNS */
