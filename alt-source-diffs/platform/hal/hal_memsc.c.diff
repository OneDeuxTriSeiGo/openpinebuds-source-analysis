local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/hal_memsc.c
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/hal/hal_memsc.c
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
17d15
< #include "hal_memsc.h"
18a17,28
> #include "hal_location.h"
> #include "hal_memsc.h"
> 
> #ifdef CHIP_SUBSYS_SENS
> #include CHIP_SPECIFIC_HDR(reg_senscmu)
> 
> static struct SENSCMU_T * const cmu = (struct SENSCMU_T *)SENS_CMU_BASE;
> #else
> #include CHIP_SPECIFIC_HDR(reg_cmu)
> 
> static struct CMU_T * const cmu = (struct CMU_T *)CMU_BASE;
> #endif
22c32
<     if (id >= HAL_MEMSC_ID_QTY) {
---
>     if (id >= ARRAY_SIZE(cmu->MEMSC)) {
26c36
<     return (hal_cmu_get_memsc_addr())[id];
---
>     return cmu->MEMSC[id];
31c41
<     if (id >= HAL_MEMSC_ID_QTY) {
---
>     if (id >= ARRAY_SIZE(cmu->MEMSC)) {
35c45
<     (hal_cmu_get_memsc_addr())[id] = 1;
---
>     cmu->MEMSC[id] = 1;
40c50,82
<     if (id >= HAL_MEMSC_ID_QTY) {
---
>     if (id >= ARRAY_SIZE(cmu->MEMSC)) {
>         return false;
>     }
> 
>     return !!(cmu->MEMSC_STATUS & (1 << id));
> }
> 
> #ifdef AON_CMU_BASE
> #include CHIP_SPECIFIC_HDR(reg_aoncmu)
> 
> static struct AONCMU_T * const aoncmu = (struct AONCMU_T *)AON_CMU_BASE;
> 
> int BOOT_TEXT_SRAM_LOC hal_memsc_aon_lock(enum HAL_MEMSC_AON_ID_T id)
> {
>     if (id >= ARRAY_SIZE(aoncmu->MEMSC)) {
>         return 0;
>     }
> 
>     return aoncmu->MEMSC[id];
> }
> 
> void BOOT_TEXT_SRAM_LOC hal_memsc_aon_unlock(enum HAL_MEMSC_AON_ID_T id)
> {
>     if (id >= ARRAY_SIZE(aoncmu->MEMSC)) {
>         return;
>     }
> 
>     aoncmu->MEMSC[id] = 1;
> }
> 
> bool hal_memsc_aon_avail(enum HAL_MEMSC_AON_ID_T id)
> {
>     if (id >= ARRAY_SIZE(aoncmu->MEMSC)) {
44c86
<     return !!((hal_cmu_get_memsc_addr())[4] & (1 << id));
---
>     return !!(aoncmu->MEMSC_STATUS & (1 << id));
45a88
> #endif
