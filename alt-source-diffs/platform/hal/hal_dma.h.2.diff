local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/hal_dma.h
remote: https://raw.githubusercontent.com/alibaba/AliOS-Things/a99f20706f9c666903a12a205edce13263b1fadb/hardware/chip/haas1000/drivers/platform/hal/hal_dma.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
106,109d104
<     HAL_GPDMA_I2C2_RX           = 30,
<     HAL_GPDMA_I2C2_TX           = 31,
<     HAL_GPDMA_I2C3_RX           = 32,
<     HAL_GPDMA_I2C3_TX           = 33,
185,191d179
< struct HAL_DMA_BURST_ADDR_INC_T {
<     bool src_inc_en;
<     bool dst_inc_en;
<     int16_t src_inc_val;
<     int16_t dst_inc_val;
< };
< 
193a182
> #if (CHIP_HAS_DMA != 0)
198,201d186
< void hal_dma_sleep(void);
< 
< void hal_dma_wakeup(void);
< 
231,232d215
< void hal_dma_get_cur_src_remain_and_addr(uint8_t ch, uint32_t *remain, uint32_t *src);
< 
245a229,265
> #else /*CHIP_HAS_DMA != 0*/
> static inline void hal_dma_open(void) {}
> 
> static inline void hal_dma_close(void) {}
> 
> static inline bool hal_dma_chan_busy(uint8_t ch) {return true;}
> 
> static inline uint8_t hal_dma_get_chan(enum HAL_DMA_PERIPH_T periph, enum HAL_DMA_GET_CHAN_T policy) {return HAL_DMA_CHAN_NONE;}
> 
> static inline void hal_dma_free_chan(uint8_t ch) {}
> 
> static inline uint32_t hal_dma_cancel(uint8_t ch) {return 0;}
> 
> static inline uint32_t hal_dma_stop(uint8_t ch) {return 0;}
> 
> static inline enum HAL_DMA_RET_T hal_dma_init_desc(struct HAL_DMA_DESC_T *desc,
>                                      const struct HAL_DMA_CH_CFG_T *cfg,
>                                      const struct HAL_DMA_DESC_T *next,
>                                      int tc_irq) {return HAL_DMA_ERR;}
> 
> static inline enum HAL_DMA_RET_T hal_dma_sg_start(const struct HAL_DMA_DESC_T *desc,
>                                     const struct HAL_DMA_CH_CFG_T *cfg) {return HAL_DMA_ERR;}
> 
> static inline enum HAL_DMA_RET_T hal_dma_sg_2d_start(const struct HAL_DMA_DESC_T *desc,
>                                        const struct HAL_DMA_CH_CFG_T *cfg,
>                                        const struct HAL_DMA_2D_CFG_T *src_2d,
>                                        const struct HAL_DMA_2D_CFG_T *dst_2d) {return HAL_DMA_ERR;}
> 
> static inline enum HAL_DMA_RET_T hal_dma_start(const struct HAL_DMA_CH_CFG_T *cfg) {return HAL_DMA_ERR;}
> 
> static inline uint32_t hal_dma_get_cur_src_addr(uint8_t ch) {return 0;}
> 
> static inline uint32_t hal_dma_get_cur_dst_addr(uint8_t ch) {return 0;}
> 
> static inline uint32_t hal_dma_get_sg_remain_size(uint8_t ch) {return 0;}
> 
> static inline enum HAL_DMA_RET_T hal_dma_irq_run_chan(uint8_t ch) {return HAL_DMA_ERR;}
247c267
< void hal_dma_set_burst_addr_inc(uint8_t ch, const struct HAL_DMA_BURST_ADDR_INC_T *inc);
---
> static inline bool hal_dma_busy(void) {return true;}
249c269
< void hal_dma_clear_burst_addr_inc(uint8_t ch);
---
> static inline HAL_DMA_DELAY_FUNC hal_dma_set_delay_func(HAL_DMA_DELAY_FUNC new_func) {return (HAL_DMA_DELAY_FUNC)0;}
251c271
< void hal_dma_set_desc_burst_addr_inc(struct HAL_DMA_DESC_T *desc, const struct HAL_DMA_BURST_ADDR_INC_T *inc);
---
> static inline void hal_dma_remap_periph(enum HAL_DMA_PERIPH_T periph, int enable) {}
253c273
< void hal_dma_clear_desc_burst_addr_inc(struct HAL_DMA_DESC_T *desc);
---
> static inline void hal_dma_tc_irq_enable(uint8_t ch) {}
254a275,276
> static inline void hal_dma_tc_irq_disable(uint8_t ch) {}
> #endif /*CHIP_HAS_DMA != 0*/
