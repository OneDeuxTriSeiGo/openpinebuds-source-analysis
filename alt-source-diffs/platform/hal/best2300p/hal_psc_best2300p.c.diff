local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/best2300p/hal_psc_best2300p.c
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/hal/best2003/hal_psc_best2003.c
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
18c17
< #include "hal_timer.h"
---
> #include "hal_gpio.h"
20a20
> #include "hal_timer.h"
24a25,34
> enum PSC_INTR_MASK2_T {
>     PSC_INTR_MASK2_GPADC        = (1 << 8),
>     PSC_INTR_MASK2_TIMER        = (1 << 9),
>     PSC_INTR_MASK2_WDT          = (1 << 10),
>     PSC_INTR_MASK2_PMU          = (1 << 11),
>     PSC_INTR_MASK2_CHARGE       = (1 << 12),
>     PSC_INTR_MASK2_CODEC        = (1 << 13),
>     PSC_INTR_MASK2_WAKEUP_BT    = (1 << 14),
> };
> 
25a36
> BOOT_BSS_LOC static unsigned char g_psc_enable_flags = 0;
29,43c40,62
<     // Setup wakeup mask
<     psc->REG_080 = 0xFFFFFFFF;
<     psc->REG_084 = 0xFFFFFFFF;
< }
< 
< void SRAM_TEXT_LOC hal_psc_core_auto_power_down(void)
< {
<     psc->REG_018 = PSC_WRITE_ENABLE | 0;
<     psc->REG_000 = PSC_WRITE_ENABLE | PSC_AON_MCU_PG_AUTO_EN;
<     psc->REG_010 = PSC_WRITE_ENABLE | PSC_AON_MCU_POWERDN_START;
< }
< 
< void SRAM_TEXT_LOC hal_psc_mcu_auto_power_up(void)
< {
<     psc->REG_014 = PSC_WRITE_ENABLE | PSC_AON_MCU_POWERUP_START;
---
>     // Setup MCU wakeup mask
>     psc->REG_080 = 0;
>     psc->REG_084 = 0;
> 
>     // Setup BT wakeup mask
>     psc->REG_090 = 0;
>     psc->REG_094 = PSC_INTR_MASK2_WAKEUP_BT;
> 
>     // Setup WLAN wakeup mask
>     psc->REG_0A0 = 0;
>     psc->REG_0A4 = 0;
> 
>     psc->REG_124 |= PSC_AON_PWR_MEM_SEL_AON_MCU | PSC_AON_PWR_MEM_SEL_AON_BT |
>         PSC_AON_PWR_MEM_SEL_AON_WF | PSC_AON_PWR_MEM_SEL_AON_A7;
> 
>     // Power down WLAN
>     hal_psc_wlan_disable();
>     // Power down BT
>     hal_psc_bt_disable();
>     // Power down A7
>     hal_psc_a7_disable();
>     // Power down Codec
>     hal_psc_codec_disable();
47a67,69
>     if(!g_psc_enable_flags)
>     {
>         g_psc_enable_flags = 1;
70a93,94
> }
> 
72a97,114
>     if(g_psc_enable_flags)
>     {
>         g_psc_enable_flags = 0;
>         psc->REG_078 = PSC_WRITE_ENABLE |
>             PSC_AON_CODEC_PSW_EN_DR |
>             PSC_AON_CODEC_RESETN_ASSERT_DR |
>             PSC_AON_CODEC_ISO_EN_DR |
>             PSC_AON_CODEC_CLK_STOP_DR | PSC_AON_CODEC_CLK_STOP_REG;
>         psc->REG_078 = PSC_WRITE_ENABLE |
>             PSC_AON_CODEC_PSW_EN_DR |
>             PSC_AON_CODEC_RESETN_ASSERT_DR |
>             PSC_AON_CODEC_ISO_EN_DR | PSC_AON_CODEC_ISO_EN_REG |
>             PSC_AON_CODEC_CLK_STOP_DR | PSC_AON_CODEC_CLK_STOP_REG;
>         psc->REG_078 = PSC_WRITE_ENABLE |
>             PSC_AON_CODEC_PSW_EN_DR |
>             PSC_AON_CODEC_RESETN_ASSERT_DR | PSC_AON_CODEC_RESETN_ASSERT_REG |
>             PSC_AON_CODEC_ISO_EN_DR | PSC_AON_CODEC_ISO_EN_REG |
>             PSC_AON_CODEC_CLK_STOP_DR | PSC_AON_CODEC_CLK_STOP_REG;
78a121
> }
104,106c147,149
< #ifdef JTAG_BT
<     psc->REG_064 |= PSC_AON_CODEC_RESERVED(1 << 3);
<     psc->REG_064 &= ~PSC_AON_CODEC_RESERVED(1 << 2);
---
> #ifdef CORE_SLEEP_POWER_DOWN
>     psc->REG_020 = PSC_WRITE_ENABLE | PSC_AON_BT_PG_AUTO_EN | PSC_AON_BT_PG_HW_EN;
>     psc->REG_038 = PSC_WRITE_ENABLE | 0;
112,116c155,169
< #ifdef JTAG_BT
<     psc->REG_064 &= ~PSC_AON_CODEC_RESERVED(1 << 3);
<     psc->REG_064 |= PSC_AON_CODEC_RESERVED(1 << 2);
< #endif
< 
---
>     psc->REG_038 = PSC_WRITE_ENABLE |
>         PSC_AON_BT_PSW_EN_DR |
>         PSC_AON_BT_RESETN_ASSERT_DR |
>         PSC_AON_BT_ISO_EN_DR |
>         PSC_AON_BT_CLK_STOP_DR | PSC_AON_BT_CLK_STOP_REG;
>     psc->REG_038 = PSC_WRITE_ENABLE |
>         PSC_AON_BT_PSW_EN_DR |
>         PSC_AON_BT_RESETN_ASSERT_DR |
>         PSC_AON_BT_ISO_EN_DR | PSC_AON_BT_ISO_EN_REG |
>         PSC_AON_BT_CLK_STOP_DR | PSC_AON_BT_CLK_STOP_REG;
>     psc->REG_038 = PSC_WRITE_ENABLE |
>         PSC_AON_BT_PSW_EN_DR |
>         PSC_AON_BT_RESETN_ASSERT_DR | PSC_AON_BT_RESETN_ASSERT_REG |
>         PSC_AON_BT_ISO_EN_DR | PSC_AON_BT_ISO_EN_REG |
>         PSC_AON_BT_CLK_STOP_DR | PSC_AON_BT_CLK_STOP_REG;
121a175,367
> }
> 
> void hal_psc_bt_enable_auto_power_down(void)
> {
>     psc->REG_020 = PSC_WRITE_ENABLE | PSC_AON_BT_PG_AUTO_EN | PSC_AON_BT_PG_HW_EN;
>     psc->REG_038 = PSC_WRITE_ENABLE | 0;
> 
>     psc->REG_024 |= PSC_AON_BT_SLEEP_NO_WFI;
> }
> 
> void BOOT_TEXT_FLASH_LOC hal_psc_wlan_enable(void)
> {
>     hal_cmu_wlan_set_sleep_allow(1);
>     psc->REG_058 = PSC_WRITE_ENABLE |
>         PSC_AON_WLAN_PSW_EN_DR |
>         PSC_AON_WLAN_RESETN_ASSERT_DR | PSC_AON_WLAN_RESETN_ASSERT_REG |
>         PSC_AON_WLAN_ISO_EN_DR | PSC_AON_WLAN_ISO_EN_REG |
>         PSC_AON_WLAN_CLK_STOP_DR | PSC_AON_WLAN_CLK_STOP_REG;
>     hal_sys_timer_delay(MS_TO_TICKS(1));
>     psc->REG_058 = PSC_WRITE_ENABLE |
>         PSC_AON_WLAN_PSW_EN_DR |
>         PSC_AON_WLAN_RESETN_ASSERT_DR |
>         PSC_AON_WLAN_ISO_EN_DR | PSC_AON_WLAN_ISO_EN_REG |
>         PSC_AON_WLAN_CLK_STOP_DR | PSC_AON_WLAN_CLK_STOP_REG;
>     psc->REG_058 = PSC_WRITE_ENABLE |
>         PSC_AON_WLAN_PSW_EN_DR |
>         PSC_AON_WLAN_RESETN_ASSERT_DR |
>         PSC_AON_WLAN_ISO_EN_DR |
>         PSC_AON_WLAN_CLK_STOP_DR | PSC_AON_WLAN_CLK_STOP_REG;
>     psc->REG_058 = PSC_WRITE_ENABLE |
>         PSC_AON_WLAN_PSW_EN_DR |
>         PSC_AON_WLAN_RESETN_ASSERT_DR |
>         PSC_AON_WLAN_ISO_EN_DR |
>         PSC_AON_WLAN_CLK_STOP_DR;
> #ifdef CORE_SLEEP_POWER_DOWN
>     psc->REG_040 = PSC_WRITE_ENABLE | PSC_AON_WLAN_PG_AUTO_EN | PSC_AON_WLAN_PG_HW_EN;
>     psc->REG_058 = PSC_WRITE_ENABLE | 0;
> #endif
> }
> 
> void BOOT_TEXT_FLASH_LOC hal_psc_wlan_disable(void)
> {
>     psc->REG_058 = PSC_WRITE_ENABLE |
>         PSC_AON_WLAN_PSW_EN_DR |
>         PSC_AON_WLAN_RESETN_ASSERT_DR |
>         PSC_AON_WLAN_ISO_EN_DR |
>         PSC_AON_WLAN_CLK_STOP_DR | PSC_AON_WLAN_CLK_STOP_REG;
>     psc->REG_058 = PSC_WRITE_ENABLE |
>         PSC_AON_WLAN_PSW_EN_DR |
>         PSC_AON_WLAN_RESETN_ASSERT_DR |
>         PSC_AON_WLAN_ISO_EN_DR | PSC_AON_WLAN_ISO_EN_REG |
>         PSC_AON_WLAN_CLK_STOP_DR | PSC_AON_WLAN_CLK_STOP_REG;
>     psc->REG_058 = PSC_WRITE_ENABLE |
>         PSC_AON_WLAN_PSW_EN_DR |
>         PSC_AON_WLAN_RESETN_ASSERT_DR | PSC_AON_WLAN_RESETN_ASSERT_REG |
>         PSC_AON_WLAN_ISO_EN_DR | PSC_AON_WLAN_ISO_EN_REG |
>         PSC_AON_WLAN_CLK_STOP_DR | PSC_AON_WLAN_CLK_STOP_REG;
>     psc->REG_058 = PSC_WRITE_ENABLE |
>         PSC_AON_WLAN_PSW_EN_DR | PSC_AON_WLAN_PSW_EN_REG |
>         PSC_AON_WLAN_RESETN_ASSERT_DR | PSC_AON_WLAN_RESETN_ASSERT_REG |
>         PSC_AON_WLAN_ISO_EN_DR | PSC_AON_WLAN_ISO_EN_REG |
>         PSC_AON_WLAN_CLK_STOP_DR | PSC_AON_WLAN_CLK_STOP_REG;
>     hal_cmu_wlan_set_sleep_allow(0);
> }
> 
> void BOOT_TEXT_FLASH_LOC hal_psc_a7_enable(void)
> {
>     psc->REG_0D8 = PSC_WRITE_ENABLE |
>         PSC_AON_A7_PSW_EN_DR |
>         PSC_AON_A7_RESETN_ASSERT_DR | PSC_AON_A7_RESETN_ASSERT_REG |
>         PSC_AON_A7_ISO_EN_DR | PSC_AON_A7_ISO_EN_REG |
>         PSC_AON_A7_CLK_STOP_DR | PSC_AON_A7_CLK_STOP_REG;
>     hal_sys_timer_delay(MS_TO_TICKS(1));
>     psc->REG_0D8 = PSC_WRITE_ENABLE |
>         PSC_AON_A7_PSW_EN_DR |
>         PSC_AON_A7_RESETN_ASSERT_DR |
>         PSC_AON_A7_ISO_EN_DR | PSC_AON_A7_ISO_EN_REG |
>         PSC_AON_A7_CLK_STOP_DR | PSC_AON_A7_CLK_STOP_REG;
>     psc->REG_0D8 = PSC_WRITE_ENABLE |
>         PSC_AON_A7_PSW_EN_DR |
>         PSC_AON_A7_RESETN_ASSERT_DR |
>         PSC_AON_A7_ISO_EN_DR |
>         PSC_AON_A7_CLK_STOP_DR | PSC_AON_A7_CLK_STOP_REG;
>     psc->REG_0D8 = PSC_WRITE_ENABLE |
>         PSC_AON_A7_PSW_EN_DR |
>         PSC_AON_A7_RESETN_ASSERT_DR |
>         PSC_AON_A7_ISO_EN_DR |
>         PSC_AON_A7_CLK_STOP_DR;
> }
> 
> void BOOT_TEXT_FLASH_LOC hal_psc_a7_disable(void)
> {
>     psc->REG_0D8 = PSC_WRITE_ENABLE |
>         PSC_AON_A7_PSW_EN_DR |
>         PSC_AON_A7_RESETN_ASSERT_DR |
>         PSC_AON_A7_ISO_EN_DR |
>         PSC_AON_A7_CLK_STOP_DR | PSC_AON_A7_CLK_STOP_REG;
>     psc->REG_0D8 = PSC_WRITE_ENABLE |
>         PSC_AON_A7_PSW_EN_DR |
>         PSC_AON_A7_RESETN_ASSERT_DR |
>         PSC_AON_A7_ISO_EN_DR | PSC_AON_A7_ISO_EN_REG |
>         PSC_AON_A7_CLK_STOP_DR | PSC_AON_A7_CLK_STOP_REG;
>     psc->REG_0D8 = PSC_WRITE_ENABLE |
>         PSC_AON_A7_PSW_EN_DR |
>         PSC_AON_A7_RESETN_ASSERT_DR | PSC_AON_A7_RESETN_ASSERT_REG |
>         PSC_AON_A7_ISO_EN_DR | PSC_AON_A7_ISO_EN_REG |
>         PSC_AON_A7_CLK_STOP_DR | PSC_AON_A7_CLK_STOP_REG;
>     psc->REG_0D8 = PSC_WRITE_ENABLE |
>         PSC_AON_A7_PSW_EN_DR | PSC_AON_A7_PSW_EN_REG |
>         PSC_AON_A7_RESETN_ASSERT_DR | PSC_AON_A7_RESETN_ASSERT_REG |
>         PSC_AON_A7_ISO_EN_DR | PSC_AON_A7_ISO_EN_REG |
>         PSC_AON_A7_CLK_STOP_DR | PSC_AON_A7_CLK_STOP_REG;
> }
> 
> void SRAM_TEXT_LOC hal_psc_dslp_force_on_bt_enable(void)
> {
>     psc->REG_124 |= PSC_AON_DSLP_FORCE_ON_BT_REG;
> }
> 
> void SRAM_TEXT_LOC hal_psc_dslp_force_on_bt_disable(void)
> {
>     psc->REG_124 &= ~(PSC_AON_DSLP_FORCE_ON_BT_REG);
> }
> 
> void SRAM_TEXT_LOC hal_psc_bt_auto_power_down(void)
> {
>     psc->REG_038 = PSC_WRITE_ENABLE | 0;
>     psc->REG_020 = PSC_WRITE_ENABLE | PSC_AON_BT_PG_AUTO_EN | PSC_AON_BT_PG_HW_EN;
>     psc->REG_030 = PSC_WRITE_ENABLE | PSC_AON_BT_POWERDN_START;
> }
> 
> void SRAM_TEXT_LOC hal_psc_wlan_auto_power_down(void)
> {
>     psc->REG_058 = PSC_WRITE_ENABLE | 0;
>     psc->REG_040 = PSC_WRITE_ENABLE | PSC_AON_WLAN_PG_AUTO_EN | PSC_AON_WLAN_PG_HW_EN;
>     psc->REG_050 = PSC_WRITE_ENABLE | PSC_AON_WLAN_POWERDN_START;
> }
> 
> void SRAM_TEXT_LOC hal_psc_core_auto_power_down(void)
> {
>     // 2003 MCU doesn't support power_down
> }
> 
> void hal_psc_mcu_gpio_irq_enable(enum HAL_GPIO_PIN_T pin)
> {
>     if (pin < HAL_GPIO_PIN_NUM) {
>         psc->REG_080 |= (1 << pin);
>     }
> }
> 
> void hal_psc_mcu_gpio_irq_disable(enum HAL_GPIO_PIN_T pin)
> {
>     if (pin < HAL_GPIO_PIN_NUM) {
>         psc->REG_080 &= ~(1 << pin);
>     }
> }
> 
> uint32_t hal_psc_mcu_gpio_irq_get_status(uint32_t *status, uint32_t cnt)
> {
>     volatile uint32_t * const irq_status[] = {
>         &psc->REG_088,
>     };
>     uint32_t i;
> 
>     if (cnt > ARRAY_SIZE(irq_status)) {
>         cnt = ARRAY_SIZE(irq_status);
>     }
>     if (status) {
>         for (i = 0; i < cnt; i++) {
>             status[i] = *irq_status[i];
>         }
>     }
>     return cnt;
> }
> 
> void hal_psc_gpio_irq_enable(enum HAL_GPIO_PIN_T pin)
> {
>     hal_psc_mcu_gpio_irq_enable(pin);
> }
> 
> void hal_psc_gpio_irq_disable(enum HAL_GPIO_PIN_T pin)
> {
>     hal_psc_mcu_gpio_irq_disable(pin);
> }
> 
> uint32_t hal_psc_gpio_irq_get_status(uint32_t *status, uint32_t cnt)
> {
>     return hal_psc_mcu_gpio_irq_get_status(status, cnt);
> }
> 
> uint32_t hal_psc_get_power_loop_cycle_cnt(void)
> {
>     return 6 + 14 + 14; // 1.5 + 4.5 + 14 + 14
