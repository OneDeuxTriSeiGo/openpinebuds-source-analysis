local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/best2300p/hal_analogif_best2300p.c
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/hal/best2003/hal_analogif_best2003.c
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,16
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
> #ifndef NO_ISPI
> 
27c28
< #define ANA_VAL_CHIP_ID                 0x18E
---
> #define ANA_VAL_CHIP_ID                 0x203
42,43c43,44
< #define ANA_READ_CMD(r)                 (((1 << 24) | (((r) & 0xFF) << 16)) << PADDING_CYCLES)
< #define ANA_WRITE_CMD(r, v)             (((((r) & 0xFF) << 16) | ((v) & 0xFFFF)) << PADDING_CYCLES)
---
> #define ANA_READ_CMD(r)                 (((1 << 26) | (((r) & 0x3FF) << 16)) << PADDING_CYCLES)
> #define ANA_WRITE_CMD(r, v)             (((((r) & 0x3FF) << 16) | ((v) & 0xFFFF)) << PADDING_CYCLES)
46d46
< #define ANA_PAGE_1                      0xA010
47a48,49
> #define ANA_PAGE_1                      0xA010
> #define ANA_PAGE_QTY                    2
49,50c51,60
< static const BOOT_RODATA_SRAM_LOC uint8_t page_reg[3] = {
<     0x00, 0x60, 0x80,
---
> #define ISPI_REG_CS(r)                  ((r) >> 12)
> #define ISPI_REG_OFFSET(r)              ((r) & 0x3FF)
> 
> enum ANAIF_CS_T {
>     ANAIF_CS_PMU = 0,
>     ANAIF_CS_ANA,
>     ANAIF_CS_BTRF,
>     ANAIF_CS_WIFIRF,
> 
>     ANAIF_CS_QTY,
53c63
< static const BOOT_RODATA_FLASH_LOC struct HAL_SPI_CFG_T spi_cfg = {
---
> static const struct HAL_SPI_CFG_T spi_cfg = {
59c69
<     .rx_sep_line = false,
---
>     .rx_sep_line = true,
62,63c72,73
<     .tx_bits = 25 + PADDING_CYCLES,
<     .rx_bits = 25 + PADDING_CYCLES,
---
>     .tx_bits = 27 + PADDING_CYCLES,
>     .rx_bits = 27 + PADDING_CYCLES,
67a78
> static uint8_t BOOT_BSS_LOC ana_cs;
101d111
<     uint32_t idx;
102a113
>     uint8_t cs;
104,117c115,116
< #if defined(USE_CYBERON)
< extern int cyb_efuse_check_status(void);
< 
<     if (cyb_efuse_check_status()) {
<         if (reg == 0x5e) {
<             *val = 49185;
<             return 0;
<         }
<         if (reg == 0x00) {
<             *val = 0x20e0;
<             return 0;
<         }
<     }
< #endif
---
>     cs = ISPI_REG_CS(reg);
>     reg = ISPI_REG_OFFSET(reg);
119d117
<     if (reg < 0x100) {
121,131c119,121
<         ret = hal_analogif_rawread(reg, val);
<         int_unlock(lock);
<         return ret;
<     } else if (reg >= 0x100 && reg <= 0x15F) {
<         idx = 0;
<     } else if (reg >= 0x160 && reg <= 0x17F) {
<         idx = 1;
<     } else if (reg >= 0x180 && reg <= 0x1FF) {
<         idx = 2;
<     } else {
<         return -1;
---
>     if (cs != ana_cs) {
>         hal_ispi_activate_cs(cs);
>         ana_cs = cs;
133,137d122
< 
<     reg &= 0xFF;
< 
<     lock = int_lock();
<     hal_analogif_rawwrite(page_reg[idx], ANA_PAGE_1);
139d123
<     hal_analogif_rawwrite(page_reg[idx], ANA_PAGE_0);
148d131
<     uint32_t idx;
149a133
>     uint8_t cs;
151,166c135,136
<     if (reg < 0x100) {
<         lock = int_lock();
<         ret = hal_analogif_rawwrite(reg, val);
<         int_unlock(lock);
<         return ret;
<     } else if (reg >= 0x100 && reg <= 0x15F) {
<         idx = 0;
<     } else if (reg >= 0x160 && reg <= 0x17F) {
<         idx = 1;
<     } else if (reg >= 0x180 && reg <= 0x1FF) {
<         idx = 2;
<     } else {
<         return -1;
<     }
< 
<     reg &= 0xFF;
---
>     cs = ISPI_REG_CS(reg);
>     reg = ISPI_REG_OFFSET(reg);
169c139,142
<     hal_analogif_rawwrite(page_reg[idx], ANA_PAGE_1);
---
>     if (cs != ana_cs) {
>         hal_ispi_activate_cs(cs);
>         ana_cs = cs;
>     }
171d143
<     hal_analogif_rawwrite(page_reg[idx], ANA_PAGE_0);
199a172,174
>     ana_cs = 0;
>     hal_ispi_activate_cs(ana_cs);
> 
204a180,183
> #if defined(FPGA) || defined(SIMU)
>     chip_id = ANA_CHIP_ID(ANA_VAL_CHIP_ID);
> #endif
> 
210a190,191
> 
> #endif
