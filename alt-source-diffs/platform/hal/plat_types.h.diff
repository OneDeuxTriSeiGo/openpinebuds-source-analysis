local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/hal/plat_types.h
remote: https://raw.githubusercontent.com/alibaba/AliOS-Things/a99f20706f9c666903a12a205edce13263b1fadb/hardware/chip/haas1000/drivers/platform/hal/plat_types.h
diff -sw local remote
---

1c1,5
< /***************************************************************************
---
> /*
>  * Copyright (c) 2021 Bestechnic (Shanghai) Co., Ltd. All rights reserved.
>  * Licensed under the Apache License, Version 2.0 (the "License");
>  * you may not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
3,4c7
<  * Copyright 2015-2019 BES.
<  * All rights reserved. All unpublished rights reserved.
---
>  *     http://www.apache.org/licenses/LICENSE-2.0
6,15c9,14
<  * No part of this work may be used or reproduced in any form or by any
<  * means, or stored in a database or retrieval system, without prior written
<  * permission of BES.
<  *
<  * Use of this work is governed by a license granted by BES.
<  * This work contains confidential and proprietary information of
<  * BES. which is protected by copyright, trade secret,
<  * trademark and other intellectual property rights.
<  *
<  ****************************************************************************/
---
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an "AS IS" BASIS,
>  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
>  */
25a25,184
> #ifdef FPGA
> #define __TCMDATA __attribute__((section(".tcmdata")))
> #define __RAMCODE __attribute__((section(".ramcode")))
> #define __RAMDATA __attribute__((section(".ramdata")))
> #define __PSRAMCODE
> #define __PSRAMDATA
> #define __PSRAMBSS
> #define __SRAM_EXT_BSS __attribute__((section(".sram_bss")))
> 
> #ifdef RESTRICTED_RAM
> #define __RRAMCODE __attribute__((section(".rram_text")))
> #define __RRAMDATA __attribute__((section(".rram_data")))
> #define __RRAMBSS __attribute__((section(".rram_bss")))
> #else
> #define __RRAMCODE
> #define __RRAMDATA
> #define __RRAMBSS
> #endif
> #define __SRAMCODE __attribute__((section(".sram_text")))
> #define __SRAMDATA __attribute__((section(".sram_data")))
> #define __SRAMBSS __attribute__((section(".sram_bss")))
> #define __AUDMA __attribute__((section(".audma")))
> #define __FSRAMCODE __attribute__((section(".fast_text_sram")))
> #define __BOOTSRAMCODE   __attribute__((section(".boot_text_sram")))
> 
> #ifdef __FAR_FIELD_2000IWA__
> #define __RX_CODE
> #else
> #define __RX_CODE  __SRAMCODE
> #endif
> 
> #else /*FPGA*/
> 
> #define __TCMDATA __attribute__((section(".tcmdata")))
> #define __RAMCODE __attribute__((section(".ramcode")))
> #define __RAMDATA __attribute__((section(".ramdata")))
> 
> #ifdef RESTRICTED_RAM
> #define __RRAMCODE __attribute__((section(".rram_text")))
> #define __RRAMDATA __attribute__((section(".rram_data")))
> #define __RRAMBSS __attribute__((section(".rram_bss")))
> #else
> #define __RRAMCODE
> #define __RRAMDATA
> #define __RRAMBSS
> #endif
> #define __SRAMCODE __attribute__((section(".sram_text")))
> #define __SRAMDATA __attribute__((section(".sram_data")))
> #define __SRAMBSS __attribute__((section(".sram_bss")))
> #define __AUDMA __attribute__((section(".audma")))
> #define __FSRAMCODE __attribute__((section(".fast_text_sram")))
> #define __BOOTSRAMCODE   __attribute__((section(".boot_text_sram")))
> 
> #if defined(CHIP_HAS_PSRAM) && defined(PSRAM_ENABLE)
> #define __PSRAMCODE __attribute__((section(".psram_text")))
> #define __PSRAMDATA __attribute__((section(".psram_data")))
> #define __PSRAMBSS __attribute__((section(".psram_bss")))
> #elif defined(CHIP_HAS_PSRAMUHS) && defined(PSRAMUHS_ENABLE)
> #define __PSRAMUHSCODE		__attribute__((section(".psramuhs_text")))
> #define __PSRAMUHSDATA	__attribute__((section(".psramuhs_data")))
> #define __PSRAMUHSBSS		__attribute__((section(".psramuhs_bss")))
> #define __PSRAMCODE		__PSRAMUHSCODE
> #define __PSRAMDATA		__PSRAMUHSDATA
> // #define __PSRAMBSS			__PSRAMUHSBSS
> #define __PSRAMBSS
> #else
> #define __PSRAMCODE
> #define __PSRAMDATA
> #define __PSRAMBSS
> #endif
> 
> #define __SRAM_EXT_CODE  __PSRAMCODE
> #define __SRAM_EXT_DATA  __PSRAMDATA
> #define __SRAM_EXT_BSS     __PSRAMBSS
> 
> #ifdef __FAR_FIELD_2000IWA__
> #define __RX_CODE
> #else
> #define __RX_CODE  __SRAMCODE
> #endif
> 
> #endif /*FPGA*/
> 
> #ifndef TRUE
> #define TRUE 1
> #endif
> #ifndef FALSE
> #define FALSE 0
> #endif
> 
> #ifndef X32_F
> #define X32_F "x"
> #endif
> #ifndef X16_F
> #define X16_F "x"
> #endif
> #ifndef U32_F
> #define U32_F "d"
> #endif
> #ifndef S32_F
> #define S32_F "d"
> #endif
> #ifndef S16_F
> #define S16_F "d"
> #endif
> #ifndef U16_F
> #define U16_F "d"
> #endif
> 
> typedef long long __int64;
> typedef long long __le64;
> 
> typedef unsigned short __le16;
> typedef unsigned int __le32;
> 
> typedef unsigned short __be16;
> typedef unsigned int __be32;
> typedef unsigned short __u16;
> typedef unsigned char __u8;
> typedef  short __s16;
> typedef  char __s8;
> typedef unsigned int __u32;
> typedef unsigned long u32;
> typedef  int __s32;
> 
> typedef float          FP32;                     /* Single precision floating point                    */
> typedef double         FP64;                     /* Double precision floating point                    */
> 
> typedef unsigned int   OS_STK;                   /* Each stack entry is 32-bit wide                    */
> typedef unsigned int   OS_CPU_SR;                /* Define size of CPU status register (PSR = 32 bits) */
> typedef void           (*FUNCPtr)(void*);
> 
> typedef unsigned char  INT8U;                    /* Unsigned  8 bit quantity                           */
> typedef signed   char  INT8S;                    /* Signed    8 bit quantity                           */
> 
> typedef unsigned char UCHAR;
> typedef char CHAR;
> typedef unsigned char* PUCHAR;
> typedef signed char* PCHAR;
> 
> typedef unsigned char  UINT8;
> typedef unsigned char  uint8;
> typedef unsigned short UINT16;
> typedef unsigned short uint16;
> typedef unsigned int   UINT32;                                                                                                                                          typedef unsigned int   uint32;
> typedef unsigned int   uint32;
> 
> typedef  signed char  INT8;
> typedef signed char int8;
> typedef  short INT16;
> typedef  short int16;
> typedef  int   INT32;
> typedef  int   int32;
> 
> typedef uint8_t u8_t;
> typedef int8_t s8_t;
> typedef uint16_t u16_t;
> typedef int16_t s16_t;
> typedef uint32_t u32_t;
> typedef int32_t s32_t;
30a190,195
> 
> typedef unsigned char               U8;
> typedef unsigned short              U16;
> typedef unsigned int               U32;
> typedef unsigned long long          U64;
> 
36c201
< typedef char                        ascii;
---
> //typedef char                        ascii;
71c236
< 
---
> #ifndef ARRAY_SIZE
72a238
> #endif
