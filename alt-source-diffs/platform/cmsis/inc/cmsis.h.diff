local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/cmsis/inc/cmsis.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/cmsis/inc/ca/cmsis_cp15_ca.h
diff -sw local remote
---

1,2c1,8
< /* mbed Microcontroller Library - CMSIS
<  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
---
> /**************************************************************************//**
>  * @file     cmsis_cp15.h
>  * @brief    CMSIS compiler specific macros, functions, instructions
>  * @version  V1.0.1
>  * @date     07. Sep 2017
>  ******************************************************************************/
> /*
>  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
4c10,22
<  * A generic CMSIS include header, pulling in LPC11U24 specifics
---
>  * SPDX-License-Identifier: Apache-2.0
>  *
>  * Licensed under the Apache License, Version 2.0 (the License); you may
>  * not use this file except in compliance with the License.
>  * You may obtain a copy of the License at
>  *
>  * www.apache.org/licenses/LICENSE-2.0
>  *
>  * Unless required by applicable law or agreed to in writing, software
>  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
>  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>  * See the License for the specific language governing permissions and
>  * limitations under the License.
7,11c25,28
< #ifndef MBED_CMSIS_H
< #define MBED_CMSIS_H
< 
< #ifdef __cplusplus
< extern "C" {
---
> #if   defined ( __ICCARM__ )
>   #pragma system_include         /* treat file as system include file for MISRA check */
> #elif defined (__clang__)
>   #pragma clang system_header   /* treat file as system include file */
14,15c31,32
< #include "plat_addr_map.h"
< #include _TO_STRING(CONCAT_SUFFIX(CHIP_ID_LITERAL, h))
---
> #ifndef __CMSIS_CP15_CA_H
> #define __CMSIS_CP15_CA_H
17,31c34,42
< #define IRQ_PRIORITY_REALTIME               0
< #define IRQ_PRIORITY_HIGHPLUSPLUS           1
< #define IRQ_PRIORITY_HIGHPLUS               2
< #define IRQ_PRIORITY_HIGH                   3
< #define IRQ_PRIORITY_ABOVENORMAL            4
< #define IRQ_PRIORITY_NORMAL                 5
< #define IRQ_PRIORITY_BELOWNORMAL            6
< #define IRQ_PRIORITY_LOW                    7
< 
< #ifdef __ARM_ARCH_ISA_ARM
< #define IRQ_LOCK_MASK                       (CPSR_I_Msk | CPSR_F_Msk)
< #else
< #define NVIC_USER_IRQ_OFFSET                16
< #define NVIC_NUM_VECTORS                    (NVIC_USER_IRQ_OFFSET + USER_IRQn_QTY)
< #endif
---
> /** \brief  Get ACTLR
>     \return               Auxiliary Control register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_ACTLR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 1, 0, 1);
>   return(result);
> }
33c44,50
< #ifndef __ASSEMBLER__
---
> /** \brief  Set ACTLR
>     \param [in]    actlr  Auxiliary Control value to set
>  */
> __STATIC_FORCEINLINE void __set_ACTLR(uint32_t actlr)
> {
>   __set_CP(15, 0, actlr, 1, 0, 1);
> }
35,45c52,60
< #ifdef __ARMCC_VERSION
< // Stupid armclang
< #undef __SSAT
< #define __SSAT(ARG1,ARG2) \
< __extension__ \
< ({                          \
<   int32_t __RES, __ARG1 = (ARG1); \
<   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
<   __RES; \
<  })
< #endif
---
> /** \brief  Get CPACR
>     \return               Coprocessor Access Control register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_CPACR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 1, 0, 2);
>   return result;
> }
47c62,65
< __STATIC_FORCEINLINE uint32_t int_lock_global(void)
---
> /** \brief  Set CPACR
>     \param [in]    cpacr  Coprocessor Access Control value to set
>  */
> __STATIC_FORCEINLINE void __set_CPACR(uint32_t cpacr)
49,60c67
< #ifdef __ARM_ARCH_ISA_ARM
<     uint32_t cpsr = __get_CPSR();
<     uint32_t st = cpsr & IRQ_LOCK_MASK;
<     if (st != IRQ_LOCK_MASK) {
<         cpsr |= IRQ_LOCK_MASK;
<         __set_CPSR(cpsr);
<     }
<     return st;
< #else
< 	uint32_t pri = __get_PRIMASK();
< 	if ((pri & 0x1) == 0) {
< 		__disable_irq();
---
>   __set_CP(15, 0, cpacr, 1, 0, 2);
62,63c69,77
< 	return pri;
< #endif
---
> 
> /** \brief  Get DFSR
>     \return               Data Fault Status Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_DFSR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 5, 0, 0);
>   return result;
66c80,83
< __STATIC_FORCEINLINE void int_unlock_global(uint32_t pri)
---
> /** \brief  Set DFSR
>     \param [in]    dfsr  Data Fault Status value to set
>  */
> __STATIC_FORCEINLINE void __set_DFSR(uint32_t dfsr)
68,76c85
< #ifdef __ARM_ARCH_ISA_ARM
<     if (pri != IRQ_LOCK_MASK) {
<         uint32_t cpsr = __get_CPSR();
<         cpsr = (cpsr & ~IRQ_LOCK_MASK) | pri;
<         __set_CPSR(cpsr);
<     }
< #else
< 	if ((pri & 0x1) == 0) {
< 		__enable_irq();
---
>   __set_CP(15, 0, dfsr, 5, 0, 0);
78c87,103
< #endif
---
> 
> /** \brief  Get IFSR
>     \return               Instruction Fault Status Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_IFSR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 5, 0, 1);
>   return result;
> }
> 
> /** \brief  Set IFSR
>     \param [in]    ifsr  Instruction Fault Status value to set
>  */
> __STATIC_FORCEINLINE void __set_IFSR(uint32_t ifsr)
> {
>   __set_CP(15, 0, ifsr, 5, 0, 1);
81c106,109
< __STATIC_FORCEINLINE uint32_t int_lock(void)
---
> /** \brief  Get ISR
>     \return               Interrupt Status Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_ISR(void)
83,97c111,113
< #ifdef INT_LOCK_EXCEPTION
< #ifdef __ARM_ARCH_ISA_ARM
<     uint32_t mask = GIC_GetInterfacePriorityMask();
<     // Only allow IRQs with priority IRQ_PRIORITY_HIGHPLUSPLUS and IRQ_PRIORITY_REALTIME
<     GIC_SetInterfacePriorityMask(((IRQ_PRIORITY_HIGHPLUS << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL));
<     return mask;
< #else
<     uint32_t pri = __get_BASEPRI();
<     // Only allow IRQs with priority IRQ_PRIORITY_HIGHPLUSPLUS and IRQ_PRIORITY_REALTIME
<     __set_BASEPRI(((IRQ_PRIORITY_HIGHPLUS << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL));
<     return pri;
< #endif
< #else
<     return int_lock_global();
< #endif
---
>   uint32_t result;
>   __get_CP(15, 0, result, 12, 1, 0);
>   return result;
100c116,119
< __STATIC_FORCEINLINE void int_unlock(uint32_t pri)
---
> /** \brief  Get CBAR
>     \return               Configuration Base Address register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_CBAR(void)
102,110c121,123
< #ifdef INT_LOCK_EXCEPTION
< #ifdef __ARM_ARCH_ISA_ARM
<     GIC_SetInterfacePriorityMask(pri);
< #else
<     __set_BASEPRI(pri);
< #endif
< #else
<     int_unlock_global(pri);
< #endif
---
>   uint32_t result;
>   __get_CP(15, 4, result, 15, 0, 0);
>   return result;
113c126,132
< __STATIC_FORCEINLINE int in_isr(void)
---
> /** \brief  Get TTBR0
> 
>     This function returns the value of the Translation Table Base Register 0.
> 
>     \return               Translation Table Base Register 0 value
>  */
> __STATIC_FORCEINLINE uint32_t __get_TTBR0(void)
115,120c134,136
< #ifdef __ARM_ARCH_ISA_ARM
<     uint32_t mode = __get_mode();
<     return mode != CPSR_M_USR && mode != CPSR_M_SYS;
< #else
<     return __get_IPSR() != 0;
< #endif
---
>   uint32_t result;
>   __get_CP(15, 0, result, 2, 0, 0);
>   return result;
123c139,145
< __STATIC_FORCEINLINE int32_t ftoi_nearest(float f)
---
> /** \brief  Set TTBR0
> 
>     This function assigns the given value to the Translation Table Base Register 0.
> 
>     \param [in]    ttbr0  Translation Table Base Register 0 value to set
>  */
> __STATIC_FORCEINLINE void __set_TTBR0(uint32_t ttbr0)
125c147
<     return (f >= 0) ? (int32_t)(f + 0.5) : (int32_t)(f - 0.5);
---
>   __set_CP(15, 0, ttbr0, 2, 0, 0);
128c150
< void GotBaseInit(void);
---
> /** \brief  Get DACR
130c152
< int set_bool_flag(bool *flag);
---
>     This function returns the value of the Domain Access Control Register.
132c154,161
< void clear_bool_flag(bool *flag);
---
>     \return               Domain Access Control Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_DACR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 3, 0, 0);
>   return result;
> }
134c163
< float db_to_float(float db);
---
> /** \brief  Set DACR
136c165
< uint32_t get_msb_pos(uint32_t val);
---
>     This function assigns the given value to the Domain Access Control Register.
138c167,172
< uint32_t get_lsb_pos(uint32_t val);
---
>     \param [in]    dacr   Domain Access Control Register value to set
>  */
> __STATIC_FORCEINLINE void __set_DACR(uint32_t dacr)
> {
>   __set_CP(15, 0, dacr, 3, 0, 0);
> }
140c174
< uint32_t integer_sqrt(uint32_t val);
---
> /** \brief  Set SCTLR
142c176
< uint32_t integer_sqrt_nearest(uint32_t val);
---
>     This function assigns the given value to the System Control Register.
144c178,372
< #endif
---
>     \param [in]    sctlr  System Control Register value to set
>  */
> __STATIC_FORCEINLINE void __set_SCTLR(uint32_t sctlr)
> {
>   __set_CP(15, 0, sctlr, 1, 0, 0);
> }
> 
> /** \brief  Get SCTLR
>     \return               System Control Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_SCTLR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 1, 0, 0);
>   return result;
> }
> 
> /** \brief  Set ACTRL
>     \param [in]    actrl  Auxiliary Control Register value to set
>  */
> __STATIC_FORCEINLINE void __set_ACTRL(uint32_t actrl)
> {
>   __set_CP(15, 0, actrl, 1, 0, 1);
> }
> 
> /** \brief  Get ACTRL
>     \return               Auxiliary Control Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_ACTRL(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 1, 0, 1);
>   return result;
> }
> 
> /** \brief  Get MPIDR
> 
>     This function returns the value of the Multiprocessor Affinity Register.
> 
>     \return               Multiprocessor Affinity Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_MPIDR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 0, 0, 5);
>   return result;
> }
> 
> /** \brief  Get VBAR
> 
>     This function returns the value of the Vector Base Address Register.
> 
>     \return               Vector Base Address Register
>  */
> __STATIC_FORCEINLINE uint32_t __get_VBAR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 12, 0, 0);
>   return result;
> }
> 
> /** \brief  Set VBAR
> 
>     This function assigns the given value to the Vector Base Address Register.
> 
>     \param [in]    vbar  Vector Base Address Register value to set
>  */
> __STATIC_FORCEINLINE void __set_VBAR(uint32_t vbar)
> {
>   __set_CP(15, 0, vbar, 12, 0, 0);
> }
> 
> /** \brief  Get MVBAR
> 
>     This function returns the value of the Monitor Vector Base Address Register.
> 
>     \return               Monitor Vector Base Address Register
>  */
> __STATIC_FORCEINLINE uint32_t __get_MVBAR(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 12, 0, 1);
>   return result;
> }
> 
> /** \brief  Set MVBAR
> 
>     This function assigns the given value to the Monitor Vector Base Address Register.
> 
>     \param [in]    mvbar  Monitor Vector Base Address Register value to set
>  */
> __STATIC_FORCEINLINE void __set_MVBAR(uint32_t mvbar)
> {
>   __set_CP(15, 0, mvbar, 12, 0, 1);
> }
> 
> #if (defined(__CORTEX_A) && (__CORTEX_A == 7U) && \
>     defined(__TIM_PRESENT) && (__TIM_PRESENT == 1U)) || \
>     defined(DOXYGEN)
> 
> /** \brief  Set CNTFRQ
> 
>   This function assigns the given value to PL1 Physical Timer Counter Frequency Register (CNTFRQ).
> 
>   \param [in]    value  CNTFRQ Register value to set
> */
> __STATIC_FORCEINLINE void __set_CNTFRQ(uint32_t value)
> {
>   __set_CP(15, 0, value, 14, 0, 0);
> }
> 
> /** \brief  Get CNTFRQ
> 
>     This function returns the value of the PL1 Physical Timer Counter Frequency Register (CNTFRQ).
> 
>     \return               CNTFRQ Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_CNTFRQ(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 14, 0 , 0);
>   return result;
> }
> 
> /** \brief  Set CNTP_TVAL
> 
>   This function assigns the given value to PL1 Physical Timer Value Register (CNTP_TVAL).
> 
>   \param [in]    value  CNTP_TVAL Register value to set
> */
> __STATIC_FORCEINLINE void __set_CNTP_TVAL(uint32_t value)
> {
>   __set_CP(15, 0, value, 14, 2, 0);
> }
> 
> /** \brief  Get CNTP_TVAL
> 
>     This function returns the value of the PL1 Physical Timer Value Register (CNTP_TVAL).
> 
>     \return               CNTP_TVAL Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_CNTP_TVAL(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 14, 2, 0);
>   return result;
> }
> 
> /** \brief  Get CNTPCT
> 
>     This function returns the value of the 64 bits PL1 Physical Count Register (CNTPCT).
> 
>     \return               CNTPCT Register value
>  */
> __STATIC_FORCEINLINE uint64_t __get_CNTPCT(void)
> {
>   uint64_t result;
>   __get_CP64(15, 0, result, 14);
>   return result;
> }
> 
> /** \brief  Set CNTP_CVAL
> 
>   This function assigns the given value to 64bits PL1 Physical Timer CompareValue Register (CNTP_CVAL).
> 
>   \param [in]    value  CNTP_CVAL Register value to set
> */
> __STATIC_FORCEINLINE void __set_CNTP_CVAL(uint64_t value)
> {
>   __set_CP64(15, 2, value, 14);
> }
> 
> /** \brief  Get CNTP_CVAL
> 
>     This function returns the value of the 64 bits PL1 Physical Timer CompareValue Register (CNTP_CVAL).
> 
>     \return               CNTP_CVAL Register value
>  */
> __STATIC_FORCEINLINE uint64_t __get_CNTP_CVAL(void)
> {
>   uint64_t result;
>   __get_CP64(15, 2, result, 14);
>   return result;
> }
> 
> /** \brief  Set CNTP_CTL
> 
>   This function assigns the given value to PL1 Physical Timer Control Register (CNTP_CTL).
> 
>   \param [in]    value  CNTP_CTL Register value to set
> */
> __STATIC_FORCEINLINE void __set_CNTP_CTL(uint32_t value)
> {
>   __set_CP(15, 0, value, 14, 2, 1);
> }
146c374,381
< #ifdef __cplusplus
---
> /** \brief  Get CNTP_CTL register
>     \return               CNTP_CTL Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_CNTP_CTL(void)
> {
>   uint32_t result;
>   __get_CP(15, 0, result, 14, 2, 1);
>   return result;
147a383
> 
148a385,512
> 
> /** \brief  Set TLBIALL
> 
>   TLB Invalidate All
>  */
> __STATIC_FORCEINLINE void __set_TLBIALL(uint32_t value)
> {
>   __set_CP(15, 0, value, 8, 7, 0);
> }
> 
> /** \brief  Set BPIALL.
> 
>   Branch Predictor Invalidate All
>  */
> __STATIC_FORCEINLINE void __set_BPIALL(uint32_t value)
> {
>   __set_CP(15, 0, value, 7, 5, 6);
> }
> 
> /** \brief  Set ICIALLU
> 
>   Instruction Cache Invalidate All
>  */
> __STATIC_FORCEINLINE void __set_ICIALLU(uint32_t value)
> {
>   __set_CP(15, 0, value, 7, 5, 0);
> }
> 
> /** \brief  Set DCCMVAC
> 
>   Data cache clean
>  */
> __STATIC_FORCEINLINE void __set_DCCMVAC(uint32_t value)
> {
>   __set_CP(15, 0, value, 7, 10, 1);
> }
> 
> /** \brief  Set DCIMVAC
> 
>   Data cache invalidate
>  */
> __STATIC_FORCEINLINE void __set_DCIMVAC(uint32_t value)
> {
>   __set_CP(15, 0, value, 7, 6, 1);
> }
> 
> /** \brief  Set DCCIMVAC
> 
>   Data cache clean and invalidate
>  */
> __STATIC_FORCEINLINE void __set_DCCIMVAC(uint32_t value)
> {
>   __set_CP(15, 0, value, 7, 14, 1);
> }
> 
> /** \brief  Set CSSELR
>  */
> __STATIC_FORCEINLINE void __set_CSSELR(uint32_t value)
> {
> //  __ASM volatile("MCR p15, 2, %0, c0, c0, 0" : : "r"(value) : "memory");
>   __set_CP(15, 2, value, 0, 0, 0);
> }
> 
> /** \brief  Get CSSELR
>     \return CSSELR Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_CSSELR(void)
> {
>   uint32_t result;
> //  __ASM volatile("MRC p15, 2, %0, c0, c0, 0" : "=r"(result) : : "memory");
>   __get_CP(15, 2, result, 0, 0, 0);
>   return result;
> }
> 
> /** \brief  Set CCSIDR
>     \deprecated CCSIDR itself is read-only. Use __set_CSSELR to select cache level instead.
>  */
> CMSIS_DEPRECATED
> __STATIC_FORCEINLINE void __set_CCSIDR(uint32_t value)
> {
>   __set_CSSELR(value);
> }
> 
> /** \brief  Get CCSIDR
>     \return CCSIDR Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_CCSIDR(void)
> {
>   uint32_t result;
> //  __ASM volatile("MRC p15, 1, %0, c0, c0, 0" : "=r"(result) : : "memory");
>   __get_CP(15, 1, result, 0, 0, 0);
>   return result;
> }
> 
> /** \brief  Get CLIDR
>     \return CLIDR Register value
>  */
> __STATIC_FORCEINLINE uint32_t __get_CLIDR(void)
> {
>   uint32_t result;
> //  __ASM volatile("MRC p15, 1, %0, c0, c0, 1" : "=r"(result) : : "memory");
>   __get_CP(15, 1, result, 0, 0, 1);
>   return result;
> }
> 
> /** \brief  Set DCISW
>  */
> __STATIC_FORCEINLINE void __set_DCISW(uint32_t value)
> {
> //  __ASM volatile("MCR p15, 0, %0, c7, c6, 2" : : "r"(value) : "memory")
>   __set_CP(15, 0, value, 7, 6, 2);
> }
> 
> /** \brief  Set DCCSW
>  */
> __STATIC_FORCEINLINE void __set_DCCSW(uint32_t value)
> {
> //  __ASM volatile("MCR p15, 0, %0, c7, c10, 2" : : "r"(value) : "memory")
>   __set_CP(15, 0, value, 7, 10, 2);
> }
> 
> /** \brief  Set DCCISW
>  */
> __STATIC_FORCEINLINE void __set_DCCISW(uint32_t value)
> {
> //  __ASM volatile("MCR p15, 0, %0, c7, c14, 2" : : "r"(value) : "memory")
>   __set_CP(15, 0, value, 7, 14, 2);
> }
