local: https://raw.githubusercontent.com/pine64/OpenPineBuds/533d01aee617f24dfe9cda124fbb20b6efbe2f73/platform/cmsis/inc/ca/core_ca.h
remote: https://raw.githubusercontent.com/OneDeuxTriSeiGo/device_soc_bestechnic/c0502a1345f2f5b7ffc7f38b5374be0fcb42a487/bes2600/liteos_m/sdk/bsp/platform/cmsis/inc/ca/core_ca.h
diff -sw local remote
---

38a39,94
> #ifdef KERNEL_RHINO
> #include "ca/irq_ctrl.h"
> #include "driver/interrupt.h"
> extern void gic_clear_pending(u32 id);
> #define NVIC_SetPriority(irq, prio)         gic_set_irq_priority(irq, (prio))
> #define NVIC_ClearPendingIRQ(irq)           gic_clear_pending(irq)
> #define NVIC_EnableIRQ(irq)                 irq_enable(irq)
> #define NVIC_DisableIRQ(irq)                irq_disable(irq)
> //#define NVIC_GetActive(irq)                 (GIC_GetIRQStatus(irq) & (1 << 1))
> #define NVIC_GetActive(irq)                 (((GICDistributor->ISACTIVER[(irq) / 32U])  >> ((irq) % 32U)) & 1UL)
> 
> #define NVIC_SetVector(irq, vector)         irq_request(irq, (void *)(vector), 0)
> #elif defined (KERNEL_RTT)
> #include "ca/irq_ctrl.h"
> #include "gic.h"
> #include "interrupt.h"
> #define NVIC_SetPriority(irq, prio)         arm_gic_set_priority(irq, (prio))
> #define NVIC_ClearPendingIRQ(irq)           arm_gic_clear_pending(0, irq)
> #define NVIC_EnableIRQ(irq)                 rt_hw_interrupt_umask(irq)
> #define NVIC_DisableIRQ(irq)                rt_hw_interrupt_mask(irq)
> #define NVIC_GetActive(irq)                 (rt_hw_interrupt_get_irq() == (irq))
> //#define NVIC_GetActive(irq)                 (((GICDistributor->ISACTIVER[(irq) / 32U])  >> ((irq) % 32U)) & 1UL)
> #define NVIC_SetVector(irq, vector)         rt_hw_interrupt_install(irq, (rt_isr_handler_t)vector, NULL, NULL)
> #elif defined (KERNEL_LITEOS_A)
> //#include "los_hwi.h"
> #include "ca/irq_ctrl.h"
> typedef void (*LOS_ISR)(void);
> extern void HalIrqClear(unsigned int vector);
> extern void HalIrqUnmask(unsigned int vector);
> extern void HalIrqMask(unsigned int vector);
> extern unsigned int HalCurIrqGet(void);
> extern unsigned int hal_irq_create(unsigned int hwiNum,
>                                            unsigned short hwiPrio,
>                                            unsigned short hwiMode,
>                                            LOS_ISR hwiHandler,
>                                            void *irqParam);
> #define NVIC_SetPriority(irq, prio)          GIC_SetPriority(irq, ((prio) << (8 - __GIC_PRIO_BITS)))
> #define NVIC_ClearPendingIRQ(irq)       HalIrqClear(irq)
> #define NVIC_EnableIRQ(irq)                 HalIrqUnmask(irq)
> #define NVIC_DisableIRQ(irq)                HalIrqMask(irq)
> #define NVIC_GetActive(irq)                 (HalCurIrqGet() == (irq))
> #define NVIC_SetVector(irq, vector)     hal_irq_create(irq, 0xa0U, 0, (LOS_ISR)vector, 0)
> #elif defined(KERNEL_NUTTX)
> #include "ca/irq_ctrl.h"
> extern void up_enable_irq(int irq);
> extern void up_disable_irq(int irq);
> extern int up_prioritize_irq(int irq, int priority);
> typedef CODE int (*xcpt_t)(int irq, void *context, void *arg);
> extern int irq_attach(int irq, xcpt_t isr, void *arg);
> #define NVIC_SetPriority(irq, prio)         up_prioritize_irq(irq, (prio))
> #define NVIC_ClearPendingIRQ(irq)        GIC_ClearPendingIRQ(irq)
> #define NVIC_EnableIRQ(irq)                 up_enable_irq(irq)
> #define NVIC_DisableIRQ(irq)                up_disable_irq(irq)
> #define NVIC_GetActive(irq)                 (((GICDistributor->ISACTIVER[(irq) / 32U])  >> ((irq) % 32U)) & 1UL)
> #define NVIC_SetVector(irq, vector)         irq_attach(irq, (void *)(vector), 0)
> #else
47a104
> #endif
52a110,111
> #define CA_L1C_LEVEL	(2U)
> 
1016c1075
<   for(uint32_t i = 0U; i<7U; i++)
---
>   for(uint32_t i = 0U; i<CA_L1C_LEVEL; i++)
1025a1085,1112
> /** \brief  Clean and Invalidate cache by address range
> * \param [in] op 0 - invalidate, 1 - clean, otherwise - invalidate and clean
> */
> __STATIC_FORCEINLINE void L1C_CleanInvalidateCacheRange(uint32_t op, uint32_t start, uint32_t end) {
>   uint32_t ccsidr;
>   uint32_t size;
> 
>   /* set csselr, select ccsidr register */
>   __set_CSSELR(0);
>   /* get current ccsidr register */
>   ccsidr = __get_CCSIDR();
> 
>   /* get cache line size */
>   size = 1 << ((ccsidr & 0x00000007U) + 2U + 2U);
>   start &= ~(size - 1);
>   end &= ~(size - 1);
>   while (start <= end) {
>     switch (op)
>     {
>       case 0U: __set_DCIMVAC(start);  break;
>       case 1U: __set_DCCMVAC(start);  break;
>       default: __set_DCCIMVAC(start); break;
>     }
>     start += size;
>   }
>   __DMB();
> }
> 
1899c1986
<                                    region.sh_t = NON_SHARED; \
---
>                                    region.sh_t = SHARED; \
1944c2031
<                                    region.sh_t = NON_SHARED; \
---
>                                    region.sh_t = SHARED; \
1959c2046
<                                    region.sh_t = NON_SHARED; \
---
>                                    region.sh_t = SHARED; \
1974c2061
<                                    region.sh_t = NON_SHARED; \
---
>                                    region.sh_t = SHARED; \
2080c2167
<                                    region.sh_t = NON_SHARED; \
---
>                                    region.sh_t = SHARED; \
2693a2781
> #if 1
2694a2783,2794
> #else
>     uint32_t reg;
> 
>     reg  = __get_SCTLR();
>     /*
>     SCTLR.M, bit[0]   MMU enable.
>     0  PL1&0 stage 1 MMU disabled.
>     1  PL1&0 stage 1 MMU enabled.
>     */
>     reg |= 0x1;
>     __set_SCTLR(reg);
> #endif
